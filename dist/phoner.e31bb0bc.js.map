{"version":3,"sources":["node_modules/libphonenumber-js/metadata.min.json.js","../source/constants.js","../source/util.js","../source/ParseError.js","../../source/tools/semver-compare.js","../source/metadata.js","../source/extension.js","../source/isViablePhoneNumber.js","../source/parseDigits.js","../source/parseIncompletePhoneNumber.js","../source/getCountryCallingCode.js","../source/getNumberType_.js","../source/isPossibleNumber_.js","../source/IDD.js","../source/RFC3966.js","../source/validate_.js","../source/isValidNumberForRegion_.js","../source/format_.js","../source/PhoneNumber.js","../source/parse_.js","../source/parsePhoneNumber_.js","../source/parsePhoneNumber.js","../source/parsePhoneNumberFromString_.js","../source/parsePhoneNumberFromString.js","../source/parse.js","../source/format.js","../source/getNumberType.js","../source/getExampleNumber.js","../source/isPossibleNumber.js","../source/validate.js","../source/isValidNumberForRegion.js","../../source/findNumbers/util.js","../../source/findNumbers/parsePreCandidate.js","../../source/findNumbers/isValidPreCandidate.js","../../source/findNumbers/utf-8.js","../../source/findNumbers/isValidCandidate.js","../source/findPhoneNumbers_.js","../source/findPhoneNumbers.js","../../source/findNumbers/LRUCache.js","../../source/findNumbers/RegExpCache.js","../../source/findNumbers/Leniency.js","../source/PhoneNumberMatcher.js","../source/findNumbers_.js","../source/findNumbers.js","../source/searchNumbers.js","../source/AsYouType.js","../source/getCountries.js","../source/formatIncompletePhoneNumber.js","node_modules/libphonenumber-js/index.es6.js","index.js"],"names":["MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","matchesEntirely","text","regular_expression","RegExp","test","mergeArrays","a","b","merged","slice","element","indexOf","push","sort","ParseError","code","name","constructor","message","stack","Error","prototype","Object","create","cmp","pa","split","pb","i","na","Number","nb","isNaN","V2","V3","DEFAULT_EXT_PREFIX","Metadata","metadata","validateMetadata","v1","version","v2","undefined","compare","v3","keys","countries","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","length","type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","replace","possibleLengths","is_object","join","type_of","getExtPrefix","ext","getCountryCallingCode","isSupportedCountry","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","extractExtension","number","start","search","number_without_extension","matches","match","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","DIGITS","parseDigit","character","parseDigits","string","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","value","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","_type","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossibleNumber","chooseCountryByCountryCallingCode","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","getIDDPrefix","countryMetadata","IDDPrefix","defaultIDDPrefix","stripIDDPrefix","IDDPrefixPattern","matchedGroups","parseRFC3966","part","formatRFC3966","isValidNumber","isValidNumberForRegion","defaultOptions","formatExtension","formattedNumber","extension","formatNumber","format_national_number","addExtension","fromCountry","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","changeInternationalFormatStyle","format_as","choose_format_for_number","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","PhoneNumber","TypeError","isCountryCode","_metadata","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","defaultCountry","parse_input","formatted_phone_number","parse_phone_number","carrierCode","selectedCountry","phoneNumber","valid","extended","possible","extract_formatted_phone_number","starts_at","strip_national_prefix_and_carrier_code","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","find_country_code","national_phone_number","possible_countries","_find_country_code","leadingDigits","with_extension_stripped","default_country","extractCountryCallingCode","parse_national_number","carrier_code","exactCountry","potential_national_number","numberWithoutIDD","parsePhoneNumber","parseNumber","normalizeArguments","arguments","parsePhoneNumber_","args","Array","call","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","error","parsePhoneNumberFromString_","_parseNumber","_formatNumber","arg_5","_getNumberType","getExampleNumber","examples","_isPossibleNumber","_isValidNumber","_isValidNumberForRegion","limit","lower","upper","trimAfterFirstMatch","regexp","index","startsWith","substring","endsWith","SECOND_NUMBER_START_PATTERN","parsePreCandidate","candidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","_pZ","pZ","PZ","_pN","_pNd","pNd","_pL","pL","pL_regexp","_pSc","pSc","pSc_regexp","_pMn","pMn","pMn_regexp","_InBasic_Latin","_InLatin_1_Supplement","_InLatin_Extended_A","_InLatin_Extended_Additional","_InLatin_Extended_B","_InCombining_Diacritical_Marks","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","isValidCandidate","leniency","previousChar","lastCharIndex","nextChar","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","VALID_PRECEDING_CHARACTER_PATTERN","findPhoneNumbers","PhoneNumberSearch","phones","hasNext","next","searchPhoneNumbers","Symbol","iterator","done","state","startsAt","parseCandidate","find","endsAt","last_match","_findPhoneNumbers","_searchPhoneNumbers","Node","key","prev","LRUCache","size","head","tail","cache","ensureLimit","node","remove","put","console","log","RegExpCache","regExp","get","POSSIBLE","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","leadingDigitsRegExp","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","pow","PhoneNumberMatcher","searchIndex","maxTries","Leniency","parseAndVerify","extractInnerMatch","innerMatchPattern","isFirstMatch","possibleInnerMatch","group","lastMatch","findNumbers","matcher","results","_findNumbers","searchNumbers","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","SUPPORT_LEGACY_FORMATTING_PATTERNS","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","reset","extracted_number","currentOutput","processInput","parsedInput","resetCountriness","isInternational","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","determineTheCountry","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","template","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","validation_result","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","cut_stripping_dangling_braces","strip_dangling_braces","dangling_braces","pop","cleared_string","cut_before_index","close_dangling_braces","cut_before","retained_template","opening_braces","count_occurences","closing_braces","symbol","count","times","getCountries","formatIncompletePhoneNumber","parameters","parsePhoneNumberCustom","apply","parsePhoneNumberFromStringCustom","parseNumberCustom","formatNumberCustom","getNumberTypeCustom","getExampleNumberCustom","isPossibleNumberCustom","isValidNumberCustom","isValidNumberForRegionCustom","findPhoneNumbersCustom","searchPhoneNumbersCustom","PhoneNumberSearchCustom","findNumbersCustom","searchNumbersCustom","PhoneNumberMatcherCustom","AsYouTypeCustom","isSupportedCountryCustom","getExtPrefixCustom","parseRFC3966Custom","formatRFC3966Custom","formatIncompletePhoneNumberCustom","getPhoneCode","getPhoneCodeCustom","$","x","document","getElementById","finalNums","handleFile","file","data","reader","FileReader","readAsText","target","files","onload","rawNumsArray","forEach","el","addEventListener"],"mappings":";;AiDAA;;AAEA,MAAMgjB,CAAC,GAAGC,CAAC,IAAIC,QAAQ,CAACC,cAAT,CAAwBF,CAAxB,CAAf;;AhBFA,AhCAA,AgDIA,AjDJA,IiDIIG,SAAS,GAAG,EAAhB;AVJA,ANCA,ADDA,A5BAA,AcAA,AuBMA,AxCLO,A0CDP,ADAA,AjBAA,AsBAA,ADAA,AnBAA,ACAA,AEAA,AdAA,ATAA,AiBAA,ADAA,ADAA,AFAA,AwBAA,AfAA,AdAA,AfCA,ICAapjB,kBAAAA,GAAqB,CAA3B,EAEP;AuCHA,ALEA,AFAA,ACFA,A9BCA,ASDA,ACAA,AbIA,AKJA,A+BGA,AXHA,AdAA,AJAA,ACAA,AYAA,AnBAA,A+CMA,AjDJA,IiCAM2Q,WgBIS0S,UhBJT1S,AgBIN,CAA0B2S,EhBJI,EgBI9B,EAAgC,+DhBJhC,EAEA;AACA,ADHA,AEDA,A9BCA,AcDA,AuBOA,AEPA,APEA,AXFA,AdDA,AiBCA,AEAA,AvBMA,AiBNA,AhBAA,AeAA,ADAA,AsBAA,A1CAA,A2BAA,AdAA,AkCMC,MAAIC,IAAJ,KjDJc;AwCFf,ALEA,AFGA,ADHA,AEAA,AHHA,A3BGA,ASFA,APCA,A+BEA,AXHA,AdAA,AJCA,ACAA,APAO,A+CMH,AjDLY,QiDKNC,C/CNM5iB,IFCU,CiDKV,GAAG,IAAI6iB,AjDLR,GEDR,GAAwD,I+CM5C,EAAf;AhBDJ,ADHA,ADHO,A3BGP,AcFA,AuBYA,AxCTO,AKFP,AoCDe,ANQf,AWRA,ADAe,AnBAA,AhBDf,AmBCA,AdAA,ATOA,AFTA,AGGA,AcDA,AHGA,AjBH+D,AaA/D,AkCOCD,AjDNkC,EGHnC,A8CSCA,EhDJYvjB,AKFPgG,EJD0BpF,E+COzB,ClBRSkP,AWCQ+L,AIAAuF,AnBAA3R,AsBOhBgU,C/CPuD,GAAA,C6BDxD,CAAe1T,IkBQrB,ClBRM,AWCQ,AOOIsT,CPPiBziB,AIArB,CfDcoP,A9BIhBhQ,A6CHwBgD,A5CA0B,CICzDgD,AJDyD,C+COxC,ChDJW,AyCHnB,AfAA,AsBOS0d,C3CNI,AqBDahgB,CIDlC,A9BIA,AyCHmCsE,A1CCiB,E+BD3D,A9BKA,ACL+D,C4CAhD,CGOI,CHP4B,A5CAgB,A+COhC2b,C3CN/B,AqBDe,AzBAgD,CwCAhD,CpCGf,AqBHkDjU,CeAC1M,CxCAY,A+CO5C,CAAkB,CAAlB,CAAlB,GtBPc,CeAA,CfA6CA,CeC5D,AxCD+D,CAAA,CAAA,CAAA,IyBAhD,CzBAgD,CyBAO,QzBAP,GAAA,SAAA,CAAA,CAAA,CAAA,GAAxB,EAAwB;AsCC/D,ALEA,AHAA,AEAA,AHFC,A3BEc,AyCKf,AvCJA,AoCFC,AzBCD,A6BFC,ApCFD,AiBEC,ADDD,AnBQA,ACNA,ANF+D,AFCH,M+BAtD+M,AWCC+L,AfDFpM,AzBDsC7O,GEGnBsB,A0CFhB,A9CAwD,CAAC,C+BA3D4N,C3BES,CAAc9O,AsCDtB6a,AIDK/Y,CfAE,A3BEC,AuBFV2M,A3BA2D,C+BA1DK,AJAQrM,CvBEkBxC,AsCDf,A1CDqD,CIEvD,E2BFM8O,A3BEc,CsCDdkL,A1CD2C,E2BA3DxL,A3BAsE,C2BA1E,CIAoBM,A7BD0C,CyBCvC,C3BAwC,CEDD,C6BCjC,A/BAkD,C+BA1ED,CeAE,CAAa/M,C9CA2C,C+BA3BgN,C/BAgD,EEDtB,CAAA,C6BC1BA,A7BD0B,AFCC,C8CAxD,A5CDuD,CFC2B,C+BA7CD,AeAdqR,G9CAiC,E+BA/D,A/BA8F,C0CC9E,CXDoC,AWCbxgB,E1CDwB,E0CC/C,A1CDmF,C8CA5F,CJCsCoH,CID7C,C9CA+D,EAAyC,G0CCxF,C1CD+C,C0CCThF,C1CDuD,IAA9C,EAAmD,C0CClG,CAAhB,E1CD+D,EAAwD,IAAxD,EAA6D,IAA7D,EAAkE,IAAlE,EAAuE,IAAvE,EAA4E,IAA5E,EAAiF,IAAjF,EAAsF,IAAtF,EAA2F,IAA3F,EAAgG,IAAhG,EAAqG,IAArG,EAA0G,IAA1G,EAA+G,IAA/G,EAAoH,IAApH,EAAyH,IAAzH,CAAL;AiCK3D,ADFA,ADFE,A3BEE,AcHJ,AuBaA,AEbe,ADEd,ANOD,AURC,AnBAC,ACDF,ArBQA,AiBRA,AhBEA,AeFe,AJWf,AjBXC,A2BAD,AoBQIugB,AjDR2L,EiDQ3LA,EhBHE5S,E7BFEvO,AsCDD2Z,EtCCC3Z,A6CKE,CNRcyZ,ApBAA3M,ArBAhB,A+CQG0U,AjDRwL,C+BC3L,A/BD4L,CIGvL3iB,AuBFJ,CvBEIA,CAAEoB,AsCDR0Z,AxCFKjb,C6BCA8K,A/BDuL,CiCK7L+E,ANJOhF,AsBOT,CPNa,A1CFwL,EiCKrL,A7BFP1K,AsCDZ,AOMmB,C7CLC,AFHb,CyCAO,AzCAI,AFAgL,CAAxI,CIG9CA,C2BFL,A3BEJ,AuCFJ,EZAE,I7BD0BJ,K+CQOwiB,CtBP1B,AJDM,CICU3f,EJD4B,A0BQjC,EAAqB,GtBPhC,EAAyBgM,EzBDf,GAA8B,GyBCfA,CAAShM,AzBDnC,EAA+C3C,IAA/C,CyBC0B2O,AzBD0B9O,C+BK5D,ANJS,EAA4CoC,CzBD7C,CAAP,MyBCQ,CAAP;AQJF,AFSA,ADFA,ADFE,A3BEE,AyCKJ,AhCTA,AZKO,AKDP,AqCHA,A1BEA,AUDE,AfFa,ALSf,AiBRA,AhBEO,AeH8C,ArBCpD,A2BAc,AoBSbsgB,AjDV6M,IiCMzM1S,ApBNA1H,AVFezH,AFORxB,AKDPgG,AEDOkB,AyCOXmc,E7CNMhhB,AuCHR,ApBDqD,EnBI7CA,A6CMF,CrCVkBuG,AiBCAiB,CrBEX3C,ARHuM,CIIvMjG,A6CMJmiB,AjDV4M,CIIxMniB,CAAEmB,AIAf,EyCMa,AjDVuM,CiDUtMqhB,AjDV6C,CGDzD,CCKWxiB,CAAQ,GAARA,AyBHE,AoBSN,C7CNL,A6CMiBsG,E3CNfvB,AqCHN,A/BDe,AWAsC,AMErD,C1BHE,ASCuC8B,CCAnCmB,AZKOjJ,CKDiB,AqCFOsO,ApBDAA,C0BSnC,ChBJIqC,ApBN0B,AZKO,CAAhC,AWLQ,EqBMoB,AhCCnC,AWPgD5I,CCAZlH,CPICZ,CHLnC,CAAYwB,GUCkB,ADAjB,CCA4B,AVDzC,CSCuDsB,CTDrC,C8BOpB,IpBNkD9C,EDAnC,EACf,MNG8B,GAAsB,SAApD,AqCFwDsO,ApBDAA,CVDb,GAAsB,IAAjC,CAAhC,A8BEqCD,ApBDAA,CoBArC,ApBDqD;AYOrD,AHFA,AnBHA,AVHoB,AeEpB,AuBcA,AxCPA,AKFA,AqCLA,ADEC,ANQD,ATRC,AhBHD,ACEC,AkBDc,AvBSf,AiBRA,AhBGC,AeLoD,AJYrD,AjBTA,A2BDA,AdDA,AkCUE,AjDXyN,EGDvM,EgCQdkE,AxBPA5K,EgCEGjH,ApBDAA,AMCT,CrBGM,CyCMAijB,CPRE/H,AZFgB/R,CaAxB,AnCGA,AeJqD,AvBA2K,CAAC,E2CCjO,ApBDqD,EvBA2K,C0CGxN+R,A1CHmD,CGDvC,AuCIJlI,CPIVnB,AhCRc,E8CYF,CdJK,ChCRH,C8CYC,C9CZD,AuCIZqJ,CbDR,CaCC,EAA0B,AbAWvN,CoBQX+U,CtCXrBzb,CmBCS,CaAf,AbA+CpB,APDM,CoBE5C7F,AhCDT,AYASA,A0BUsB,C9CZX,AQGnB,AsCS+ByB,C9CZZ,EwCEpB,ApBDqD,COCtC,CKMf,AcI2B,CnBV4BqB,AmBUjB,EtCVtC,EAEC,AsCQ0B,CAAzB,EnBVa,EAAiDV,QAAjD,CnBAf,CmBCA,CnBEC,OkBDwDwL,IlBFzD,EAIC,GkBFqCD,CADtC,SlBDA,EAKC,MALD,EAMC,iBAND,EAOC,OAPD,EAQC,KARD,EASC,WATD,CADA,EAaA;A6BRA,ALGA,AFAe,ADFf,ADHC,A3BEG,AyCMJ,AFVA,ADGEwN,ALPF,ApBOA,ALDC,AkBAA,AdCc,ATOf,AiBRA,AhBGC,AeNoD,AMErD,AoBUEzG,AjDZqO,ImCQjO5C,AOJJqJ,AOQAzG,ENVatN,A/BCVA,AkBAA,APFUA,AMEND,CzBEA,AICH,EyBEkB8I,AFLvB,AfCuB9G,CRAxB,ARJ4O,CIK/NxH,AsCDXwZ,AbFF,AoBUS,AjDZoO,CIKhOxZ,AsCDHhB,AOQAgU,CNXV,A/BEKvN,AkBAOvB,APHyC,CMErD,CECYsJ,A3BEK,A6COf,AjDZ0O,CIKxO,AuCJJ,ADGEgM,AnBJmD,A0BYvC8H,AjDZ6C,C0CI5C/H,CPITpJ,A/BHcnQ,AQFHc,CREGd,A0BFf,CCAJ,CIKsB,C/BHC,C2BFvB,A3BEG,CsCDWuZ,AZDQ,C1BEIvZ,AsCDJsR,CXDtB,A3BE0BtR,CQF1B,CqBKc,A7BHX,A6COF,ChBJ0CkO,AFLvBT,AWCN8L,A9BDa,CREI,CsCD9BC,A1BAa,CcDd,AdC8ChU,CaF/C,CECC,ADCA,ADDQA,CcFT,ApBDqD,CoBEtCC,ApBDAA,CQEd,AfCc,CiBIA,CEAf,AnBJsDtE,AaFtD,CIMuDoN,AFLtD,GYFD,ApBDqD,GUQtC,AjBJA,EiBIgDlQ,AjBH/D,IiBGe,EACf;AEAA,AFCC,ADHD,ADHC,A3BEO,ADNJ,AeEJ,AuBkBA,AEnBA,ADIE,ALPF,ADcA,AzBEe,ACVboH,AkBCA,AdAF,ATOA,AiBRA,AhBGC,AePoD,AJarD,AUXA,AoBYE,AjDdiP,ImCS7O2K,AHFApC,ApBHJvI,E+BFsBhF,A3BEuCgF,AOHvChF,AMERgF,C1BHPrG,AKOH,CJDMa,COQYsF,CPRZtF,A0BDJ,AtBDR,AyCUQqhB,AjDdgP,CGApP,ASIF7b,AZJuP,EIMxOvF,AYDjB,AaHA,CMOMkQ,AhCTU,AwCChB,A/BGY,AkBCA/G,APLyC,CvBAmM,CYItP5D,AICF,AaHA,A7BF2D,CmCSrD2K,AQRN,ApBDqD,EnBMpClQ,ADNIb,CCMGQ,EAAAA,AOQT,AsCAK,C7CROG,AOQWwF,AmBT9B,AmBSa+b,CdLGrR,A/BHArQ,A0BDF,C1BCLK,AYDjB,CZCQ,AYDR,ELSe,ERdC,AQehB,AsCDQ,CjBPF8N,A7BP2B5O,A8CcJoiB,CjCT7B,CiCS+B,CjBPK,C7BPhC,AaKJ,AaHA,CcDA,A3BIA,AOLqD,AMGrC/b,CcDQhF,ApBDAA,A0BaWmgB,CdL7BxQ,EnBJN,CmBIyCD,ENPzC,CGKA,CWNA,ApBDqD,C0BcT,CAACnR,EnBTrC,AdAR,CcAE,AdAF,CAAA,AiCSmC,CjCTnC,AiCSkD,GdL5CoR,EnBJN,CmBIM,GAAN,KnBJA,GAAA,SAAA,CAAA,CAAA,CAAA,GADyE,EACzE,gBiCS6EoR,EAA3B,CAAf,CAA3B,CAAN;AdHK,AFAN,AFLD,A3BCQ,AyCUR,A1ChBI,AFQG,AoCNQ,ApBEf,ANUA,ACVE,AkBCA,AdDF,ATQA,AiBRA,AhBGC,AqBND,AoBaEzO,AjDf6P,ImCWlP1C,AlCFA1S,AgDMXoV,EhBJG5E,AtBGwC1I,AKVgChF,AaDpDA,C1BFhBnB,AKOH,CJDMa,CiCJY+Q,CjCIZ/Q,AIHZ,ARJoQ,CiDe3P,AjDf4P,CiDe3P6S,C7CRO9S,AOQjB,CwBJamQ,AhCVT,AaIJ,AaHA,CoBaE,AjDfkQ,CCSvP1S,AUMb,AsCAcijB,AjDf6C,CmCW9CvQ,AhCVMlR,AaInB,AaHA,EzBKiBe,AHEW,CGFJH,CDNpB,CCMoBA,C+BIMmQ,A/BJHlQ,CAAHD,CAAPG,AiCJF,A1BYf,AsCAE,C7CRM,AOQR,AKVA,CiBMKiO,AjBNL,CiBM2B3P,AIP3B,ArBCA,CAAA,GiBMK2P,AtBIL,CsBJgCD,EtBIhC,CAAA,AkBbA,CMSamC,ANRY5P,GMQsBtC,AxBI/C,EsBJKgQ,CAAJ,EAA2C,AJT5C,IlBaA,CAAA,CAAA,CAAA,KAAA,IwBJakC,ElCFN,CkCEM,ClCAb,CUIA,CwBJO,EAEP,AxBEA,SAAA,CAAA,CAAA,CAAA,GADuD,EACvD;AsBHE,ADHa,A5BDP,ADNJ,AsC0BJ,AEzBC,ADGA,ALFD,ADSA,AWNe,ApCQf,AKTC,ATQD,AiBRA,AhBGC,AePA,AJYD,A8BGK,AjDjBsQ,GiDQvQ,GZJJ,A1BU2D5P,CRZlDlB,AKOH,CJDMU,C4BCYgO,AWNhBwL,ADGAD,AKCgBsF,A/BDhBtZ,AOJAqH,CnBMI5M,AIJZ,ARJgR,CiCYvQ,AjCZwQ,CGE7Q,CCMaE,COOjB,AKTQqF,CZEA,ADNU,AaIJrE,AhBNkQ,CiCY9Q,ASND,A1CN0D,CIQtC,AOOrB,ERbsB3B,GaIdgG,EZEoB,ADNV,CCMG,ADNOrG,AkCE5B,CLKe,ArBMf,CqBN0C+O,ArBM1C,AKT0B/M,CqBDW6K,A1BUrC,CRbkB,AQalB,CAAA,CRbmCzM,AQclC,GKVOiG,EgBGO,A7BPX,AwCCiBnH,AIIN,CAAqCgH,CfGpD,AhBJqCkC,E2BH7BkS,EAAmBhU,AIIZ,EAA4CtE,KJJnDsY,EAA4BhZ,AIIrB,AxBLqBpC,EwBKgCoC,ExBL5DoM,EAAkCpH,EoBClCgU,CAAP,CIIc,C/BDoCjU,C+BEnD,CxBNQqH,EAA2CpM,CPId8G,EAAqB9B,CqBDFwG,IdHhDY,CAAP,CPIoCtF,EAA8B9G,CqBD9BuL,CADrC,MrBEqCzE,CAApC;AiBOC,ADFD,A5BFO,AyCUR,AFfC,ADGA,ALHD,AUKC,A9BHD,ANWC,ACVA9G,AkBCA,AdDA,ATQD,AiBRA,AhBGC,AePA,AMCA,AoBeA,AjDnBsR,EYOtRA,CqBED,CAMC,EIVQpC,AUIJ,AjBDA,CiBCCoC,AvCCA,CJDMN,CyBLJkN,CzBKIlN,AiCLZ,AzBGCM,AJHD,ARJ4R,CAAC,EIS5QR,AiCLjB,AzBGY,AkBCAkB,EUEZ,ApCDQ,A2CAP,A/CT2R,CAAjO,CIStC,A2CAL,AnCFAX,GkBCX,I1BCuB,CAAC,A0BDL,C1BCH,MiCLrB,CACSnC,APGR,ADJsBmH,CjBGX,CAAa/E,AkBExB,EOLD,CRAQ4M,EAAsB5H,GjBGlB,CAAXhF,GiBHO4M,EAA+B5M,QAA/B4M,CAAP;AWOA,ALGD,AHFC,A5BFO,AqCmBR,AxCjBA,AoCRA,AUME5M,AjBAA,AvBMF,AiBRA,AhBGC,AWID,AUVC,A7BLkS,ImCc7R6P,AlCFA1S,A8CFJ6C,EVLagF,C7BMT,CJDM,CAACrF,CHEPxC,A6BFE,AtBNR,ARJwS,CAAC,C+CUvS6C,C9CEa,AoCRf,CjCMaL,A0BADiJ,C1BAOpJ,A2CANkB,A/CV2R,CqCIxS,ArCJ2D,CIU9Cf,CAAD,I+BINkQ,A/BJoBlQ,A2CAxBK,CjBAM,CAAc,CKIK,E/BJDL,CAAMD,C+BID5B,C/BJL6B,CAAlB,EAA6B,E+BIV,AEV3B,CFUsC,AETvBqF,IjCK6B,CAAP,C+BIO4K,CEV5C,IpCQA,G6BFQ,CAAN,CKIyB,CAA3B,EAEA;AHHC,A5BFO,AyCeR,A5CbA,AoCTA,AUOElP,ApCOD,ACTA,AkBEC,AvBMF,AiBRA,AhBGC,AyCUDqf,AjDtB+S,CiDsB9S,CAAC,CnBpBF,C7BWM3iB,A8CFJsD,AjBED,EORuBV,A1BanB,ACTAgF,CDSCD,AHNA,CJDMpF,EIPZ,ARJoT,CCa9SvC,A8CFJsD,A/CXmT,CWkB/SqE,CPPMpF,AOOAe,ACTPsE,CREaxF,AHEF,AoCThB,AUOYa,AnCFCD,AqCaZ,C9CxBoB3B,A8CwBrB,AjDtBoT,CIWxSkB,AQFX,AqCaeqhB,C7CXJrhB,AiCPZ,ArCJ0T,CYUzT,EDQA,CPPwB,AJX2R,CIW1RA,AOQzB,AXnB0D,CCa3D,A8CFEe,I3CAwBf,CAAMD,EAANC,CAAlB,C6CWR,C7CXqC,A6CWJ,GZlBjC,CACwBK,GjCMoB,CAAC,A6CW7C,C7CXqC,C6CWMogB,EZlB3C,QYkBA;AdLA,AFDC,ADFA,A5BFI,AqCkBL,AxChBA,A8CFE,ApCQA,ACTA,AkBGD,AvBID,AiBRA,AhBGC,AWGD,AjBPO,AFTyT,ImCiB1TtQ,AlCHAzS,EgCEDsQ,CzBHC,CPCAtQ,AWHA,CoBGE4P,ApBHDlI,AVFS/G,CMLhB,ARJqU,CCcxT,ADdyT,GYW/T+G,CAAMhE,AZXwT,CAA1Q,CiCgBtD4M,CAAY5P,EhCFjB,ACLO,CAAqBE,CiCQtB6R,AFDDnC,A/BPE,C+BOeF,C/BPSvP,CiCQJ4O,AjCRpB,EAA2B,K+BO7Ba,CAAJ,ArBLC,EqBMD,ArBNgC,KoBGLJ,EGGK,CAANT,EAAS,CAATA,CAA3B,oBHHQG,EAAiDQ,SAAjDR,CAAP;AQAA0F,ALKD,AFDE,ADHD,ADLM,AcsBP,A1C1BAlU,AFSO,AoCTN,A1BeC,ACTC,AkBGF,AvBID,AiBRA,AhBGC,ANJA,AFV2U,EwCc3UkU,EvCCYrV,ECLNa,CMID,CyBIE4P,CFRQd,AMJRuE,CGIR,ArCJA/S,AKFA,ARJiV,CGMtUO,AHNuU,CwCUlV,A5BES,AVFFb,EDKMb,CCLGW,AFViU,CYYpUc,AVFGd,AFV2C,CCejC,ACLRG,GCJlBK,CqCIA,APQQsP,ArBNC,CAAU,AVFH9P,CCJOgB,C8BYCrB,A/BRvB,I+BQuBA,AFRjB,CSAP,APQ6BQ,AFRO8O,A5BJbjO,CqCQbwE,ArCRoBvE,I8BYNtB,CAAWkQ,AFR5B,CSAP,ArCJuB7O,C4BIqBsF,A5BJPxF,CqCQnB0O,GPIiBK,AIZTlQ,ClCAWmB,C4BI9B,A5BJoCC,C8BYCyO,CFP5C,AMLQ+D,CpCSD,CuCLP,AHJgCxM,EGQHhF,GrCRNf,C8BYqBwO,A9BZ5ChP,C8BYsDiD,AIZ9C8P,EAAiCxR,CGIzC,C5BES,C4BGR,A5BHE,CqBMqBpC,CAAtB,GIZM4T,CAAP;AGUC,ATJD,A3BCG,ASFJ,AVJA/S,AsCwBA,AJxBC,AUMA,AnCAE,AkBGF,AvBID,AiBRA,AhBGC,ACDc,AWfA,ADkBf,AnBjBwV,IaWlV0H,EkBCCgH,G3BCI,A2CAH,AtCCgBzI,AWfA2G,ChBcpB,ADNJ5M,AHP6V,CwCgBpV,ATJF0O,A5BLInO,AHPmV,CQenV,CuCFC+a,ChBDGxV,CSIb,AhCZF,ARJ6V,CAAlS,I+BY5CA,A5BLf9F,C4BKsBkF,AlBDhBwC,AVJevH,GUIK,COZX,CAA0BhB,CWa1B2G,CAAc2I,EXbd,C2BcP,C5CNRzO,A4CMsBiC,A3BdyBsE,EWahCT,CAAd,A5BLkC9F,AMOpB,CAAoC8F,GsCD3C,A3BdO,E2BcgBvE,A3BdyBA,CXezC,EACf,CNRAvB,I4CMQ,A3BdO,E2Bc0BsG,A3BdyB,K2Bc1D,CAAuCH,KAAvC,CAAP,ClCFD,EAEA;A2BHA,APSE,A7BLD,AyCoBD,AhCpBA,AZEA,AoCPA,AUKC,ApCSA5E,AmBNA,AvBID,AiBRA,AhBEgB,ACCf,AWhBA,AlBYA,AFZmW,EWuBnWA,C6BbD,CvCMMzC,EQADiH,CPJJ,C+BOKoJ,CbnBEtC,CTuBPtL,AXvBwW,CEYxW,AFZyW,CCgBpWzC,AQADiH,CEOO,EVPK,AQAH,AThB2V,EWuBzVzE,AFPf,AThB8W,CSe/W,CAGC,CPNA,CFZwW,EEYlV7B,AFZ6V,CEYnX,EAAA,CFZwW,EAAgB,CoBArWN,GpBAqV,CiCmBnWgQ,AtBIM,ASvBJtC,AlBYP,AFZ0D,CiCmB1BvN,AtBIRiC,CSvBjB,ClBYP,E+BOK4N,CAAgCG,E/BPrC,CSWW,ATXX,CSWA/N,ASvBO,CAAA,EAAA,EnBgBR,AmBhB+BgF,ClBY9B,CDKD,ACLC,E+BOK4I,CAAJ,EAAoD,AbnB9C,EAAA,ElBYP,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAyB;A+BQvB,AFNF,AUmBD,AbnBe,AhBAb5N,ALQF,AiBRA,AhBEC,ACGA,AWnBuCI,ADkBxC,AjBN0B,AFZqW,IYc7XJ,AQdsCI,EWcnC+M,AXdmC/M,EAAI,AlBYlB,C0BEFyF,C5Bd4W,C+Bc/XsH,A/BdgY,CYcnYnN,AJES,ANJe,C+BQhB,ArBNC8F,EmBAG,AvBVd,ARJoY,C+BcnY,A/Bd0D,EiCoBxD,AFNc,OHAF,GACf,kBhBDE9F,CAA2C+E,KAAAA,CAAMhE,kBAAjDf;A4BKD,APEE,ACFH,AHJE,A3BDD,ASCM,AZGP,AUOC,AiBVD,AhBNC,ALcD,AiBRA,AhBCgB,ACIf,AWpBO,AwBAR,A5CA2Y,GYS1Y,AQTO,CcmBFgO,AjCDAxQ,AmBlBE8N,ETyBH,AiBVL,ARfoDtL,CcmB9CgO,AvBMAhO,EEVUoG,ADEf,CsBEW,AjCDN5I,ADlB0Y,C+BevY+G,A/BfwY,ECkBlY,CmBlBP+G,CTyBFtL,ASzBL,ApBA+Y,CWyBjYa,AXzB4C,C+BelD0D,CAAOnG,GlBAT,CAAsBsC,CkBApB6D,CAAa,CAAbA,AHAT,CjBUMvE,CoBVmBmN,ApBUCpI,CiBTYwG,CfD/B,EAA+BvL,CkBA7BuE,ApBUiBQ,CoBVxB,ApBU8BrE,CVPhC,EAEA,GYLO,CFUDV,CETN,AFSC,EACA,wBiBVwDwL,KMGzD,INHsCD,CADtC;AKOE,ACFK,AHJL,AlBCD,A4BkBD,AxCdA,AUME,AiBZF,AhBGE,AkBAD,AvBMD,AiBRA,AhBCC,ACIA,AapBc,AFAd,ADkBD,AjBP0B,AFZ6X,EsCHvZ,EJuBa0C,EAAAA,ArBHN5H,AeDEtB,AEEJA,ElBAC,AVNoB,CgCQbkJ,AtBFNlJ,AUjBiBmH,CX0BhB,AX3BoZ,C4Be5Z,AEGKnH,A9BlBwZ,CQiBlZ,EGUChG,AiBZZ,AhBGOgG,AkBAFA,CIEiBiJ,AtBFT9I,AJdb,ARJ4Z,CEYlY,CFZwY,CkCoBrZ+I,AhCRa,CSelB,AmBTHlJ,CnBSG,ACTN,AkBAD,CIEY,ArBHNsB,AbjBqZ,CYkBxY,AZlBuC,EkCoBpD,ArBHkB,IAAItG,KeF7B,CACSgF,CNfM,CAAoCnH,GMcnD,CNde,EX0BuBmH,AW1BmBC,GTgBhC,CAAahF,CFUA+E,CAAMrE,CW1B7B,EAAmDV,GTgBzC,CAAxB,AFUO,CAAN,GW1Ba,EAA6D;ATiB3EqG,AZID,AUME,AiBbF,AhBIG,ALMH,AiBRA,AhBAgB,ACKf,AapBA,ApBUyB,AFZ8Y,EakBvaA,IeFerB,I1BJU,AFZmZ,CAAC,CEYpZ,C0BG1B,AhBIU,EZnBma,C4Be7a,A1BH0B,AFZiC,CakB1DqB,CAAgB3F,ADCd,OCDF2F,AXNyB,CWMD3F,AXNC,MAAA,CWMzB2F,CXNyB,C0BG1B,CACgBrB,OADhB;AKSC,ACHM,AHHN,A9BKD,AKFA,A+BTO,ATGP,AhBKG,AkBDF,AvBOD,AiBRA,AhBAC,ACKA,AapBA,AHiBD,AyBjBe,A1CSW,AFZ0Z,IkCqBvakJ,EAAAA,ANLYlO,AEGpBkE,ARhBAc,ApBSqB,G+BYlB,ACHKkJ,AHHL3J,AzBGCrB,A+BTO4N,AOTQmI,C1CSE,AFZ+Z,CAAC,CQkB/a,CyBMV,AXrBIjU,ApBSqB,C0BG1B,CGGC,AvBdD,ARJyb,CkCqBlagJ,AlCrBoC,C4Be3D,ANZgBhJ,EYkBHkJ,GAAA,AUlBE,A1CSW,CAAA,CoBTVlJ,CYkBT,AZlBiBmE,AsBCxB,A1CQ0B,EmCAnB,AnCAmB,CAAA,EmCC1B,G/BQA,CAAkChG,EsBNlC,CACyBnD,ENbpBgF,CQgBoBvB,CxBEzB,EACA,AgBnB0C,CAACV,CMY3C,CEIKmB,CAAJ,EAAiC,6BRhB4Bc,OAAAA,CAAQmE,cAA3BpG,EAA2C/C,QAA3C+C,CAA1C,EAAgG;AWsBhG,AFNA,AlBCA,APGA,A+BVD,A1BiBC,AmBVCgC,AvBOF,AiBRA,AhBDgB,AcddC,AsBAF,A1CQ0B,AFZsa,IsCD1b0M,ARqBJ3M,ARhBAC,CpBQwB,CWQrBmB,AwBPL,A1BiBOlB,AiC1BP,GdgBEF,C9BpBmc,CsCAnc,AhBIAC,ApBQwB,AFZ4a,C8BoB5bsG,ERhBRtG,CtBJmc,CAA1Y,IsCAzD,A3B8BKC,EW1BLD,CTgBGmB,AFUmBnB,AW1BtBA,CgBJA,AzBoBqBjH,CyBpBT4T,AhBIZ3M,AsBAF,CPSA,CfRMA,CgBLJ,AzBoBGmB,A+BfgCoF,C/BeTlF,AwBNSkF,CCdlB3G,A3B8BKI,CAAQ5E,EAAR4E,AmBVFvB,CRhBpBuB,CgBJA,C3B8BmCD,AW1BnC,CgBJkD,ERoB1CuG,EnBU2BvG,AmBVP,CnBUaE,EEVfoB,CAAgBC,SAAhBD,EAAvBF,AFUmBnB,CEVvB,EACA,AFS2DD,KAAAA,CAAMG,KAAjE,AiCzBuDsG,CPSAA,QOTnBD,CPSAA,AOVrC,CPSA;ACboD,AEwBnDqH,ANDM,ArBDL,AZEK,AKAN,A+BXD,A1BkBC5S,AiBdA,AhBIC,AkBD8BmJ,AvBQhC,AiBRA,AhBDC,ACKA,AalBEA,AHeH,AyBjBA,A1CQ0B,AFZkb,EwCwB3cyJ,A7BOA5S,EuBRYmO,AjCCA1Q,EqCxBaoT,AhCwBrBzN,A+BVIxF,APMuBuL,ARd7BA,AsBDMvL,A1COiB,CsCF1B,ANaauQ,AzBCZ,CGHKpJ,AVToB,CsCF1B,AZOQ4H,CUjB4C,AJuBjC,AGVnB,A1BkBC3M,AiC3BD,A5CJid,CasBxcqG,AFSC3F,AFPT,APZyB,AFZwb,CQmBvc,C8BnByC,ADapD,AzBQMqE,AgCjBN,ChCiBYrE,CJjBZ,ARJid,CAAtZ,EwCU3D,A7BqBCV,CAAiB+E,CmBXcoE,ArBI/B,AalBEA,ApBMuB,CDYb1L,AWHX,AVTwB,CoCZ0B,ARoBJiD,ARd7BL,CgBNiC,AEUpD,A5BWqB,AHGIkE,C+BAlBd,AvCAMhG,AUOKsH,CAAMrE,ATnBE,CWUjB2F,CAAgBC,AXVC,EoCZ0B,ArCwBhBnJ,AQAXoH,C+BdzB,A/BcgClF,E6BxBoB,AEwBrCoO,A7BOdzN,AiC3BD,CNJoD,AhCwB/CoD,A+BXL,AORSxF,CPSAA,A1BCT,CVSaH,AUSZ,AFTwB8G,CIFhB8B,APE0B,AGAG,C6BxBc,AMIpD,C/BkBE,AZE2CjJ,AoCX7C,A5BWyBmH,CAAxB,E+BdD,AZO0BQ,AnBOzB,E+BAyB/E,EvCAbvC,CqCxBuC,AViB5CkP,CUjB4C,CAAA,ArCwBGtP,A2BPtB2H,CUjBmB,A7BwBnD,E+BdD,CvCcavH,AQAZ,C+BCA,CFzBmD,CrCwBUH,A2BPtDqP,EAAkC3M,AnBOzC,CAAA,CHAA,IgCxBmD,ErCwBvCvC,A2BPLkP,AnBOP,C6BxBmD,AViBnD,AnBOA,ERA0EpP,OqCxBvB,A7BwBnD,C6BxBmD,ArCwBvCE,AQAZ,C6BxBmD,CAAA,A7BwBnD,CRAqFD,CQArF,C6BxBgC,E7BwBhC,CAAA,C6BxBmD,ArCwB7C,CQAN,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA,koByBFM,EACP;AIxBoD,AE0BlD,ALEF,AJPO,AlBEL,AwBVF,A1BqBC,AiBhBA,AhBIE,AkBF2B,AvBS9B,AiBRA,AhBFgB,ACMf,AarBC,AsBAF,A1CQ0B,AFZ8b,ImC4BlduS,CLRIzE,ARhBRtG,CgBJqC4M,ADcxB5M,AfVbA,AsBCaA,Cde4ChF,CUMrD,A/BDL,C+BCM8G,ATLSsG,COrBoC,A1BsB7C,AVVmB,AFZmc,CYsBrdpN,AZtBsd,CSyB7d,APbyB,CoCZ0B,ADapD,AOTA,A1CQ0B,E4BQhBsL,A9BpBmd,CqCa7d,APOEvG,AchBF,A5CJ2D,CEYjC,E6BSnB,AnBCC/E,AVVkB,C6BSCuE,AnBCV1D,E0BtBmC,CAAA,GPqB7C,EIODkP,AJP6B1C,COrBiB,C1BsB5CrN,CuBMyB,AvBNL+E,C0BtBwB,CAAA,AE0B/BtB,ELEgB3F,ASxBrC,CPSA,AzBS4BiH,AgCjBbC,CNLqC,APqB7C,AMPQA,AzBQmBtE,E4BI3BoG,ATJP,ESI6BzG,ALEI,CAEhC,CS1BD,CPSA,AzBSQL,CAAL,C0BtBiD,CAAA,A1BsBR,C0BtBQ,AH+BjD,CG/BiD,CE0B7C8G,EAAiC9G,EF1BY,AH8BnD,GACWyP,GKLL3I,CAAD,EF1B8C,EE2BjD,CF3BiD,AE2BhD+L,KLGH,GAC4B,CG/BuB,CAAA,CAAA,CAAA,CH8BnD,EG9B6C,CH+BT,GG/Be,EH8BnD,EKHGA,CAAwBpP,ALIiBkM,MKJzCkD,EAAgCpF,ELGnC,GACyD,GADzD,CKHmCA,CAAUqF,CLIkB,GAD/D,GACqEpD,CKJlCjC,EAAhCoF,EAAsD7S,QAAtD6S,CADF,ALID,EKFC,CLGqF,KADtF,GAEElD,UAFF,GAEe,GAFf,GAGE,MAHF,GAGWF,cAHX,GAG4B,GAH5B,GAGkCE,UAHlC,GAG+C,IAH/C,GAGsDD,cAHtD,GAGuE,IAHvE,GAG8EI,kBAH9E,GAIEH,UAJF,GAIe,GAJf,GAKE,GAP8B,CAAjC;AKCG,AD9BH,AJuCA,AJfC,A9BGM,AKAN,A+BbD,A1BuBC,ACbG,AkBJH,AvBWD,AiBRA,AhBFC,AcZC,AHcF,AyBlBA,A1CQ0B,AFZ0c,G8BmBne,ARlB2E,CrByB/DjS,AMIPqG,AerBL,EeKuB/D,AOTAA,A1COE,G6BWlBuE,ADFA,CxBKCpB,AJdiB,AFZ+c,CAAC,CQoB/d,CgCSD,AtCjBgB,CDcbzF,AoCbb,AzBUU,AgCnBV,CbmBQ6G,AvBnBR,ANQ0B,AFZ+c,C+BuB1djG,A7BXW,AFZiC,CC0BjC,AKAzB,A+BbD,AOTA,CJyBG,A5BNWS,GVXY,E6BWlBwF,AnBAE,CmBAa8I,AnBAb,EXGH,EACP,K8BJQ9I,ExBOFR,CqC1BN,CPSA,AORwB/D,CPSAA,A9BgBgB,CwBPF,CAArC,IxBO6C9C,CqC1B9C,CPSA,AzBUwC6H,KAAAA,CAAMrE,OAApC,CAAN,OLOoC,GAAqB,IAArB,GAA4B3D,6BAA5B,GAAiD,GAAzF,EACA;A+B/BoD,AE8BjD,AD9BH,AL0BA,AHFC,AlBCA,APGC,AMJE,AkBFFgI,AvBUF,AiBTA,AhBHgB,ACKf,APbyB,AFZsd,EsCA5b,CrBHpD,CiB6BMqJ,AJJJrJ,CUGD,CAOG,ENNEqJ,AzBDL,CIAO/H,AiBHNtB,C9BtBmf,CkC0Bxe,AlC1Bye,C8BsB5e,EAARA,C9BtBmf,CSyBpf,ATzB0D,CsCAP,CAAA,A7ByBnD,I6BzBmD,EAAA,AzByB5CsB,CAAgBE,GyBzB4B,CAAA,YzByB5CF,EAAP,+ZqBCD;AMOE,ADhCF,AL0BO,ArBDN,APGC,A+BdD,ApBjBD,ANuCC,AmBdC,AvBUF,AiBTA,AhBHC,ACIA,AmClBA,A5CP2f,IkC2B/egI,EvBUR,AiC9BEyK,CVoBMzK,AvBUP1Q,E0BtBE8T,CHYKpD,AzBFZ,ATzBggB,CAAC,CQqBvf,ACIV,CmClBMyK,EpCHP,ARJigB,CkC2B1e1K,AzBFtB,AmClBgB,A5CP0C,IkC2B9CC,AUpBQ6J,GVoBR,EzBFZ,CyBEM,AzBFN,MAAA,EEYqBjT,AFZrB,amClBgB,CjC8BXtH,AiC9BkCC,EjC8BFoC,E0BtBVpC,AORX,EAA6BoH,EPQtCyM,EAA0BzM,A1BsBIhF,CAASmF,EiC9B9B,EAAsCnF,EPQ/CyR,EAAmCzR,IOR1B,CAAhB,GPQOyR,CAAP,I1BsBqCzR,EAAhCrC,CAAL,EACA;A2BrCG,ACCJ,ARwBO,AzBIL,A+BdD,ApBjBD,ANwCE,ACdCqC,ALSH,AiBTA,AhBJgB,ACIf,AafA,AsBDA,A1CGyB,AFZ8e,MYyBrgBA,AHAF,AafI,CgBTI2R,CpCWGtT,C6BcIiP,AzBIT,AsCrBN,CNRG,A7BwBH,ATzB4gB,CAAC,EsCC/fqE,A7BwBd,CGAE3R,CAASU,AVbc,AFZmf,CsCCzgB,AtCDuD,C+B0BpD,CAAkB6D,AzBIvB,AJlBwB,IUavBvE,AHAF,APbyB,CUaN+E,AHAnB,CsBCM,AajBN,CnCgBA,AmChBA,CbiBgCsI,CtBDhC,AmChBA,ChCgBmBtI,AHAnB,CGAyBrE,AgCfvBqQ,MbgBI,AahBJA,ChCeA/Q,AgCfOgR,CbiBV,OalBC,EAAA,YACqB;ANRlB,AJ2BG,AHDN,AlBAM,APGJ5N,AW/BH,ANwCE,ACnBA,AkBID,ANCc,AhBJd,ACGA,AadC,AsBAC,A5CXihB,GWephB,C4BZqBoP,AL0BRlE,AvBaZ,CCrBC,AHID,CHMElL,CgC7BMwB,AJ2BI0J,EHDL/J,AlBAQiC,AiBHRqG,ANCgBvB,CUGL,AlC7BsgB,CY0BhhB,AHDR,AadQD,AsBAC,A5CXghB,CsCEthB,A9BoBO,G8BpBMzG,AP0BTL,AvBxBR,ARJyhB,C+B4B1gBjG,A/B5B4C,IsCEvD,AdwBW,GOEPiG,AlBAD,AWDP,COCuB8I,AlBAQ5J,MAAxB,EAAgC/C,CkBA/B6D,AzBGLnB,EyBH+BmB,CzBGD,GOH1B,EkBA2BA,AlBAcvE,CkBAP0B,CzBGD0B,AgBpBdxF,IQcMmH,ARdvBsG,CSiByB9G,ClBA3B,ASjByBS,ESiBkBqI,AlBClD,CiBJQR,EAA+BnM,ERd9B2K,EAAgCrL,ESiBSqN,CAAU3L,ADHpDmL,EAAwCxM,GRdvCgL,CSiBD9G,ATjBN,GhBoBCnB,EwBNKyJ,CCGgEtI,CDHbvE,KCGauE,CAAO7C,EDHvEmL,CAAP,GCGuEtI,GAAgB8I,SAAAA,CAAU3L,MAAjG,g/HGCM;AI1BH,AE+BA,AD9BH,ARyBA,AlBCA,APJA,AMCE,AkBDF,AvBSD,AiBRA,AhBLgB,ACGf,AafA,AsBEMmP,A1CCL,AFb8hB,GsBU/hB,CfyBK7M,AevBH,ETkBE,AWHL,AfFC,AmCbM6M,CNTEA,AzB2BHnQ,CJLL,APZKzC,CAAAA,CUcC,AgCfA4S,A1CCCvS,AFb6hB,CsCGjiB,AE+BO,AD9BV,A3BuBOyG,AHFP,AabSoH,AtBZ4hB,C4CYzhB,ENTG0E,AzB2Bf,C2BIG,AxClCiiB,Ca8BthB,ADHP9L,AUfL,AtBZwD,CY2B7ChE,AVdR9C,CoCVF,AhBSa,ApBCDI,EOYf,CAAA,AmCbY,CLRZ,AhC+BK2F,CgC/BO8N,EhCgCZ,AiBTD,AfFC,AmCbY,A1CCP7T,EqCTL,A9BqBA,CeGoCsN,AoBhBlB,CLRA,ArCSQ,CAAzB,CKuBK7N,CLvBuB,GUc3B,EAA+B,eLSjC,GAAmB,QAAnB,GACA,IiBTuD8N,CjBQvD,GAEC,GAFD,EiBRoCD,CjBU7B9N,AiBXR,4BjBSC,GAE2B,IAF3B,GAGC,GAHD,GAGOP,uBAHP,GAGsB,GAHtB,GAIA,OAJA,GAKA,GALA,GAMCO,4BAND,GAOCP,uBAPD,GAQA,IATD,EAWA;A+B1CI,AEMJ,ADNmB,AL0BnB,ArBCE,ADHE,ALmBJ,AiBpBA,AhBJC,ACEA,AaZC,AsBAM,A1CCLiB,AFdyiB,GwCU5iB,CDNmB,AL0BboQ,EAAAA,AVFG3Q,AtBdNO,CoCVMyT,EJ0BHrD,CVHN,AfFC,ATzBgjB,CsCI7iB,AtCJ8iB,CQuBviB,ACEV,AmCZWuK,A1CCT3a,CsBaH,AfFC,APXSI,CoCVMqT,A1BwBN,CsBEKtD,A1B1Bf,ARJijB,ESyBhjB,APXEnQ,AFdojB,CsCInjB,AJ0BEoQ,AtBFQxP,AVdCV,CqCVI,A9BqBlB,AmCZWya,CLTO,AKSClI,CViBd,AlC9B2iB,EY4BviB,AZ5BkjB,CuCIziB,AL0BnB,AtBFoB,CVdjBzS,CqCVgB,CKSP2a,A5CbqiB,CAAtf,C4CanD,EAAuB,CpBc/B,CACSlb,IexBU,AfuBnB,CevBmB,sB3BwBT,CAAN;AsBGJ,ArBCE,APED,AW1BD,ANmCC,ACdG,AYFJ,AhBJgB,ACEf,AaXC,AsBAI,A1CCH,AFf+jB,Ga6BlkB,CqBEM4Q,ArBGL,AI1BKxH,ENmCD5B,AafUJ,AfHd,EaXKmH,ChBoBEnJ,CGTP,ATzBskB,CAAC,EkC+BlkBwL,AVJN,AfFC,AaXKrC,EbWL,ATzBskB,CkC+BrjB,AvBYb/G,AahBL,AfFC,ATzB0D,CW2C3CH,AiC7BH,C3BNP+B,EiBuBgBlJ,CjBtBtB,ARgBC,IaXsBW,CYiBL,CAAW8P,C5BGrBvL,C4BHU,CAAlB,C5BIEC,AKQGmC,EAA2B,EahBhC,CACeJ,OADf,CFbE,CX6BGI,CW7B8B,CX6BWpF,AW5B3C,KhBmBKgD,GACkB,AKQrBoC,CAAJ,ELTOpC,AKUP,GLRC,cAFMA,GAGN,iEAHMA,GAIN;AkCDD,ADhCC,AJwCF,ADZA,A5BME,AW7BDiE,ANmCC,AJGF,AiBrBA,AhBHC,ACCA,AaXC,AHjBF,AyBkBOgK,A1CCL,AFhB4kB,EiBU7kBhK,EkBmCK+I,ADZAvB,A3BeAxK,CelCJ,CEcsBjE,EUKlByO,CK5BCwD,CvCL4kB,CkCiCtkB,AZjBJ,AtBhB2kB,CQwBzkB,AoCTJhB,CT8BDjB,CIxCJ,AfsBF,ChBvBA,ARJmlB,CmC6CjkB,AS9BXiB,A5CfoD,CuCK5C,AtBKdhK,AOiBD,CoBZa,C3BLK,EsBLC4K,EjC6BX7O,AsCpBK,GtC0BX,EW9BgB,CXwBVA,CCcFiB,EDREb,CCQ2B,GiBrBnC,CjBqBuCtF,AiBpBfkC,CevBT,CAAa8R,IAAb,AtBKG,AVsCiB,CgC3CjC,AtBKiB5K,CVwClB,AiBvBD,KWkBA,S7BXQlE,AWxBU,EAAkBmE,CX8BE,QW9BpB,EAA6BnH,QAA7B,EAAA,aXwBVgD,GAON,4BAPMA,GAQNC,S4BTF,Y5BCQD,GAQkB,KARlBA,GASN,SATMA,GASM9F,uBATN8F,GASqB,UAT5B;AiC5BC,AL4BF,A5BUC,AWlCiB,ANoChB,AChBChD,ALqBF,AC3Be,AcPb,AHnBH,AyBkBO4E,A7BcQ,Af9B2kB,IsCQrkBiN,AJ0BfnD,EtBJH1O,ALsBD+D,C2BlBI2K,EnBJkB5H,CmBIlB4H,AlClCylB,CiBU7kB,AjBV8kB,CsBiBvlBvC,AsBDFvH,EhCcJ5E,CAAS8F,AZ9BmlB,CkCkC/kB2I,AjBxB+CvH,AjBVJ,CsBiBxD,AsBDItC,EAAOkU,CVkBRpK,EnBJS,CmBIT,AnBJgC3J,GmBItC,AUlBc+T,CAAQjI,C7BcP,EACf,CErBkB,A2BMJiI,G3BNmE9Y,GVyChF,GAEA,EU3CgFA,CAAS6C,AVyCzF,GUzCgF7C,AV4ChF,EU5CiB,ALoBfA,CAA2C+E,ALqB7C,EUzCiGoC,CV6CjG,EKzB6CpC,CAAMhE,KKpBlC,aLoBff;A0BrBD,AHsCa,ADZf,ArBCC,APUD,AWpCkB,ANqChB,AChBC,ALyBF,AFzDD,AmB8BC,AhBJA,ACAA,AaPE,AHnBH,AyBea,A1CIZ,AaaD,Af/BsmB,GiBStmB,AV0CC,C2BhBK2O,AjBtBN,EJuBOtI,ANqBLrC,AQ3B2CgB,ENNjCX,C0BuBY4L,AXlBhB5D,AtBXAlO,CFlBmmB,C4CcrmB,A5CdsmB,CQyBjmB,COMX,CmBIMwQ,C1B/BN,ANcQxQ,AFlBmmB,CEkB5lBK,Aaaf,Af/B2D,CkCmCxC,AzBVlB,GAAA,APPOL,CgCiBeL,ArBChBuI,AXlBa,GWkBK,ANexB,AE1BA,C0BsBc,ApBhBf,CoBgByCoH,ApBhBzC,CmBImB,A3BuBjB,C2BvB4BiB,ArBCD3O,EWPRnC,CUMF,AhCjBEK,CgCiBrB,AhCjBoB,AaapB,ESFQoO,AtBXgBnO,CiC6BT,AjC7BK,AaapB,CSF2B8G,ATE3B,CoBgBoD8I,AjC7BhC,GaapB,GoBgBe,AXlBPzB,EWkBoDzO,AtBXnC,AWPWoC,CXOEA,GsBWvB,ApBhBf,CAAA,CoBgBkEkQ,ApBhBlE,CAAA,CSFQ7D,CXOiB,AWPxB,CXOA,EELD,EoBgBe,EACf,KpBjBA,GAAA,SAAA,CAAA,CAAA,CAAA,GADuD,EACvD;AuBrBE,AHuCD,ADZD,ArBAChG,AIvBD,ANkCE,AChBA,AL2BA,AF3DF,AmB8BC,AhBLe,ACCd7B,AaPA,AHnBF,AyBkBM,A1CAc,AaapB,Af/BknB,EaqCjnB6B,EqBAKuI,AzBXJpK,CFyBD,CQrB0DxE,EmBOrD4O,A3BsBIvL,EEjCRmB,AT1BqnB,CsCUrnB,AJ2BW,AhCnBiBvG,AFlB0lB,CEkB1lBA,EOQlB0G,AMKZ,CbbkCzG,AFlBqlB,CEkBnmB,AFlBuC,CaqC1DmI,AEND,CFMiB3F,CyB3Bf,GAAwB,GzB2BzB2F,CAAwB3F,AENzB,CAAA,CAAA,CAAA,IFMC2F,MJXW1B,CAA0BN,IFyBrC,GAQqC,EEjC1BM,EFyBX,AEzBgDH,GFkChD,GAZkC,AEtBvBG,CAAAA,CFoCZ,GAdmC,AEtByB,CFsB5D,CEtBEH,CFsCF,g3D2B3BA;AI3B0B,AHwCzB,ADZD,ArBCC,AIxBD,ANkCE,AJgBF,AFhEA,AGyBC,ACCC,AaPD,AHID,AjBNQ,AacPxE,AfhC6nB,EegC7nBA,CbdO7B,CgCoBF0Q,A7BrCAjP,AHiBL,CATiC,CW8B3B6G,ARtCD7G,AHmBL,CgCkBKiP,CI5BQ/B,A3BuCR9M,CNhDK,C6BqCL6O,AnBNL7O,AfhCkoB,CAAC,CQ0BznB,C8BhBe,AvBsBd,EP5BZ,ARJmoB,CsCUzmB,AJ4BV4O,AvBWV5O,AXjDqD,CWiD5C2B,ANhDf,AU+BgB5B,EV7BhB,C6BmCM8O,CvBWA7O,CEVCyG,AFUa,CuBXd,EI5BoB,AzB6BA,CyB7BA,AJ4B1B,GrBC8B3I,CFUxBkC,E2BvCoB,EvBsBd,CuBtBc,AzB6BA,AFUOA,AIjBRA,CuBtBC,AzB6BWqG,IyB7BX,G3BuCOrG,AIjBrB,CJiB8B2B,AIjBzC3B,CADD,CAGC,EJegCA,C2BvCP,A3BuCqB,C2BvCrB,CAAA,AzB6BWqG,CyB7BX,AzB6B2BC,KyB7B3B,A3BuCOtG,EAAwBqF,EEVpBgB,EAAX,CAAzB,EyB7ByB,A3BuCOrG,G2BvCP,I3BuC6C,EAArE,EACA,C2BxCwB,CAAA,CAAA,CAAA,GAAJ,EAAI;AHyCzB,ADZD,AjBvBA,ANmCG,ACjBF,ALgCD,ACxCgB,AWDhB,AyBNK,A1CEJ,AacA,AfnCyoB,IkCuCpoB8O,ECYD,AvBjBA,CuBiBCiB,AvBjBA/P,GZlCyoB,CAAC,EWmDtoB,CuBZJ8O,CtBLA9O,AgCfM,A5CnBmoB,CYkChoBwC,AZlC4C,CkCuCxC,IAAI1E,MAAJ,CAAW+Q,GCYxBkB,ADZa,AtBLb/P,CuBiByBjC,ADZ/B,CtBLC,EDiBE,ACjB+B,CuBiB5BgS,CAA8BtC,GI3CfpI,MJ2Cf0K,CAAD,EI3CyB,EJ2CoBC,SAAAA,CAAUjS,IAAViS,CAAevC,SAAfuC,CAAjD,EAA4E;AGzCnD,ACDxB,AJ2CA,ADXF,ArBAC,AIxBD,ANmCG,ACjBD,ALgCF,AF/DA,AGuBC,ACEA,AUHD,AyBNMiB,A1CEL,AFtBqpB,IsCU5nB,AJ+BpBlC,A7BrCAlP,AcsBAkJ,CRkBL,CEHItF,AFaH,ANlDI5D,GAAK,AIyBH2E,C8BpBFiO,A3B0BE,AgCfFxB,A5CpBqpB,CAAC,CayCvpBxN,ALdM,CKcCE,CDNA5E,AgCfNkS,CpChBN,ACyBC,AT7B0pB,CuCSrpBwB,AlCLN,AuCgBY,A5CpB+C,EkCyCrD1D,CI/BoB,ACDX,A1BgCVtL,ADNG,C0BzBkB,AzB+BPgD,ADND,CsBMK,GI/BG,ACDNwL,EDCM,CnBgBpBlJ,EoBjBS,CAAW2J,ALgC1B,AffgC,GoBjBjB,ApBiBf,CmBhB0B,ACDIrN,CDCJ,AnBkB1B,CNaK5B,EDNG,CAAN,E2B1Ba,CAAb,A1BgCuC,CAAxC,EAA2C;AsBY1C,ADXF,ArBAE,AC3CF,AGmBA,ANqCE,ACnBA,ALgCF,AF9DA,AGqBgB,ACGf,AmCXW,A1CIX,AaaA,AfpCiqB,GmCgDlqB,CAOC,ADbKuL,A7BpCAlP,EU8BD,CAACiF,E6BjBD,C5CnBkqB,CAAC,CeoClqBA,CAAMrE,EfpC2pB,CAA5mB,IeoC1D,EV9BKZ,AU+BL,GmBKKkP,A7BpCqB,G6BoCG,K7BpC9B,M6BoCA;AI/BI,ACDF,AJ8CD,ADbD,ArBAE,AIxBF,ANqCE,AJaF,ACzCC,ACID,AUHA,AyBPQ,A1CEP,AacC,AftC4qB,Ga6B9qB,CqBcMC,ArBEL,AMhBKjG,KmBlBG8I,CCDH,AvCV6qB,CuCU5qBW,AxB4BE,AftC2qB,CQ4BzqB,C8BjBP,E9BPJ,ARJmrB,CsCWnqB,AvB2Bd,AftCyD,CsCWvD,ACDF,EAAa,ILiCTxD,GAAsB,IfdtBjG,GAA6B,IAAIlL,IecvC,EfdmC,CAAW,MAAMJ,qBAAN,GAAmBR,uBAAnB,GAAkC,GAA7C,CAAnC,EAEA;AmBnBI,ACDDuV,ALiCH,ApB3CA,AGmBA,ALkBC,ALgCD,AC1CgB,AoCjBN,A1CcT,AacC,AfvCwrB,E6CH1rB,EX+CMvD,A7BpCenP,CuCGlB,GLAA0S,CDCM3F,A1B0BD/G,CZtCurB,CAAC,GsCY5rB,ACDD0M,CvCX4rB,CAApoB,CsCY1C3F,ACDL,IAAIhP,CDCZ,KCDQ,A3B2BJiI,C2B3Be,A3B2BIhB,IsBMrBmK,CtBNqBnK,C2B3BEM,A3B2BIH,CsBMI,ItBNVH,E2B3Bf,CAAT0N,C3B2BuC1N,KAAAA,CAAME,CsBMhD,atBNQc,EAAwD1F,SAAxD0F,EAAmE/F,QAAnE+F,CAAP;A0BzBG,ACDD,ALiCH,AW/CA,A5BuBA,ALkBC,AP7BA,AGmBA,AWGD,AyBvBC,A1CiBA,AF1BqsB,G4CSrsB,CVoCKoJ,AfbAlG,AyBvBL,KNIQ8I,CtCbksB,CKU1sB,ALV2sB,CQ6BjsB,C8BhBP,ACDIE,E/BRR,ARJ2sB,CsCa3rB,AtCb2C,EuCYxD,CAAWI,AlCFb,CiCGG,AjCHSrS,EkCEV,CAAeqF,ALiCZ8J,GAAsB,E7BnC3B,EkCEE,AlCDF,EkCC0BsD,EpBoBrBxJ,GAAiC,CoBpBpC,GLiCH,Afb2CnL,MAAJ,CAAW,OAAOZ,uBAAP,GAAsB,KAAjC,CAAvC,EAEA;AmBpBI,ACDD,AJ4CF,ADXD,AW/CA,AhC+CCuG,AIxBD,ANmCE,AJca,AF5Dd,AGkBe,AWMhB,AyBTC,A1CCA,AacA,AfzCitB,Ea8CjtBA,EqBAK2L,A7BnCL,E8B8CIc,ApBhBA,CAAClQ,CFKLyD,AFWK,C2B3CGuO,A3B2CFhS,AJciBkE,CPvE+rB,Ca8C7sBT,Ab9C8sB,EsCcptB,CH2CCyM,CpBhBClQ,AfzCitB,CsCcvsB,AvB2BDa,AfzC4C,Ca8CjD4C,AFWHzD,CEXU5B,AFWDuD,CwBAE,A9B9CjB,CiCGG,AjCHH,EM8CM3B,CEXGyD,AFWW,CEXEA,ARnCtB,EAAA,AU8BKzD,CAAoB+E,CR8BX,C4Bdd,A5Bc2CtB,CMzBrBA,CsBYtB,AtBZ6BK,AFWvB9D,CAAL,AIhBwB+E,CAAMrE,CmBK1B0O,AvBYJ,AN/CD,CE4Dc,AF5Dd,CQmCsB3L,CqBAgB,ArBAHgD,AN0BpC,GQ/BMzG,CAAL,EACA,SmBID,CrBAuByD,EAA+B,CAA/BA,EAAkC/B,MAA/C+B,CAATA,CAjBD,CAmBC;AyBjCG,AEkCHsP,ALUC,ADXF,AWhDA,AhCiDC,AI1BD,ANoCG,AClBI,ALgCN,AC3CA,AWMD,AJOE,Af3C4tB,EwCiD7tBA,ENDK1D,KIjCG4C,A1B0BOlM,ALgCRtC,CQ9BA,Af3C2tB,CAAC,CQ8BztB,CG6BD,C2B5CN,AvB4BQ1E,CR8BJ0E,ACrER,ARJmuB,COyEptB/B,APzE4C,CsCe1C,AELjB,EFKI,AELJ,AzBiCQ,CAAA,CmBKF2N,C3ByBE5L,E2BzBkB,E3ByBD1G,CKhClB,C4B/BP,ANsC8Be,AtBPKkI,MsBOT,CAEzB,AvBSE,MuBRF+I,CnBRqChK,CyBjCtC,A5B+BO,C4BQUtB,C5BRmCwC,EGEdlB,CAAMrE,EyBjC5C,EAuCyB+M,GNCxB,A3BuBOhK,AQ9BA,CAAN,EmBSDuL,C3BsBC/K,EiChEF,A5B+BO,E4BQ6BjE,A5BRkCA,Q4B/BtE,A5B+BO,E4BQuCgT,A5BP9C,MsBQC,GAGA/D,EM3CD,CjCgEEhL,CiCxBD,AjCwB4BlG,IAA3BkG,CAAgCR,MAAhCQ,CADD,G2BvBA,GAIAiL,4BAJA,GAKAC,mBALA,GAMAC,8BANA,GAOA,GATyB,CAA1B;AIhCG,AEmCD,ADrCA,AJ8CA,ADAF,AW3DA,A/BIO,AGmBP,ANoCG,ACjBF,ALgCA,AF/DCnP,AGkBc,AWOhB,AJOE,Af5CwuB,IsCkBxuB,AjCNAA,CMgCD,CAkBC,E6BXMgT,C1B9CQtM,CFsCPpB,AZ3CsuB,CAAC,EuCcvuBkN,EvCdsuB,CAAprB,GuCczD,ClCFAxS,CSPK,ATOYD,CSPUpC,C0B8CrBqV,GAAkBxF,A1B9CnB,EACP,CTMExN,CAAAA,KmCuCwBwN,CAAUqF,QAAVrF,EAAxB,U5BRgCzH,eAAzBT,EAA0ClF,SAA1CkF,EAAqDvF,QAArDuF,CAAR;A0BxBC,ACJA,AJ8CA,AU3DF,AhCgDC,AC3CA,AWPc,ARyBf,ANsCE,AClBA,AP/BA,AGiBD,AWOD,AnBtCsvB,MakD/uBmB,AC3CFjD,GWPmB2D,Ab6CjB,AP/BApH,CLdovB,CAAC,CcOvvByD,ANwBM,GMxBNA,ANHL,ARJ2vB,CAAhsB,CKczD,EQoCKiD,CC3CFjD,ATOazD,CSPjB,AWPc,CZkDQyD,ADLrB,Ea5CF,IZiDuBA,ARpCrB,CQoC4BK,KAAPL,CAAayC,uBAAbzC,CAAtB;A2BGC,ALSA,AU3DF,AhCgDC,AC3CA,AWPD,Ab6CG,AP9BD,AGec,AWQhB,AJOCzD,Af9CiwB,Ee8CjwBA,IDtCI6C,AWPL,EeoDM,ALSAiL,CKTChH,A1B7CFjE,ATQE3C,CU8BNF,CV9BC,AU8BQU,Af9C8vB,CcQnwBmC,AdRowB,CY8C/vB,CuBgBJiL,A9B9CM,CAAC9N,CLhB2vB,CmC8DzvB,ArBtDV6C,AFsCF,AZ9CwD,CmC8DrDiL,ArBtDL,ACsCA9N,CDxCD,ACwCkB+E,CDpCjB,EqBoDmB,CAAC8K,A9B9CR7P,CAASG,AU8BJ4E,CU7ClB,AV6CwBrE,GUrCrB6K,GpBOD,CU8BDvL,CyBOoByD,CzBtBrB,CAiBC,IyBKMqD,EAAsBzG,ALSRwP,CAAmB9R,IAAnB8R,AVrDlBtE,CUqD0CkC,AVrDvBjC,Ge4Cf1E,EAAiC9G,ILSnB6P,AVrDlBtE,CUqDD,AV7DF,EU8DE,CKVKzE,CAAD,IACA,CAAC+L,uBAAAA,CAAwBpP,MAAxBoP,EAAgCI,eAAhCJ,EAAiD7S,QAAjD6S,CADD,IAEAK,wCAAAA,CAAyCzP,MAAzCyP,EAAiDD,eAAjDC,CAFA,IAGA,CAACC,iCAAAA,CAAkC1P,MAAlC0P,EAA0CnT,QAA1CmT,CAHL,EAIA;AACC,ALMA,AU5DH,ApBHA,ARQA,ANuDE,ACjBA,AP9BA,AGeD,AWQD,AJSC,AfjD8wB,CiBQ/wB,GCJqBxK,EOAnB5D,GpBaK3E,C8B+CE+P,CV/DT,ApBgBE,ALjBmxB,CQgC1wB,ARhC2wB,CwC0D5wB,CfzDV,ApBgBYnQ,CGbZ,CRJqxB,EwC0DlxB,AxC1DwxB,ImCgElxBmQ,A9B/CGnQ,ALjBywB,CKiBhwBG,ALjBsC,EmCgEnCvC,IAAAA,CAAKkQ,A9B/CjB9N,GoBhBZ,CAGE+E,CpBa+B1E,C8B+CJyN,GAAS,AV/DtC,CU+DwBlQ,CAArB,CADD,CAEC,C9BhDSoC,IAAkCM,4BAAQN,QAAAA,CAASG,OAAjBG,EAA0BT,EAA1BS,MAAkC,CAAC,CAA/E;AmC0CC,AKtDH,AhC+CC,AK/CA,AJMA1C,AWVD,ACAA,Ad+CE,AP9BA,AGcc,AWShB,AnBzCiyB,EcWhyBA,AsBdD,IvBuDK8I,ACzCJ9I,AWNCsE,GXMMtE,ATOD2C,EabN,AbaC,ALlBqyB,CyBCvyB,AzBDwyB,CcWhyB3C,CAAK2E,ATODvC,CoBjBZ,CzBDuyB,CAA5uB,EaoDtD0G,ECzCG9I,CINP,AJMoB,ATOToC,CQkCU0G,AK/CT3F,AbaQZ,MSPbvC,CTOIoC,CSPkB,GWV9B,CAIEkC,ApBa+B7B,CQkCXqG,CAAc,ACzC5B9I,CDyCc8I,ACzCrB9I,CDyCqB8I,EK/CrB,AOJD,EZmD0C,AK/CTzB,Cba/B,CAPD,CAO0C,CQkCtCyB,IAA6CA,MK/CjD,EAAgD1G,KL+CC0G,CAAc,CAAdA,CAAAA,AK/CjD,CL+CkEhF,CK/CR,KL+CTgF,GAA0B,CAA3E,EACA;AsBaE,AtBZD,AKjDyD,AkBP3D,AXGA,ARyBe,ASxBA,ArBiBb,AGcD,ACOM,AUEP,AJQC,AflD6yB,IkBKnvB,EOCzD1B,AV4CGhF,EFIC0G,CI5BkBU,ASxBAtC,AjBsCRH,C0B0BT6K,CnClE6yB,CQiCzyB,ARjC0yB,CyBCrzB,CViDKxP,CP9CL,AO8Cc4B,CUjDd,AzBDozB,CAAzvB,EkBKA,CAAA,CLiDrD8E,AI5BS,CJ4BK,AI5BiB3B,ASxBtB,CboDT2B,AEJD1G,CFIC0G,AKjDqD,CQF3D,AX+CC,CG7C0D,CDqB5C,AFyBd,EFG0B,AI5BiBxE,GJ4B1C,EACA,AJfK,CgBvCP,ARyBe,ARc2BmC,CgBlCxCW,CPDyD,ADqBPA,CCrBO,KOJ3D,CRyBe,ARcR,EQdsDhF,ARcR4E,C0B0BnBuL,I1B1B3B,EACP,CQfe,EACf,GkBuCOX,KAA4CF,wBAAca,YAAdb,CAAhD,EAA6E;AKL9E,ALME,ADFG,ArBTJ,AC3CF,ARgDM,AmB5DP,AR2BC,ASzBD,Af8DE,AChBA,AJhBc,ACSf,AUCD,AJSE,AfpDyzB,IM6D9yBjM,EmBtDXrD,ACJF,CZUC,CHoDKoF,CuBAUkK,EMJP8D,A1BhDR,ACuCQtO,AfpDwzB,CAAC,EyBCl0B,CUkEW,CnCnEszB,CyBCj0B,AzBD2D,CWiErDM,CAAWH,CwBEb,ArBtDH,EoBoDM,CAAuBsK,ApBpDV3R,CwBOd+T,CZjBN,EZUoB/T,CAAKyB,AYTakM,CYgB3B3G,AJ6CJ,A5BJMvB,E4BKb,C5BLyCH,CQhDrBtF,AHoDdwH,CGpDyB,CHoDE,C2B7ChB,AbnBjB,Ce4DSgO,A1BhDWxV,AWNlBoC,CewDCyD,A1BlDF,EAAA,ACuCsBsB,GJajBK,C6BJGgO,Cf5DT,AdgE2CpT,AIblC8E,CyBYN2I,Ad5DmClC,CAAmBC,AXgD3BxG,CDvC7B,GAAA,EHoDKI,CAAJ,AIbON,CyBSAsO,C1BhDR,ARgDwClQ,AoBzDHqI,Af8DpC,AIdqCvL,CyBapCA,A1BpDF,ARgDiE,AoB1DlE,OZUC,ACuCsCA,CyBS9BoT,A1BhDR,ACuC+CpT,CTSPkD,CkCKtCmQ,AlCLI,MSTEvO,CDvCR,CAAA,EAAA,EAAA,ACuC6DzE,GDvC7D,CAAA,EAAA,GCuCC,MDvCD,C0BgDQ+S,EAMNJ,A1BtDF,QAAA,G0BgDQI,A1BhDR,C0BgDC,Q1BhDD,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA;AwBOG,AEXJ,AL0DI,ADDH,AW/BD,AhCqBG,AKnDD,AJQD,AGeA,AS1BD,AfgEG,ACjBA,AJhBF,ACSA,AUCD,AJSE,AfrDs0B,GwCUx0B,AzBqBA,CAwBC,EE1BIpO,ASzBID,AjBuCJV,ESrCC,AJQL,CIRMtD,EoBeEmR,AZlBT,A1BH80B,Ccc70B,ANoBU,ARlCo0B,CiB6B90B,ANsCS,ACjBA,Cc/CV,CaAqBM,AtB0BP,ATzBd,ACuCKnO,CT3Cy0B,CAAnxB,CYkDxD,EHPgB,E6BtBf,C7BsBH,EACA,EStCC,EAAyB,IQH3B,CACSU,Cf+DN,IehEH;ASkEG,ADDF,AW/BD,AhCqBE,AKnDC,AZwDI,A8BhDP,AXJC,ARmBCC,AS3BF,AfiEG,ACzBF,AJTe,ACWd,AUAF,AJWC,AfxDo1B,IM+Dx0B1B,AWjCX0B,EiBsCG,ARhEWA,CQgEVwJ,ETzDElC,ERmBNtH,AjB9By1B,CkBOl1B,AlBPm1B,C0BG51B,CT2BEA,EiBsCIwJ,AhB7DO5F,AQJb,A1BH21B,CkCoE30B7K,AlCpE2C,IkCoErDyQ,CAAee,AjBtCnBvK,CAAAA,ECvBO,ADuBPA,CCvBqB,CDuBNgC,CiBsCXwH,CAAD,C5BLQlL,CmBpDSyB,ESyDU,A5BLU7B,C4BKT4L,CRjEjC,CDQQxC,ACPQtH,EDOa9C,GRmB3B8C,EAAkCA,AS3BpC,CQiEiC8J,ATzDzBxC,CSyDoCvO,CTzDPiH,GSyDJ8J,CAAgBS,AjBtC/CvK,CAAAA,EQnBMsH,EAAsCtM,CSyDb8O,CAAhC,A5BLyC5L,CAAyB,C4BKT,AhB7DjD,CAAN,GOIKoJ,CAAP,InBoDyCpJ,CAAnC,EAEP;AgC1CI,AEgDH,ANFC,AW/BF,A3B9BG,AJMF,ARoDD,A8BlDA,AXJC,ARiBA,AS1BD,AdiDC,AJjBA,ACWC,AUAF,AnB9Ck2B,EyBcl2B,CReC,C4BSKgW,ATtBAlV,EVZmBhE,EZUxB,CGiBO,CqBRD,CAAC,AJ8CC,AlCrE+1B,CQmC71B,ARnC81B,E0BGz2B,CmBmCMkZ,ArClCN,C8BmBanH,AJ8CX,ApBvDD,Addu2B,C0BGx2B,A1BH2D,C6CsCvC,A/BxBnB,EwBSG,COeJ,CPfkB,AFPZ/N,CSuBN,ETtBC,MAAMtG,I/BKN,CqBnBD,CACyBsC,QADzB,OUcC,GAAmB,QAAnB,GACA,KADA,GAEC,GAFD,GAEOvC,4BAFP,GAE2B,IAF3B,GAGC,GAHD,GAGOP,uBAHP,GAGsB,GAHtB,GAIA,OAJA,GAKA,GALA,GAMCO,4BAND,GAOCP,uBAPD,GAQA,IATD;AEQM,AH+CJ,ADDA,ArBVD,AC9CA,AsBaD,AnBKE8H,ANsCA,AN/CA,AGYc,ACYd,AUAF,AnB/C+2B,IoC2Bz2BsL,AnBKJtL,IkBuCMoL,A1BxBFxL,CIaEnB,CC9CP,CGkBCuB,ANsCO,AXtE42B,Cccp3B,Addq3B,CsCwB32B+M,AjCDF9S,AIwBP,CQfU+H,CJ4BX,AJbY,CKjCZ,Addo3B,CsCwB/2B,AtCxBqD,EKuBlD/H,CiCCS,AjCDFuB,C8BgDR4P,ExBDN,CwBCsBtC,A9BhDf7O,CiCCc+S,AxBVtB,ATSoB,CSTpB,EGkBChN,CqBRgB,CH+CM8I,A9BhDE9N,EiCCI,AxBV7B,CqByDgCyN,CrBzDhC,EwBUiCiE,EjCDb,C+BIfpB,A/BJ6B7P,CiCCL,CAASkR,CH+CNlE,AC5CW,CD4CD/L,CG/Cb,EAAckD,AFGI9G,E/BJvCmB,C8BgDP,A9BhDA,EiCC4B,CAAxB,AFGsC,CAAW,OAAO3B,qBAAP,GAAoB,IAA/B,CAA5C;AEJI,AOiBJ,AhCqBC,AKpDC,AJKD,AsBcD,AnBKE,AS5BD,AfkEC,AN/CA,AGYD,ACYE,AUAH,AJSC,AfzD23B,I6CwCt3B6b,ATZA5I,EtBdL,AC2CMvK,CuBlCH,CpBdE,CAACf,AQJCuH,CZSP,Cddi4B,CQoCv3B,ARpCw3B,CsCyB13B,AxBXR,ENVD,CRJk4B,CAAv0B,IeyDpDxG,CD3CN,CILC,AJKD,CC2CwBhB,CGhDF,AJKtB,EAAA,CAAA,GC2CwBA,CAAQ5E,EqB7B3BmQ,ArB6BmBvL,GqB7Bc,ArB6BDD,CWpDfA,EmBmCjBoU,CTZqCrb,CrB6BLiH,C8BjBO,AnBnCrCyH,AXoDoCvH,E8BjB5C,AnBnC8BD,EmBoC9B,ATbuC,CAAW,IVvB1CwH,EUuBgD/O,AVvBjBuC,GXoDdgF,GAAoCD,EWpDrDyH,CAAP,EXoD4DzH,CAAMG,KAAlE,WqB7BiD,GAA0B,KAArC,CAAvC,EAEA;AEJM,AH8CJ,ADAD,AW9BD,A3BhCG,AJIF,ARqDD,A8BpCA,AXhBA,ACTC,AlB8Be,ACab,AUAH,AJSC,Af1Dw4B,E0BQz4B,EpB2DM3B,CQrDL,GqB0DK6M,CDAEf,ATzDC9D,AV2CD5N,ED5CP,Add84B,CsC0Bn4BwU,ApBhBH,AlBVu4B,IsC0Bp4BA,ApBhBCvJ,AZyDPrF,ANnEy4B,CAAp1B,EsC0BxC,AhCyCE,E6BKf6M,EG9CiBsB,AhCyCE5T,C6BKHF,CjB9Db,CgB8DDyR,AhB9De,CoBgBJ,AJ8COtR,ATzD1B,CaW4B4T,AH8CN/T,AVzDM8N,CUyDDhK,A7BLN,CAAW,CgCzCb,AJ8CX2N,CAAuBE,ATzD/B,CaWiC3K,CbVjC,CUwDE,CpBdsBoB,CoBetB,CG/CiB,AJ8CXqJ,A5BLgChM,C4BKvC,CI9CuC,KAAK0O,IAA1B,CAAb,CvBgCEpU,EAAiCqC,EGhDhC,CAAN,KHgDsCA,CAASmF,CTSlB,GAAoC,IAA/C,EAAqD,GAArD,CAArB,EAEA,KSXyCnF,EAAjCrC,CAAP;AuB/BK,AH+CH,ADDF,AhB9DE,AJGF,ARwDD,A8BtCA,AXhBA,ARmBCqC,ANsCA,AHpCA,AWaD,AJSC,Af3Dq5B,EiBmCr5BA,GC9B0D,CAOzD,AJED,AWED,CdyDC,CG3DA,EqB4DQqQ,AlBvCRrQ,CHrBA,AH2DA,AXzE25B,CQqCj5B,ARrCk5B,CsC2Bl5B+R,ArBQC,ET/BZ,CRJ45B,CsC2Bt5B,ArBQUhS,AjBnC2C,CsC2B3C6R,AH+CPvB,ErB5DR,AH2DA,CwBCmBzS,ArB5DnB,CwBaK,C3B8CeiH,E2B9CEsN,AH+CHvU,ArB5DnB,CqB4DwBwS,CrB5DxB,AWED,EaWM,CbVuCzE,IRkBjC,CQlBiCA,ARkBpB3L,CQlB0BhB,GUyD/BpB,CAAjB,GlBvCS,CAAXoC,CQlB4C2L,CAAgBvN,GdwD5D,EcxD4CuN,AdwD5C,CcxDkEC,IAAtBD,CAA2BD,EdwDvE,EcxD4CC,CAD7C,AdyDC,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA;A2B9CK,AOeN,A3B9BE,AJCD,ARyDD,AmBvDA,Ad0DC,AHrCe,ACcd,AYpDa,AFoDf,AnBnDm6B,I6C2C75ByN,EpB3BN,Ed0DC,CU3EuB/N,CPevB,CLqCQ,ATnDg6B,Cccx6B,AH4DA,AX1Ey6B,CsC4B/5B0G,AxBdV,CLqCC,ETnDu6B,CsC4Bn6B,AxBdL,Add0D,Ecc1D,CwBciBI,IAAZ,CjB7BS,GIiBf,AJjB2C,EwB4CrCiH,CpB3BN,ApBUY1Y,EwCiBuB2Y,MAAAA,CAAOH,AxChBzC,KoBXD,CAAA,KoB2BmCG,EAAoBF,cpB3BvD,EAAA,CAAA,CAAA,kBoB2BmCE,CAAnC,EAEA;APhBK,AH8CF,ADAI,AW7BP,A/BhCC,AsBoBD,AXlBA,ARqBC,AS5BM,ArBmBL,AGUD,ACcC,AYrDyC,AFqD3C,AnBpDg7B,GSyCh7B,C2BPM7I,A3BoBL,EKxCA,AWGO3E,ARoBH9G,AItCsC,CiBqB1B,CAWb,CJ4CYyK,ARlEAjE,CSkETiE,ArB7DN,CWED,ARqBKzK,AjBrCi7B,CiBqC36BrE,ATCA,ARtC46B,Ccct7B,ATcQ,CoBZT,CXFC,ANVD,CMUC,Addq7B,CAA33B,CK4B7CV,CYSb,EHvBA,AGwBA,IIvC0C,ChB6BlC,CqBnBF,ArBmBgBS,CqBnBYiL,ALTEH,IKS9B,EACP,CQiEO,CAAoClH,AT3D3C,ApBYS,C+BMHmM,AXlBN,ApBYiC9P,CoBZjC,CAAA,CWkB0C,I/BNjC,C6B+CF,Cb3E8B6K,Cc2EH8E,ADClC,Ab5EwD7E,GhB4BVnL,I+BM9C,CDyCOmP,Cd3E8BjE,CADM,EhB6BzC,C8B+C6C+D,wBAAce,QAAdf,CAA5C,EAAqE;AACpE,ADCH,ApB/DA,AR0DM,AmBxDP,ARuBE,AS7BF,AfgEC,AN7CC,AGSc,AavC2B,AFsD3C,AnBrD67B,MyBiB96BxD,ACPf,ALVSlO,EV0ER,CuBGOyG,A5BLQb,CezE2B,CIiB3C,AzBhBm8B,CAAC,CqBDz5B,CIiB3C,CU4DW,CxBFV,AX1Ek8B,CAAx4B,CkC6EnDa,AvBHP,EwBEG,GDCkB,E5BLf,C4BKCA,A5BLyBZ,CoB9DjC,GQmE6BkL,ARlEShD,EpB6D/B,AezEoC,CAClC/N,CfyET,CoB9DsC+N,CDKtC,ACL4C3M,CDK5C,AJjB2C,CIiB3C,CAAA,CS6D6B2P,CAAW5Q,IAAX4Q,ARlEShD,CQkEOtH,ARlESjG,KAAhBuN,CAAsBC,GQkE/B+C,CAA5B,ARlEqChD,CAA2BD,IAA3BC,CADtC;ASmEI,ADCH,AW/BM,A3BjCL,AZ4DD,A8BtCc,AXpBf,ARwBE,AS9BF,AfgEC,AHnCA,AaxC0C,AFuD3C,AnBtD08B,I6C+C77B2N,EvC2BN5V,AmBzDeqI,ACPtB,ALVe/G,EHcT6D,AD0BA,CmBJkB4H,AnBIjBzQ,CNkCN,CLAM0D,AmB1DP,AzBhBg9B,CW0E/8B,AHnCU,ARvCs8B,CqBDt6B,Cf2E5BD,AmB1Df,CjBZA,CGsEC,AU3E0C,ArBCq6B,CiBwCz8BzD,AjBxCoD,CiBwC3Ca,EXkCD4C,CuC3BF6V,A3BjCPzQ,AZ4DgBlF,CY5DF5C,E2BiCa,CTXlB,AzBsCd,CyBtCwCnD,AzBsCxC,CkC3BM,AvC2BQ6F,CAAcF,AWlCtBvD,AS9BP,CmBqCqC,A5BPV+E,CmBJZ,CV1Bf,CU0B+CC,AzBsC9C,EMlC0BD,ANkC1B,CMlCgCrE,AIzCU,CIiB3C,AJhBesE,CIgBf,CAAA,CWoBe,AXpBf,CPFM6D,AZ4DSpF,CY5Db,AZ4DD,A8BtCuDzD,CnBIjDA,CC1BkC,AD0BvC,AIzCyC,EJyCA,AS9B3C,CAAA,GU0Be,EACf,gBV3BA,EAAA,CAAA,CAAA;AYsBI,AH8CD,AjB/DA,AuBlBH,A3BiBC,AsBwBA,AXtBD,ARyBG,AS/BH,AfgEC,AHnCe,ACgBf,AYxD0C,AFwD3C,AnBvDu9B,MyBiB17BgM,ACNrBH,Af+DP,AU1EuB7L,EPaZ4G,CL0CJxC,CEmBP,C2B1CQ6N,ApBjBDvR,AOCR,ACNA,A1BV69B,Ccc59B,AG2BQ,AjBzCq9B,CW0E79B,Cc1DD,ACNA,ALX2C,CPe1C,CwBkBG,ArBSS3B,AjBzCg9B,CsCgC98B4S,AjBjC4B,ArBCgB,CkBexD,CJDF,CwBkBG,CpBjBc5Q,AD0BT,CAAA,ANiCR,CAAA,C2B1CqB,C3B0CrB,EAAA,CAAA,C2B1C0BgR,IAAvB,GbhBJ,ACNA,ALX2C,CIiB3C,ACNA,ALVwB/R,CIgBxB,ACNA,AjB6CmBqE,CSxChB,AOCH,ACNA,KT+BuCU,CI1CI,EZwDnCX,CAAP,CQdsCW,CAAMrE,OAApC,CAAN;AqBRC,AH8CF,A7BJD,A8BpCA,AXvBD,AR0BG,AShCH,AfgEC,AHlCA,ACgBA,AUAD,AnBxDo+B,KW0En+B,CLCIgD,A8BpCAsB,AXtB+BuH,ACNrBT,KYsBNgG,AhC0CJpO,AmB3DL,ACNA,AfgEC,AX1Ey+B,CQwC/9B,ARxCg+B,CoCuCt+BsB,C9BoCQ,AmB3Db,ACNA,CYuBI,AhC0CH,AEvED,CRJ0+B,CM2E19B,AN3E2C,CoCuC1C3E,SAAhB,C/BRQK,C+BQmB,OXvB5B,ACNA,CDMA,ACNA,CDMA,ACNA,ArBsBC,CoBhBD,ACNA;AYwBG,AEgDF4S,AKlCD,A3BhCG,AJFF,AR8DC,A8BpCAtO,AV9BF,AfgEC,ANzCC,AGOc,AavCf,AFwDD,AnBzDi/B,EwCkFh/BsO,EKlCKiG,ATRJvU,EEJA,AZzBoB+G,Af+DrB,EG5DA,AH4DA,CUzEON,CHeC3C,AbiBH,CC2CG,A8BpCP9D,AV9BF,AfgEC,ANzCMtE,ALjCg/B,CAAC,CM4Et/B,C8BpCU,AV9BZ,EcAA,AJ8BEsE,ApCxCq/B,CAA57B,CwCU3D,CtBMS8D,AJFR,ATmBC,CMyCD,CAAA,ANxCC,CalBmB,AJDGlC,GH2DvB,CO1DwB7G,AJDD6G,C0BLxB,A1BK6BvH,AH2D5B,EkC1BKka,GAA4B,A/BjCV3S,CAAW,G+BiCG9I,A/BjCd8I,AYLxB,CZIC,AYJD,CAAA,CAAA,EcAA,AnBT0BhJ,CmBiFV6F,AKlCkB,CAAW6V,C3BhCxB,CAAatZ,AGf1ByL,EAAwBzG,CmBShC,EAwEwByI,GtBlEH,CAAlB,AGfKhC,EAAiCzL,GmBSzC,CKsCkC,CLkCCA,AKlCnC,EAEA,CxBjDQyL,CAAP,ImBSD,EAwE6CuH,WAxE7C,EAyEC;AACC,ALHD,AU9BD,A/BrCC,AR+DC,A8BpCA,AXtBD,ARwBChT,ASjCF,AfgEC,ANvCE,AGMF,AavCA,AFwDD,AnB1D8/B,GMyE9/B,CAMC,AWpCCA,EQxBG+E,ACRwBiH,EcyErBiH,A1BtEP,CqBmEO,CxBPP,CcvDIlO,ACTL,A1BVogC,CiB2ClgC/E,AN+BD,AHjCU,ARzC0/B,CmCiFpgC,AlBtCUU,AN+BV,ANvCOC,CoBhBHoE,ACTL,ClBNA,CRJogC,CW0EngC,AX1E0D,EyBmBtDA,AduDJ,CG5DA,AWKA,ARwBC/E,CAAiB+E,AZRhB,EmCiDKkO,A1BtEP,CTqBkB5S,EmCiDOoN,AvBzCP1I,CAAMrE,MZRtB,CYQDV,CuByCwByN,CAAUqF,Ad1EpC,CZIC,AYJD,CZIC,AYJD,CAAA,Kc0E0BrF,EAAxB,G1BtED,EAAA,CAAA,CAAA;AqBoEA,AU9BD,A3BnCG3E,AJHF,ARkEA,AmB5DA,ARiBA,ANqCA,ANtCE,AGKa,AWkBhB,AnB3D2gC,GiBqC1gC,GCpBEA,AOGE5G,AdsDJ,EG3DQvD,CG8BH,CN6BL,CX1EghC,CcchhC,AWMIuD,AzBpB6gC,CiB6CxgC6C,AN6BT,ANtCOnE,EanBLkI,AJHF,AWMI5G,AdsDJ,COzDYxB,APyDZ,AX1EghC,CAAt9B,CiB6CjDqE,CAAMhE,CQzBXmB,CAAJ,AdsDA,EOzDE4G,CAAkB/H,GJHpB,CAAA,CAAA,ATsBE,CStBF,ETsB0BV,KYSrB,EACL,EZVE,CanBAyI;AsBqED,AKjCF,A/BvCC,AsB6BA,AXtBA,AR0BC9I,ASlCD,Af6DA,ANrCE,AGKF,AatCM,ArBJihC,IiB+CthCA,EmBJK2D,AXtBFqB,ACRAD,EcyEC,A1BvESH,C0BuERkC,AnBlFSyE,EKSXxG,A1BbyhC,CoC2CvhCpB,AnBIL3D,ATLS,AR1CohC,Ccc9hC,AWOIgF,AR0BMc,CSlCNf,CU8BW,A/BNN,AGjCV,CMUC,AWOIC,AzBrByhC,CAAn+B,EoC2CvC0L,AV9Bf3L,ArBwBF,CqBxBF,CDQIC,CAAJ,KJjBM,CPUN,AOVkC0G,CPUlC,CAAA,CAAA,COVM,CmBkFcjI,CnBjFrB,EesCgB,CAAsB7F,EI2C/BkJ,EAAsBzG,AJ3Cb,EAA4B2E,GnBI1ChF,CAA2C+E,GuBuCtC+B,AJ3CS,EI2CwB9G,AJ3CaA,AnBIR+E,CAAMhE,OuBuC5C+F,AJ3CS,CI2CV,AJ3CL,II4CK,CAAC+L,KvBxCL7S,kBuBwCK6S,CAAwBpP,MAAxBoP,EAAgCI,eAAhCJ,EAAiD7S,QAAjD6S,CADD,IAEAK,wCAAAA,CAAyCzP,MAAzCyP,EAAiDD,eAAjDC,CAFA,IAGA,CAACC,iCAAAA,CAAkC1P,MAAlC0P,EAA0CnT,QAA1CmT,CAHL,EAIA;AACC,AKrCH,A3BpCGpS,AkB0BF,AXtBA,ARuBK,AS/BL,ArBwBE,AGIa,AarChB,AFuDe,AnB5DshC,GiB6C/hC,GC3BHA,AkB0BI4P,AXtBF3Q,ACRAgF,ALTL,GJ4CM,AEWkBkE,EnB5DmhC,CoC4CpiCyH,ApC5CqiC,CwC2FliC,Ad7EL3L,CDQAhF,ANsCU,CiBhBC,AjBgBcpC,CFXjBmH,ASnCE,A1Bd4hC,CoC4C1iC,AXtBI/E,AzBtBsD,CwC2FxD,Ad7EF,CP8Cc,EFXF+E,AEYb,CMvCK/E,AR2BckF,CQ3BlB,CaeKyM,ApBnBH5Q,AOFH,CAQC,EPNuB+H,AD+BX/D,AI5Cb,EiBgCU,CjB/B4B4G,CJ2CV,EAAtB,EI3CgCA,CHYd7C,AGZoB9J,CHYV+B,QGZI4K,CAAgBvN,KAAhBuN,CAAsBC,GHYpC9C,CGZc6C,CHYnC5K,AGZ8D2K,IAA3BC,CADtC;AiBiCI,AEsDD,AKrCH,A3BpCG,AuBkBH,A3BrBE,ARiED,AmBvDA,ACXA,Af2DA,AH/BA,AatCD,AFwDA,AnB7DkjC,MMiF3iC/H,AoBlEF5D,ALVL,AFuDoCgF,ERaxBM,E2BnCL,CtCtCijC,CcgB9iC3G,AN2BC,AR3C8iC,CW0ExjC,AQbD,CO9CKqB,CYuBOiS,A9BlCZ,CMYE,AH0DD,AQbD,AnB7DwjC,C0BenjCjS,A1BfsD,GsCsCpD,A3BoCN,C2BpCiB2R,CZvBb3R,CAAJ,CYuBM,AZ5BP,CY4BI,AZrBH,AP4CD,CAAA,CmBvBuB,CjBjCvB,Ef4EO4D,Ce5EP,CFwDA,CboBkCH,EapBlC,CAAA,GboBkCA,CAAOrF,AapBzC,KboBkCqF,Ae5ElC,Cf4E+C,Ae5E/C,Cf4EkCA,EAAgBC,AapBlD,CAAA,CAAA,CAAA,EboBkCD,CAAjC,EapBD,SAAA,CExDA,EAAA,AFwDA,CExDA,CAAA,OFwDA,CAAA,CAAA,CAAA,GAD8C,EAC9C;AmBtBM,AxBrBH,ARiEF,A8BtCA,AXlBA,ARwBA,ASjCA,ArBsBC,AGGc,AatChB,AFwDA,AnB7D+jC,MMmFxjCI,AWhCA9C,AI7CC8K,AFsD0C7L,GiBf1C2D,C/BLF,CStBE,ATsBD,AgBnCP,ArBLqkC,CsCuCzjCiB,AtCvC0jC,CMmF/jCf,Ce9EP,AFwDA,CiBhBQF,CtB3BL,ARiEcF,A8BtCFmN,A/BLH/P,ALxCyjC,CsCuCzjC+D,AnBsBZ,AnB7D2D,GsCuCvC,EhC4CHnB,CAAOK,A8BtChBH,CnBMD5C,CqBZkBkR,AFMxB,C/BLM,AcqBP,CiBhB0B,AnBMEjS,AZXLU,AcqBvB,CbsBiB+C,AatBjB,CbsB8BF,AatB9B,CmBtBoB,CAAWoO,GAAX,CrBYQ3R,AZXrB,CiCD6B4E,ArBYC7D,AZXnC,AgBnCF,CAAA,ChBoCE,AgBpCF,CAAA,EiBkCM,AhC4CW0C,CgC7CM,AhC6CtB,CgC1CK,WrBUsBzD,EAA3B;AuB2CC,AKtCF,A3BpCE,AJDEyD,ARiEH,A8BtCCkN,AnBOD,ANsBC,ANjCC,AGEF,AavCD,AFyDC3Q,AnB9D2kC,EmB8D3kCA,E0BNKwZ,ATVJ7I,E9BsCGpR,AW/BE0F,AI/CQ6G,Cf8EVvM,CQjEDkE,AHwDE2B,COvDCrE,CZgEE,A8BtCP4P,AjBgBD3Q,CqBgCQoT,AlCVR,A8BtCQ7U,AfzCT,ArBLklC,CQ4CvkC,AR5CwkC,CmB8DvkC,CL3CRkF,ATuBK,AgBrCT,CeyCEkN,A5B1CF,C4B0CchN,A5BFE,AR5CkkC,CcmBrkCiB,AK2CG7E,AnB9D2C,CW2ErDqF,ANjCOrG,CMiCIkG,CMtBVA,EHlCHxB,AsB2BUE,CAAOkN,AnBOG7L,AZXf,CAAA,GatBP,AkB0BYrB,EAAZgN,ClB1B0B5P,ADiCJiE,CAAQ5E,EAAR4E,ANsBlBI,CQbM,CRaqBE,AQbRtF,CFTY+E,AIhDrC,CmByFSqO,AnBzFT,CmB2FG3P,AKxCG+V,AxBnDN,CAAA,CVsEMpU,CkCnBqC,A5BHNL,CAAME,ANsBHjF,CQb5B,CqBgCHoT,ArBhCRpT,C0BND,A1BKA,CqBoCGyN,AnCvDoC/M,AcsBtC,C0BND,C3BtCE,EPuDI0E,CAAJ,EACA,CNlCO,CmCoDAgO,AnCpDN,CYWqBpO,CuB6CrBhF,EvB7CyD+E,KAAAA,CuByCnDqO,AvBzCyDlO,EuB8C/DqO,GvB9CF,CA1BD,CA4BC,2BuBuCQH,EAMNJ,WANMI,CAAP;AFpDI,AE4DJ,AK3CF,A3BtCE,AJDE,AsB2BF,AXnBD,AR4BA,ASrCA,Af0DE,ANlCA,AgBtCH,ArBLylC,MyB4BplC,ACTA,ALbiBrH,GHef9G,EGhBP,ArBL+lC,CAAC,CsC0CrlCmN,AbdCvG,ACTAA,Af0DFvG,CUxEV,ErBL+lC,CAApiC,CyB4BtD,ACTA,Af0DF,C2BnCG,CAAYqM,GAAZ,ApBrBJ,AOOoB,ACTA,EYmBC,CAKjB,ApBtBkB1M,KOOvB,ACTA,EDUA,ACTA,GLfD,CAAA,CAAA,CAAA,CHgBE;AsBXF,AtBYE,AZ+DD,AmBvDC,ACTA,AfyDC,AH1EH,AaCA,AF4DC,AnBjEqmC,CQG/lC,KaGsB+G,AF2DxBhH,GD3CEvB,AZ+DClE,CAAAA,CehFR,ArBL4mC,CAAC,CMqFjmCsE,AapBPmB,CE5DL,AF4DamE,CD3CX,ClBtB0mC,CAAjjC,CkBsB3C,EZ+DJtF,CAAQnC,GY/DE,GZ+DrB,CapBIsD,CD3CsBjE,AZgE1B,GarB8B,CAACf,GE5DhC,CAAA,CAAA,CAAA,EF4DgCA,CAASa,KD3CzB,GAAgC,EC2ChBb,CAAoBgF,ED3CCC,KC2CDD,CAAQmE,QD3C1D,MC2C8BnJ,CAA/B,EACA;AmBtBK,AOgBN,A3BrCE,AJFC,ARkED,A8BvCD,AXjBC,AR0BD,ASnCC,AfyDA,ANlCA,AcsBA,AnBnEinC,I6C4D7mCyZ,E5BHDhW,EX8BCI,AapBAmB,CD5CChF,AkByBC2Q,EtB3BA,ATwBDhQ,AL7CknC,CiByDpnC8C,AjBzDqnC,CsC4C/mC4O,EhC2CLxO,A8BvCL,AnBSIJ,AEUCuB,CmBvBA,AxBvBH,ARkEWzF,AapBAa,AnBnE2mC,CsC4C1mCuR,ApBrBb,AZgEI9N,ANvFqD,CMuFrDA,AapBJ,CdtBA,CiCDI,ApBrBY7D,ADkCbyD,AEUa,CFVjB,CqBbmBmB,AhC2CA,AD1CFlE,IC0CZmD,CgC3CA,CpBrBJ,EZgE0BA,AD1C1B,IwCeI4V,GAAiCD,AvC2BX3V,CAAQtE,CAARsE,CAAAA,CAAWnC,MAAXmC,GAAoB,CAA9C,EACA,kBuC5BqC2V,IAAuC,YAAA;APdxE,AOcwE,A3BpC5E,AJFE3W,ARmED,A8BxCF,AXjBC,ACTA,AfyDD,ANlCC,AgBtCD,AF4DE,AnBpE6nC,MqBQ3nCjF,EPcDiF,AWUE,CoB4B8E,CxBpD/EjF,CPcDiF,ATwBGjC,AL9C+nC,CmBoE7nC,AnBpE8nC,CMyF7nC,AejFLhD,CPcKgH,CwBwBGA,AbdAmH,CNoCAtN,AnBpEynC,CAA3kC,CqBQtDb,CPcDiF,AOdH,CiBsCK,AbdA,KAAiB,CoB4BuD,CxCd5E,GAAwB,GoBdxB,EACA,ApBa6B7C,AcsBtB,CAAe,OdtBE,CAAcS,SAAd,AcsBjB,CdtByCC,AcsB/C,QdtBuB,CAAxB;AiCCG,AE0DL,AK7CA,A/BrCI,ARmEA+C,A8BvCJ,AXjBGvB,ARyBF,ASnCC,ArBuBA,AGAK,AatCN,AF4DE,AnBrE0oC,C6C4D7oC,EAEA,GpB5BGA,AJzBE8C,EfiFDvB,AoBlEE,CciFGoP,AdjFH,AlBuBUzO,CSYPlC,CjB3D0oC,CyBkChpCA,AzBlCipC,CK+C3oC,AgBtCJ8C,CfiFDvB,CmBxDQsI,CnBwDCnI,AW/BZ,ASnCYkI,ALfR9G,ArBT8oC,CK+CjpC,AL/CyD,EQ+CpD,CiBbJ9C,AjBawBmC,CkBvBrB,ALfDW,CAAJ,IKeK,GlBuBC,EACP,CgCyDA,CAAiCvB,IdjF3B,EciFN,ClChBU,AoBjEJ,CciFmCgK,SAAzC,CdjFM,CciF8CzN,EdjF9C,MciFN,CdjFM,CckFN,AdlFa8L,KAAP,CAAA,MAAiB,QAArB,EACA;AckFA,AK5CF,AvC4BIjJ,AW9BF,ASnCC,AfwDI,ANlCL,AGCD,AavCA,ArBVypC,MqBUrpC7C,EfiFD6C,CW9BG,ANqBSuC,AHjCRjB,CkBvBD6H,CpBiEHnJ,AN3F4pC,CAAC,CM2FppCgB,CejFR7D,CKgBF,AlBuBKmE,CAAOE,ARjDipC,C0B2B7pC,ALjBErE,ArBVsD,EiB6DzD,ANqBK,CLSM6D,AKTcoB,CLSN1F,CAARsE,AejFR7D,CAAJ,CALD,Cb4CQmE,AarCP,CbqCA,QGiCM,EAAoCxC,IAApC,EAA0C3B,QAA1C,EACP;A2BlCIsS,AE2DF,AK5CF,A/BxCG,ARiEO,AmBrDP,AR0BA,ASlCCtN,AfwDHrD,AHlCA,AarCA,AFyDC,AnBtEqqC,EWoFtqCA,I2BnCG2Q,A3BmCH3Q,CLKE,CoB7DCqD,CfwDIhF,CchDDuM,ANkCC,CL9CA,AdxBqqC,CAAC,CsCiD1qC+F,CAAQC,AnBqBAxT,CMlCT,ACRCiG,C1B5ByqC,CsCiDzqCsN,AbZD,Ad+CKtS,AXpFmD,CsCiDvD,AZrBU+L,AfwDGpK,CQdT,CAAA,ERcA3B,CexDJgF,AfwDkBrD,GG5DnB,CH4DK3B,CAAP2B,cQdqCqD,OAAAA,CAAQmE,SmBrBSwI,GAAnDW,EnBqBI,CAAN;AmBpBC,AE2DD,AK5CF,AJlBA,A3BtBI,ARoED,AmBvDCtN,ARyBD,ASlCChF,AlBuBJ,AWmBE,AnBvEkrC,GmB6DprC,CsBdMsX,AtB0BL,IMnCGtS,ACTAhF,G1B7BsrC,CAAC,GyBsCvrCgF,CCTAhF,A1B7BsrC,CyC+CprCsX,AzC/CqD,CyBsC5CtL,CCTAA,CemBf,CACC,EhBXGhH,CCTAhF,SRHU;AsBoFZ,AK5CF,A3BvCE,AuBuBD,A3BxBG,AWaAA,ARyBD,AStCA,Af4DF,AUxEA,ArBdgsC,MWsF5rC,AUxEA,CKYF,Af4DG2B,Cc/CF3B,ERyBG,CwBhBP,AxBgBQiF,ANsBH,AXtFksC,CAAC,CkB2B/rCY,AuByBR,AfpBE,ALlBSgG,EVwEE,Cc/CV7L,Ad+CW2B,AXtFwrC,CAA5oC,CqBctD,CIyBU4K,Cd+CA5K,CAAK0D,EUxEE,CIyBlBrF,CRyBD,EAAqB,CNsBT2B,EAAd,CUxEA,CVyEA,CUzE+B,YHaN,IAAjBkE,EAAuB,MbwB/B;AmC4DC,AtBpFgCzF,AuB0BjC,A3B1BG,ARmEFb,A8BxCK,AXlBJ,AR6BC,AShCAS,AfuDF,ANpCA,AgBrCApC,ArBf4sC,IM8F5sC2B,Ae/EA3B,Cf+EA2B,EmB1DC,CPT+Ba,AQM9BJ,ALlBFpC,CeuCckT,ClB3BkB1Q,CP6DzB,AUzEAyL,ArBf2sC,CkB2B9qC,AJA9BjH,Ad3B6sC,CyB0CltC,ApBUM,EYaE,CShCP5E,AfuDF,AUzEApC,ArBfktC,Cc2B5sCgH,AGsCJ,AjBjEuD,Cc2B7C,ATyBA5E,CSzBN4E,AYMOmH,CZNPnH,IYMJ5E,CZNiB,CTyBZ,C+BEF,A/BFgBS,CSzBnB,AsB2B+B7C,EtB3BT,EsB2BnB,EAAkCoH,E/BFhC,CAAwB,I+BE1B,C/BF+BlE,C+BEYd,QAA3C,EACP,Q/BHiC,GAA2B,KAAKe,kBAAL,EAA3B,EAAsD,CAAtD,CAAxB,CAAP;AmC4DA,AtBrF8B,AuB2B/B,A3B1BI0C,ARmEH,A8BvCD,AXbGzD,ARuBA,AShCA,AfuDF,ANpCA,AgBvCD,AF+CD,AnB7D2tC,GWmF3tC,AUrEC,CV6EA,EQ9BD,CqBmDO,AtBrFE6F,AQFP,CDkBE7F,ACPD,CRT2C,AGVxC,CPWDyD,C0BoFM0J,AxChHstC,CyCgDjuC,AzChDkuC,EkB2B/qCnN,AuB6BlD,CpBvCW,CmB+FDmN,A1BpFN1J,AWeDzD,AzB3C6tC,CAAtqC,CmB6D3D,CqBmDmB,A1BpFL4E,AWeCoH,AJ1BCpD,CmB+Fd,CrBtC+CQ,CqBsC3B+D,AtBrFbtH,CAAP,CJCYjB,AWeV5E,GeqEkBmN,A1BpFA1J,COXV,CAAc,CmB+FIgK,ErBtCmBrE,CL9C5C3F,AK8CwD7F,CmBtB9C,GnBsBkCwL,EqBsCnBqE,ArBtCqCzI,CqBsC3BtD,MAAV+L,ArBtCqCzI,CAAQ5E,EqBsC1B,ArBtCAgJ,CqBsC/C,ArBnDF,EqBmDoD+D,KAAAA,EAAlD,EACA,MnBhGU,CAAN,CAZN,CAcC;AiBkCG,AE6DA,AK/CJ,A3BvCE,AuB6BD,A3B5BI,ARmEJ,A8BvCA,AXbG,ACPD,AfuDF,AUxEA,AFyCD,AnB7DwuC,I6CmEluCuM,ETVD1U,AjBiBYqE,EqBwCPmK,EF7DH,CtCrDuuC,CAAC,CoCyD1uCxO,EEJO8M,CtCrDkuC,CAAnrC,CoCyD1CzR,CEJV,AE6DGmT,GAAc/F,EF7DH,GFIpB,CjBID,CmBR0BX,AFIE,EIyDJW,ArBrDxB,CqBqDkCgG,EF7D9B,COcEiG,CPd0B,EE6DRjM,AK/CgB+L,CL+CCrM,IrBrDzC,CqBqDwBM,ArBxCfhK,CqBwCL,KrBrDJ,sB0BMwC+V,IAAuC,YAAA;APbzE,AOayE,AJnB/E,ALUExU,AnBSCvB,AS7BA,AfuDF,AQhCD,AnB7DqvC,IoC0DnvCuB,EnBSCvB,AEOsCZ,EsBhBlCoL,CIS8E,A1BNrF,EiBHEjJ,ApC1DyvC,CiBmExvCvB,AENH,AnB7D4vC,CsCsDjvC2O,CFIC,CKVZ,AxBmBY/K,CmBTVrC,ApC1DyvC,CAAhsC,CyCgD3D,CHMM,CAAY,GGNlB,CtBaA,CmBPuBgN,AnBoBkBnP,CsBhB1BoL,EISgE,A1BN/E,CmBPkB,AnBOlB,CmBP4B0D,AnBsB3B,GmBtBK,AGNN,GAAA,CxBmBYtK,CAAuBpC,CwBnBnC,GAUqBgJ,OAVrB,GAAA,AxBmBY5G,EAAuC,KwBnBnD,EAYC,GxBOWA,EAAmDrH,QAAnDqH,CAAT5D;AqBZE,AE6DD,AKjDJ,AJNC,A3B/BG,AsB6BF,AXbCsB,ARsBA,AS7BA,AfuDF,AX9FiwC,C6CmElwC,EAEA,GpBvBGA,EesEKyO,GftELzO,AzB9CqwC,CAAC,CiBoE/vCuC,CQtBC4B,EzB9C6vC,CAA7sC,EwCoHnDsK,KAAgB,CvBhDdlM,CAAa7D,CuBgDf+P,IAAuBA,CvBhDrBlM,EAAqBvC,CQtBd8G,IRsBc9G,CQtBpBmE,ARsB0BrG,CZZpC,CmC4D8B2Q,AftEP,CRsBdlM,EAAgCtH,EuBgDK,GAA3C,EACA,CvBjDMsH,EAA0CtC,OAAAA,CAAQiC,eAAlDK,CAAP;AqBZA,AE8DG,AKhDN,AJRC,A3B9CC,AW8BwB6B,ACNvB,AfuDF,ANtCC,AgBpCD,ArBrB8wC,MqBqB1wC,CAAC2C,CIyBoB3C,EewEduK,CxCtHywC,CqBqBhxC,ArBrBixC,CKyD7wC,GgBpCM,ArBrBswC,CAA1tC,CKyD7C9S,IoBXYuI,CJzBJ2C,CIyBoBA,CewE9B4H,GAAkBjG,AnBjGf,CIyBS,CPhBb,GGTqB,ChBoCvB,CAAsB,CAAtB,CmC6DqBA,AnC7D5B,CmC6DsCgG,GnBjGvC,EACA,CmBgG6BhG,CAAiBN,KAAAA,GAAQ,CAAzBM,CAAxB;AK/CN,A3BxCE,AuBiBF,A3BhBE,AsB6BD,AXfgD9D,ARwB/C,AN0BD,ANtCC,AgBnCA,AFsDD,AnB7E2xC,GcM5xC,CA4BC,EsB2BMhG,AjBgBF,CAAC0F,CM/B2CM,AJvB3CqC,CJ+CC,EjBtE2xC,CoC6D3xCrI,ApC7D4xC,CkB+B1xCmD,AGRP,EesCc,AftCH,CIuBoC6C,AzB9CivC,CAAvuC,CyB8CA,CWevC+G,KnBSlB,EwBPuBzC,GtBcxB,EACA,EsB9BD,GAAA,ALagB,ClB9BO,AkB8BerQ,IlB9B7BkJ,AkB8BO,ElB9Ba,AuBiB7B,ALa4C9B,EKI3C,KLJe,EAAqChF,QAArC,CAAf;AI2DK,AKhDN,A3BzC+BI,AuBiB/B,ALeC,AXjBuB,ARyBrB,AI/CA4E,AFuDD,AnB/EuyC,MqBwBtyCA,CIsBQkE,CPfoB9I,ACgDzB4E,CsBbEiJ,ALHP,AXjBkEjO,Ce0EzD0T,AtBzFqBtT,ClB/BgxC,CkB+B5wC,AlB/B6wC,CqBwB7yC4E,EFuDGA,CsB/BN,ApBxBa+G,AFuDC3L,AnB/EiyC,CyB8CpyC8I,AzB9CgD,CyB8CxDnE,ANiCD,CsB/BF,CtB+BkB,CEvDfC,GeuCF,CIyDS0O,AJzDT,EAAA,EKfD,ALgBG3C,CIwD2B,CCpD7B,EDoDS2C,EJxDP3C,CAAOC,CIwD2B0C,OJzDpC,EAAA,MIyDoCA,KAAoB,CJxDnC,EIwDhB,EACA;AACE,AKjDR,A3B1C6B,AuBsCzBzF,ALJD,AXlBA,ARyBA,AS/BA,ALhBAjO,AFuDA,AnBhFmzC,KyBgCpzC,CAgBA,AJvBCA,CHMM8G,EAAkC,CuBiB3C,AfPO5C,CUwBG,ApCjEkzC,CmBgFnzC,AnBhFozC,EkB+B7wClE,AuBsC5CiO,ApB5CDjO,EFuDUvB,AnBhF+yC,CyCqEjzCyP,ApB5CGlC,ArBzB6C,KkB+BlDlF,AGNN9G,CHMD,CuBsCEiO,GHXK0D,AGVT,IAAA,CHUa,AGXb,EAyBA,CtBQS,CAAe,QOvCG9F,KAApB3H,CAAJ,APuCM,CAAN,COtCA;AYiBC,AEgEI,AKjDR,A3B1CE,AJGD,AsB+BM2M,AXjBL,ARwBC,AS9BC9L,AfsDH,AU1EC,AF0DC,AnBjFg0C,KqBuBj0C,CHWD,AJCI,AsB+BE8L,AzB+BFlP,CG9DCuC,CYQFa,EYgBMoN,AFOHtB,AnBOA,ANwBFlP,CMxBGsD,ANwBEzC,AUvED,ArB1Bg0C,CoCkE5zC,ApClE6zC,C0B2Ct0CuC,CYgBMoN,EZhBEjJ,A1B3C6zC,CsC2DxzC,AtC3D0C,IoCkE9C,CEPS+I,GFOT,AnBOV,CNwBEtQ,C2BtCY,ArBcO,CqBdIgQ,AFOT,GEPF,CAAb,A3BuCFhQ,ANrCD,IMqCCA,CevDgBkK,AfuDXrJ,IG/DmBiB,CYQdyF,EAAa,GZRnBhF,CAAL,EACA,EH8DCvC,GAAuBrD,OAAvBqD,CAA+BsD,cAAAA,CAAevD,MAA9CC,IAAwD,CADzD,EAEA;A6ByBOwL,AtBzFP,AuBsCD,A3BpCE,AsB8BM,AXnCN,AR0CE,AS/BuBhE,AfyDzB,ANtCA,AgBnCCnE,ArB3B60C,IyCyE10CuS,EpB9CHvS,EmBiGKmI,CfzEN,CCRyBhE,ArBmBrB,CSzBG,AH+DA,AXpG60C,CoCmE10CxF,ApCnE20C,CwC4H/0CwJ,ACnDFoK,A3BpCJ,AOVCvS,EJ+CC,AZZO9E,CoCWO4M,A9B2BhB,AUzEWzM,ArB3By0C,CK8Dh1C,AL9DqD,CoCmE/CsD,CAAOiN,EnBOJ7P,AZZE,GqBnBUoI,CLhBxBnE,CewCSrB,AVxB+BmI,ArBmBrB1L,E+BKd,A/BLN,E+BK4B,A/BLJ,GoCWF,CAAN0M,EAAS,CAATA,CAAlB,CxBCI,CwBCJ;AHdI,ApBzBH,AJEC,AsB8BI,AXhBH,ARuBC,AShCqB,Af0DvB,ANtCA,AgBnCC9M,AFsDD,AnBlF21C,MqB4B11CA,GKeSkJ,CYkBLiJ,CZlB6CnS,APuC3C,AnBlF01C,CyBoD51C,AzBpD61C,CK+D31C,AcmBP,CmBrBKmS,AjBjCJnS,CiBiCS4R,CtC7Du1C,CoCoEt1C,AfxCC7F,ChBmCAnL,AL/D21C,CsC6Dl2CuR,AbTOrG,ACTF5C,CAARnE,ELfD/E,ArB5Bg2C,CAAxyC,CsC6DtC,AbTd,IaSH,CbToB,CaSE,IjCEjB,CAAsB,CAAtB,CoBXN,ApBWD,EoBVC;AaSGmS,AE+DE,AKlDR,A3BtCC,AuBuCD,ALPOlB,AXfH,ACbD,ArBuBD,AgBnCC,AFsDD,AnBnF62C,I6C2Ez2C0I,AJCAnC,GfnCH,CYqBGrF,GtC9D+2C,CsC8D/2CA,AE+DMwB,AJxDL1C,ApCrE+2C,CsC8D32CW,AZhBR,Gc+ES+B,AJxDL1C,AXfG,AzBtD22C,CsC8D/2CkB,AE+DWyB,AxC7H0C,CsC8D3C/C,AFOH,EKOP2G,AhBtBQzY,EaQRoT,CGcmBrF,ALRZ,EENUqF,AbRb,CAAU,CoBqBdwH,EPbiBxH,CAAKtB,AE+DhB8C,AKlDoB,CLkDDlQ,GF/DzB0O,AOa8BrU,GLkDxB6V,EAA2BlG,CKlDP,AJCD,CIC9B,AJDwBX,EAAS,CAATA,CAAzB,EIEC,CL+CsCW,CAAUJ,CKhDhD,GACM5P,KL+CgCgQ,CAAoBN,KAApBM,CAA3BkG,KAA0DE,SAAAA,CAAUC,CKhD/E,GAC0B,IAD1B,CLgDO,CfvEE,CewEF,AK/CP,ApBzBG,UoBuBH,GAEarW,4BAFb,GAEiC,MAFjC,GAGA,GAL+B,CAAhC,EAQA;APtBI,AEkEM,AK3CV,A3B9CC,AuBwCD,A3BtCC,AsB8BMmH,AXfH,ARqBDnB,AS7BCsB,AfwDH,AHtCc,ARjE62C,McwCr3CP,AGoCJf,CqBfC,CZdAsB,CfwDIpH,AHtCgB2G,ERjE02C,CcwC33CE,AsB8BAI,AnBMJnB,AjB5Eg4C,CsC+D13C,AZhBLsB,EZPY,AGoCJsC,CS7BA,A1B/Cs3C,CwC+Hj3C,AJzDVzC,ApCtEoD,C0B+CvDG,CUuBUpB,C5BLC,CAAqBY,CgC8D1B,GJzDIZ,CAAOkN,C5BLN,EACf,C4BIclN,MzBiCUsB,CM3BZoC,CAAuBpC,YN2B3BtH,EM3BI0J,AN2B4B1F,EM3BW,EN2BXA,CAAK0D,OAAL1D,EAAhChE,CAAP,EM3BW0J,EAAwDrH,QAAxDqH,CAAT5D;AqBZG,AEgEG,AK3CT,A/B7CkBA,AsB4BL,AnBSVA,AS7BC,AfwDH,AHrCA,AapCC,AF8BF,AnB7Dy4C,EW0Gz4C,EGlEkBA,EGqCfA,ATVEe,AWNL,EE9BMsH,CmB0FA,CAQC,A1BzFWrI,CsB4BZ,ApCpEy4C,CcwC73CA,AGqCfA,ATVEe,ARnE24C,CsCgEr4CuN,AjBjCT,EJ8CCtO,ATVW,AapCD,CrB/Bk4C,CsCgEz4C,A9BGL,ARnE0D,CQkE3D,CAGC,C8BLiB0O,CrBaFpR,GqBbEoR,CAAKtB,AnBHvB,GA+BGvH,CmB5BG,UrBaH7F,GAAA,GAAAA,CEeA6F,CAEDD,CFjBoC5F,MAAnCA,eEeA6F,EAGDtE,OAAAA,CAAQmE,cAHPG,EAIDtJ,QAJCsJ,CA/BH;AmBIK,AEiEE,A1B1FS,AsBgCV,AXfHpH,ARqBA,AS7BA,AlBqBF,AatCE8C,AF6BH,AnB7Ds5C,GcwCr5C,EYhBC,CA0BA,ALlBCA,AFuDDtE,EM9BCwB,GzBzDy5C,CAAC,CiB8En5CoF,AI9CPtC,AF6BH,CMJG9C,EJzBA8C,AF6BH,AnB7D45C,CyByDh5C8G,AzBzD+C,KyByDxD5J,EJzBA8C,CJ8COsC,AI9CPtC,CJ8CoBvB,MAAb6D,EAAqBvC,CEjB/B,CA0BErE,GFT6BqE,AZX9B,CYWoClC,GAA3ByE,AEjBV,EFiB0CtH,QAAhCsH,EAA0CtC,OAAAA,CAAQiC,eAAlDK,CAAP;A4BQH,AnBnCE,ArBiBA,AGGD,AavCc6B,AF6Bf,AnB7Dm6C,I6CsF75CyQ,E1BEc3U,EExDLkE,EhBoCT,CLpEm6C,CAAC,GKoE/5CjJ,CLpE85C,CKoEn6C,ALpEqD,GmB6D3D,CdOiB,CgBpCFiJ,CF6Bf,CE7B+B2C,EhBoCT1L,EAApB,CwCkBIwZ,CxClBoB,EwCkBQ,CAAlC,S1BzBA,CA2BE5T,eA3BF;AmBMI,AEqDE,AKhCN,AJPA,A3BxCC,AsBgCI,AXdF,ARqBD,AS5BA,AfuDK,ANtCL,AGGD,AaxCEhB,AF6BH,AnB7Dg7C,I6CwF16C6U,AJPApC,E3BxCD5U,AKgDH9B,CqB+BI,AnBxFHiE,EPSF,AGuCM,AN2BSO,AU3EyBP,CiBmClCmN,CxB1BG,AdzC46C,CyB2D/6CnG,AzB3Dg7C,CwCoI56C,AnC/DF,CiCFFmG,CAAKtB,AFMA,CnBOV,AIhDC7L,ArBhCm7C,CwCoIv6CV,AfzEZ,AJ3BAU,ArBhCwD,CKqE7CpE,CiCFPuR,AGcDsF,AhBrBH,GgBqBqBza,EHdH,AnBNrB,GAAA,CmBMI,EAAsB,ApB3Bf,G2BgDL6c,AlCmBC,CAAkC5U,ANtChC,CAAsB,CwCoB9B,CxCpBQ,CAAP,IwCoBKvH,CL2CoB+P,GrBvE3B,CA4BE1M,CRkBK,EAAkDY,E6ByB9B8L,CAAUJ,CCnDQpQ,A9B0BtC,EAAwD+C,M6ByBpCyN,CAAoBN,AK3C9C,ClCkBM,CQ9CP,C0B4BoB,AlCmBpB,E6BwB2BM,CAAZnJ,KK3Cd,CL2C0Db,EK1C1D,GADA,CL2C0DA,CAAOZ,CKzChEpF,ELyCS,EACL,CCpDN,EAEA,qBIMC,GAGCP,uBAHD,GAIA,IALD;APpBMiV,AEkEE,AKvCR,A3BtDE,AuB2CF,A3B1CE3N,AsBgCIyM,AXbFjM,ARoBD,ASzDD,AfqFD,ANvCC,AGGD,AaxCE,AF4BH,AnB7D67C,I6C+Fv7C8U,A/BrDJtV,EHmEKgB,AQnBL+D,EmBtBI4I,CZdJ,CZZA3N,AsBgCIyM,AXbFjM,CXnBKnC,Ad1C07C,CsCoE77CsP,AtCpE87C,CsCoEz7CtB,ApB3BF/L,CJCPN,AsBgCIyM,CI4DS,A7BzBRzL,CyBnCK,ApC1Eu7C,CsCoE77C2M,AxB1BStP,AWmBXmC,ANAJ,AnB7D2D,CsCoE3C4M,A3ByCG5R,E6ByBX,A1B5FNwE,AWmBauH,ANAf,EmBOMoG,GAAiBA,AbPnBnN,CdgDehF,CAAS2B,E2BzCLwQ,CAAKP,C3ByCT5R,CAAc2B,E2BzC3BwQ,E3ByCanS,CAAlB,CADD,CAGC,AQlDD,CA6BEuJ,C0BKIuQ,C3BtDiB,E2BsDuB,E3BtDrChV,E2BsDyChH,A3BtDrB,GCoB7B,G0BkC8C,CAAW,MAAM+b,6BAAN,GAAsC,GAAjD,EAAsD,GAAtD,CAA9C;AP5BI,AEoEG,AtB9FwBzZ,AJE7B,AsB8BU,AXXRJ,ARoBD,AS3BA,AfyDF,AHtCA,AaxCC,ArBlCw8C,GqBqBz8C,CAcA,GiBgCG,CpB1B2BI,CkBgC1B,ClBhC0BA,AOqB3BJ,CzB9D48C,CkByC76C,AQc5B+L,A1BvD08C,CsCqEx8C,ArBaN,GjBlF68C,C0BuD78C,CDOC/L,AzB9Dk9C,CiBkFx8Ce,AS1BX,EDMYiL,CzB9Di8C,CAAr5C,GyB8DvDhM,WRoBD,GAAgCiF,cAAhC;AqBZG,AEkED,AtB/FwB,AuB4C7B,ALTQ,AXjBL,ACFCD,AfwDH,AU7EA,AF+DA,AnBnG29C,I6CiGv8C+U,AJZfrC,EtBcD,CD1DI5S,AC0DH9E,ED1DqC,AOkBxC,CCFCgF,C1BzD89C,CAAC,CsCsEx9CgN,CpB7BqChS,AuB4C1C0X,ChBpBH,ANkCG1X,CAASwJ,AnBnGm9C,CsCsE59C,AGeasD,Af5Bf9H,A1BzDuD,GsCsEzCmN,AZbJrG,ERhBLhH,CAAP,CoB6BgBqN,CAAKP,AZbnB5M,IYaE,EnB6BAhF,EAAL,CsBdwB,CAAN8M,AtBelB,EsBf2B2K,eAAT3K,CAAnB;AHdK,AEkEF,AKjCF,A3B9DC,AuB6CF,A3B3CC,AsBqBS,AXCN9M,ARkBF,AS1BEA,AfwDH,AHvCA,AatDA,AFgFC,AnBrGu+C,KoCiEt+C,E5BUF,AatCK,CFgEAgF,CLzDER,AGwCD,CQlBHxE,ACRAA,ClBiBH,AatCSiM,ArBrCq+C,CAAC,Gc4C/+C,AKyDKjH,CAAQ5E,AnBrGi+C,CAAp7C,CyBkEvDJ,ARkBF,AS1BEA,AP2CF,CEhEQiM,CbsCT,AatCkBH,AFgED,CMnCHC,ACRAA,ElBiBUxH,EatCf0H,CI6BNjM,ACRAA,ALrBE,EACL,CbqCwBuE,CAAOlF,KAAPkF,CAAa,EAAbA,CAAxB,EAAA,GHFA,KGEA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA;AM/BA,AsBkBA,AXIG,ARkBD,AS9BA,Af4DF,ANzCC,AGED,AarCC,AF+DC,AnBtGm/C,GoC+Dr/C,CAAA,I5BaA,CkBrBE,CrBmBG,AgBnCAwH,CrBvCs/C,CQ4E3/C,AW0BQ,AnBtGo/C,CiBqFn/ClF,ESxBP,ArBaQ3G,AgBnCT,CF+DWzB,AnBtG++C,CK0Et/C,AgBnCO,ArBvC8C,IK0E1C,KAAK2B,EAApB,EAAwB,Kc4BjB,CAAe,CFhBpB,AZZ6B,KAAKQ,Wc4B7B,CAAN,Id5B8B,CAAsB,CAAtB,CAAP;AiCDtB,AEkEF,ACnDF,A3BzCA,AsBiCC,AnBOG6C,ASzBAzD,AfsDH,ANzCC,AgBnCCgF,AF+DA,AnBvGggD,IyCwF7/C2S,IxBDFlU,AI/CDuB,CmBmGM,Cd7ELhF,C1B9DqgD,CAAC,CsCyE//C,AEkET,AnChEO,CYYLyD,CwBCEkU,ApBhDH3S,CJ+CCvB,AjBvFqgD,CAA98C,CsCyE3CwO,AGeI,Af1BhBjS,ArBaUY,AgBnCAkL,GKsBCA,CTyBE/K,CqBdN,AjBjCRiE,CiBiCmB2M,AGeElU,Ef1BpBuC,CYWO,CAAP,MjCEK,CAAsB,CAAtB,CAAP,GYYEyD,GAAkCwB,SwBClB,GAAA,ExBFhB,CwBEgB,GAA2BuS,gBAA/C,EAEA;AHhBI,AEkEH,AJ1DD,AXbGzS,ARmBClC,ASzBA,AfsDH,ANzCC,AGAD,AanCE7C,ArBzC6gD,QyBqE7gD+E,ARmBClC,ATZH,AanCE7C,CKaD,CAWC,CYSM8R,ArBcLjP,AjBxFkhD,CAAC,CyBqEphDkC,ARmBUA,EqBdT,CbLOmE,AjBOV,AanCElJ,ArBzCmhD,CAA39C,CiBwF9C+E,ATZZ,CSYkBlC,AI/CLkJ,KAAX/L,GHGKkC,SAAQ8C,COyBC6G,KAAN3C,EAAa,CPzBC;AoB+BtB,AOiCF,A3B/DC,AuB8CF,AhBtB0BS,ARiBtB,ASpBD,AlBUF,AarCC,AFiEA,AnBxG2hD,IyC2FvhDiO,GxBNI/Q,AI9CR,CJ8CC,EQhBuB8C,AjBOzB,CqCgCA,A1BJQ,AnBxG0hD,CQ4EliD,AR5EmiD,CkB6C3hDvC,AGHA,AF8DP,GX5BD,AR5EkiD,CyC2F7hDwQ,AzC3FqD,CyBqEjCjO,EoBuCzB,AJjBqB0E,AhBtBc,CoBuCvBlF,IrChCZ,CAAA,KiCe2B2D,CjCf3B,EAAA,CqCgCA,A3B/DqB,E2B+DO9M,E3B/DpBoH,EAAmBlF,I2B+D3B,EACA,C3BhEQkF,AuB8CyB,CAAN0F,CvB9CQ9H,CuB8CCyS,MvB9CDzS,GAAAA,MuB8CR8H,CAA5B,CvB9CoC9H,CAAAA,EAAAA,EAAeA,OAAfA,EAAA;AsBiGpC,AKjCC,A3BhE2D5E,AuBgD5D,AhBxBwB,ACFrB,AfmDF,AH1CA,AajCEJ,AF8DD,AnBzGwiD,GmB6D1iD,C0BgDC,A1BFA,ERWIyF,AH1CJ,EU/B2DrF,AGFzDJ,CmBmGMmT,AfzEEjK,CPxBiD9I,AV+B3D,CiBP2CJ,AzBrEogD,CkB6Ch/C,AlB7Ci/C,CQ4EhjD,GajCEA,ArB3C6iD,CAAr/C,E6C6G1D,ApBxCUkJ,AJ1BG4C,CwBkEb,ApBxCE/G,EdiDEU,AH1CJ,CAAA,CqCiCA,AxBlEEzF,CV2EqBwF,AH1CvB,CqCiCA,CrCjCA,CAAA,MG0CuBA,CkCTvB,CAAA,ElCSoCA,I6BwBrC,CAA2C/B,I7BxBN+B,CAAUhD,C6BwB/C,EAAmDsG,SAAnD,EACA,C7BzBqCtD,EAAbA,IAA4CxF,QAAAA,CAASwC,eAATxC,EAAnE,CAVD,CAWC;A6ByBC,AtBnGkC,AOyBjC,ARqBD,ASvBC,AlBQF,AahCE,ArB5CojD,KQ4EtjD,EU/BmCgF,CAAAA,CD8C7B,EC9CkE,AV+BxE,AR5E4jD,CAAC,EiB2F5jD,EjB3F2jD,CAAlgD,qBK+E1D;AmCkEC,AKpCD,A3BhE0E5E,AO0BzE,ARqBC,ASvBA,AfoDF,ANzCC,AGJD,AavCK,ArBrC8jD,GyB4BnkD,CA4CA,CJnCK,CVoFDuB,AH7CJ,EU/B0EvB,AV+B1E,CqC0BA4E,C3BzD0E5E,AD+CpE,AN6BFuB,ANzCC,CYYEqD,AThBP,Aa9BK,ArB9CokD,CkB6C3/C,AlB7C4/C,GWyH7jD,ANzCH9E,CwC6BV,A7C7GykD,CKgFxkD,AgBlCU,ArB9C+C,CiB4FnD8E,C4BUG,A5BVKuC,AZZD,CGJd,CqCiCA,ArCjCA,Aa9BexI,Ib8Bf,Ca9BW,Cb8BX,Aa9BW,CiB+BF,ErBeP,EAA0B,KN6B5B,EACA,kBU5EiD+M,KAAtC,CAAN;AiBgCF,AEoEF,AKpCA,A3BjEuE,AJMlE,AWsBN,ARoBG,AN8BF,AN1CA,AGLD,AWgCA,AnB5GglD,MwCkJ3kDrI,ArBtCDwB,CD/DImC,E2BiEFpH,A3BjEgF,AJMvE6G,CNyBf,C8BEQkL,AtC9E8kD,CwCkJjlDtO,AhCtEL,AR5EulD,CwCkJ3kDsQ,AnCjEJ,AGLR,CU/B2F/T,CoBiCxF,ArBcyB,CAEzB,AjB9FmlD,C6C8GrlD,ArClCD,AR5E0D,CsC8E3C,AjCGFY,CGLb,CqCkCiB,A1BFbqE,CAAevD,CmB9BhB,ApBjCK0F,AJMF,CINL,AJMK,C+B2DerH,G1BFjBkF,CLzDE,EACP,AKwD6BlI,GqBsCvB0G,CnCjEG,CAAsB,ImCiEQ,CnCjEHrD,CwC6BlB,CAAaJ,AxC7BA,GAAU,CAAV,GAAc,CwC6B3B,AxC7BT,CwC6BP,AxC7BA,Qc2BD,EqBsCC,ArBtC+C,EqBuC/C;AFpEE,AEqEA,AtBtGF,AJMF,AWxBC,ARmEG,AZbF,AGND,Aa5BA,AF6DC,AnB7G4lD,McmD9jDyD,ANyB/B,CiBFK,EJ1BE,Cb4BP,C8BGQuO,AEqEE,Af1EDvP,AzB1E0lD,CcoDpmD,AdpDqmD,CQ4EpmD,E8BGG,AEqEA,A1BhGJ,ANwBC,CAAA,AR5EmmD,CAAziD,CsC+E3C,ExB3BhB,AWsBUA,CXvBsBgB,AWuBZoI,AjBEnB,C8BGG,IbLMpJ,CXtBV,AWsBM,EACL;AaKG,AEqED,AKrCD,A/B5DF,AsBmCA,AXXEsC,ACNC,AfsDD,AHhDD,Aa3BCnH,ArBjDymD,IoCuF9lD8S,AftCX9S,EPEsCiF,AWyBtCkC,EoBoCIoE,AxB/DJvL,CPGF,COHEA,CiB+BOkU,AbJP/M,AzB5E+mD,CcoDjnD,AYkBOb,A1BtE2mD,EyB4EvmD2H,AJ5BH,CiBgCJ,CtChF6mD,CcoDjnD,AdpD2D,CsCgF3C,AxB7BwBhJ,CwB6BpC,AbJFkC,EXxBF,AsBmCA,CSyBMoE,ETzBN,ESyBwB,KAAKnJ,KTzB7B,GSyBwB,CAAca,MnB1CXgL,ImB0CH,CAAyB1C,AnB1C1CjF,CAAJ,EACA,WmByCqB,CAAtB,EAAgE;AP/B9D,AOgCD,ATrBF,AXfChC,ARmBC,ASxBC6C,AfqDF,AU3EAC,AF4DA,AnB9GsnD,IqBkDtnDA,EI2BA9C,EdgDI,CAAClC,CM7BEsG,ASxBLvB,CYSKkN,AOgCD9I,ATrBP,Af1CCnE,ArBlD4nD,CyB6E5nD9C,AzB7E6nD,CqBkD7nD8C,EI2BS8G,ACLP/G,CYSA,AtCjF0nD,CW6HvnD/E,CerDKkJ,AfqDIvH,AX7HonD,CsCiFnnD,ArBeR2E,CQnBPpE,AJ7BM,CiBiCJ,CrBeiBkE,AN6BdpG,AX7HunD,CW6HzmD,AX7HsC,E6CiHxD,GAAsBmJ,ATrBxB,CAAYvL,IAAZ,EACA,AzBgCMoC,CAAL,EACA,CetDgB6L,GmByCf,EnBzCS3C,CTwBsBlE,CSxBT3E,MTwBS2E,CAAQuC,ESxB9B2B,EAAwBlJ,OTwBfoG,CSxBT8C,CTwB2ClJ,ASxBnD+E,QTwBmD/E,CAASA,QAA3CoG,CAAlB;AqBdA,AEqED,AKrCC,A/B7DF,AsBwCA,AVvBE,AfyDA,AHnDF,AazBCpG,AF4DA,AnB/GwoD,IqBmDxoDA,EiBiCA,AEmEMgU,A1BlGH,CAACvQ,CsBuCauB,A5BjBPX,AWoCNW,COzCH,E1BtE6oD,CqBmD9oDhF,ArBnD+oD,CcqDhpD,COFCA,CPGD,AsBuCA,AVlBE,APoCGgF,CAAQ5E,AnB/GkoD,CQ4E/oD,AR5E0D,CoC6F1D,AjBkBC,EXnCD,AWmCiB,GqBwCV4T,ChC3EP,EgC2E2BL,CJ1D3B,CAAA,EI0D2BA,CAAKM,CnCnEpBrT,E+BSZ,ClB7CeoE,EkB6Cf,CAAA,IAAA,ElB7CwB,MbqCxB,C+BQA,CAAA,CAAA,CAAA,II0D2B2O,CAAiClQ,AJ1D5D,MI0D4DA,CAAOyQ,EJ1DnE,GAAA,SI0D4DzQ,AJ1D5D,CAAA,CI0D2BkQ,AJ1D3B,CI0DC,AJ1DD,GAD4B,EAC5B;AERC,AEoEA,AtBxGA,AJMA,AsBsCD,AXdC,ARkBC,ASrBC5O,AfoDD,AN1CD,AGTA,Aa7BM,AFgEL,AnBhHopD,GqBgDtpD,GmByGO/E,EJ7DyBA,A5BfzByE,EiBEFuH,ARkBC,ASrBHjH,CZrBK,AG0CDuB,AjBjGqpD,CmBgHppD,AnBhHqpD,CkBiDrpD,AJMP,AT+BO1F,AGTD6D,CgC4EAzE,Cf1EN,ACHE+E,CUiBH,A5BhBeX,AWmCH3F,AnBhHgpD,CwCyJ1oDkV,AfzEjB,AzBhFyD,CkBiD7CzR,AQ2BF,CUiBX,CnBIE,ASrBC6C,Cc6Ee4O,CAAKQ,AvBxDL,EChDV,CAAY,CV4BL/P,CAAWC,C4BgB1B,CAAA,A/BPQzD,C+BOR,A/BPyB,C+BOzB,IlB5CQ,AbqCsBV,Ac0BtB,CXnCOkE,AWmCQ,CD/DSY,AbqCP,AGTxB,GHSkC,CAAV,CmCmEP2O,CAA0BK,CtBxGpC,AbqC+B,CarCtC,EC+DO,CAAN,Cd1B0C5T,EAAL,GAAU,CAAV,GAAc,CAA7CQ,CmCmEU+S,AnCnEjB,CmCmEA;AFnEA,AO8BA,A3BlEA,AJMA,AWyBC3O,ARiBC,ASrBA,AfoDD,AN1CD,AgBlCD,AF4DE,AnBjHiqD,EqBuDpqD,GFqDiD,CdnBhD,AcyBC,EMjCCA,CoBmCIgV,E7CpHmqD,CAAC,CWiIjqDzU,CkCbR,CpBnCCP,CzBjFuqD,CAA/mD,CyBiF7C+G,KAAX/G,cdgDOO,CAAyBN,cAAzBM,EAAyC,QAAzCA,EAAmDvF,QAAnDuF,CAAP;A2B1CD,AEmEA,AKrCA,ATxBD,AXXEvF,ARiBC,ASrBD,AfoDA,ANxCF,AGZC,AwC3EF,AhDHirD,I6CmGhrD,ATNA,EI6DKA,EfxEHA,AjBJGyE,GR9EirD,CAAC,CQ8EtrD,CgC4EIzE,ChC5EO,CiBIVA,AzBlForD,CAA5nD,CwC0JzC,CJ7DjB,AXXagM,CWWb,EI6DC,EACA,AJ9DD,AXXEhM,EWWF,iBAAA,CAAA;AELC,AEoEE,AKxDH,A/B1CA,AWqBC,ACAA,ArBYD,AGZEwE,AavBH,ArBxD8rD,G0BmB7rD,CA6DA,EZtBIf,ANqBFe,CiBAD,Ie6ES,AxC5JyrD,Cc0D/rDf,ANqBFe,AR/EksD,Cc0DzrD,AW2BV,CX3BGf,C0BkGD,A1BlGCA,CNqBQgB,AR/EurD,CAAzoD,Gc0DxC,CNqBhBD,EMrBF,EACA;AwB8BC,AEoEC,AKxDF,A/BzCC,AsBiCD,AXPExE,ARcA,ASnBF,AfmDC,AHpDC,AWmCD,A6B9GF,AhDL2sD,GwC+I3sD,CAgBE,IfzECA,Ad8CK0F,CyB1CPwL,CtB9BO,AGwCDlM,CEeE,AnBnHwsD,CAAC,CmBmHhtD,CLvDUjG,AsBiCX,EXPEiB,AzBtF8sD,CoC0FxsD,AnBUFgF,AjBpGoD,CiBoG5CwC,CHxCP,AW0BMuE,Ad8CNrG,CGxEA,EHwEc1F,Ec9CnBA,IWOF,EzBuCqBA,CMhCnB,ANgC4B2B,EM/B5B,EN+BmB3B,CAAc,IOhFfgF,IPgFChF,CAApB,IOhF4B,8BJQtB,CAAN;AwB8BA,ApBrCA,AJQA,AsBiCA,AXPC,AReC,ASnFH,AlB8DC,AWmCA,AnBpHstD,GmB6DxtD,CAyDC,GOpCK,EUYCpC,EVZG6E,A1BlFotD,CiBsGptDgF,AjBtGqtD,CkBqDttD,AkByCP,GAAY7J,ApC9FgtD,CAAnqD,CkBqD7CsE,EkByCZ,AVZQO,CAAUoJ,GR7BX,CAAY,CQ6BXpJ,CAAJ,EACL,WR9BQ,EAA6BuC,IDiD5ByC,GCjDD,ADiDsC1G,CCjD7C,iBDiD6CA,IAAsB2G,qCAAAA,CAAsCzC,cAAtCyC,EAAsD1H,QAAAA,CAASe,kBAATf,EAAtD0H,EAAqF1C,OAAAA,CAAQuC,WAA7FG,EAA0G1H,QAA1G0H,CAAjE;AqBXF,ApBrCA,AkByCA,AXrBI,ACUJ3C,AfkDA,AU7EF,AF8DC,A6BjHD,AhDNquD,IqByD/tDkH,CIiBA,CCUJlH,EfkDIW,CyBvCCV,EXND,ACLJD,A1BpFyuD,CqByDruDkH,ArBzDsuD,E0BoFluDJ,CL3BO,CesCf,ApC/FyuD,CyByF/tD,AzBzF+C,EoC+F1C7G,AVXfD,AfkDA,Ec7Cc6D,Ad8Cd,GU9EIqD,EesCJ,IXNU,CAAc,CJhCT,CAAA,CAAA,EAAA,+EIgCL,CAAN,CAzEN,CA2EC;AaCC,AEoEA,A1BjGD,AsBiCC,AnBOE,ANiCD,AHrDF,Aa1BgB,AF+DhB,AnBxHivD,MwCgK1uDhH,G1BjGP,AsBiCMjF,A5BbCwE,Aa1Bc,CAAA,CrBzDkuD,CiBuGhvDiD,AjBvGivD,GQmFxvD,CRnFuvD,CoCgGtvD,AfvC2BpG,ArBzD8B,Cc+D5CoC,AONO,EmBuGdwB,AJhEUjF,GIgEO2T,AnBvGH,CPMrB,G0BiGwBA,CAAKS,A1BjGNvR,AsBiCtB,E/BHD,CS9BuBA,GAAM,AONR,GAAA,OPMkBA,EGwCpC,CHxCoBA,CGwCoB,AI9CtB,EPMwB,CONxB,CPMrB,CAAA,G0BiGwB8Q,CAAkClQ,CnBvGrC,CAAOpC,CAAP,CAAA,EmBuGGsS,CAAvB,GnBvGiC,QAAlB;AiBoCf,AEoEA,A1BjGD,AsBkCC,AnBMGlQ,ASlBH,AfmDC,AN5CF,AGTA,Aa3BD,AFgEC,A6BjHD,AhDR+vD,CqByD/vD,KmBwGQ4Q,GJ/DDnH,CnBMFzJ,ASlBCsI,ArBOL,CL7FowD,CAAC,GoCkGpwD,AVZA,ArBOD,CmCoEOsI,AvBzDH5Q,AjBxGgwD,C0BuFnwD,A1BvFyD,CoCkG3C,A/BLf,CmCoEoBkQ,AvBzDPlM,GmBNM3J,A/BLnB,CmCoEoB6V,CAAKW,IJ/DV,CAEbtQ,kBAAAA,GACA,GnBGEP,GuByDgBkQ,CAAsC3T,QAAAA,CAASuU,aAATvU,EAAtC2T,EAAgE1O,cAAhE0O,CAAnB,CAlBF,CAoBE;AFpEA,AEqEA,ACvDF,ALPG,AXVF,ARWG,ASfD3O,AfkDA,AQhBF,AnB1H2wD,IyC6GtwD6S,EhBjBD3V,ECJF8C,CUYAhB,AnBGC,EwBME6T,AzC7G4wD,CoCsGvwDxU,AXVNnB,AzB5F8wD,EyC6GnwD,CxBJL,ASjBR8C,C1BxF+wD,CyB4FlwD,AzB5F2C,C0BwF9C8G,IeqBW8D,CfrBrB5K,GmB+BIpH,C3B/DCoH,K2BgEP,ApB5BA,EAAgC,EPpChB,YkB4CdhB,EKSa,CLPuB,EKOF2T,ELXrB,EAKb,IALa,CAAd,CALD,CKgBe,ALHd,GKGiD,GAAnC,GAAyCJ,SAAzC,GACbK,aADa,GACG,KADH,GACWD,WADX,GACyBC,aADzB,GACyC,GADzC,GAC+CF,UAD/C,GAEb,KAFa,GAELpU,qCAFK,GAEwB,IAFxC,EAIA;AHjBE,AOyBA,A3BhEA,AuByDF,ALPE,AXdApB,ARaGuB,ASjBFzD,AfkDA,AN7CD,Ac6BD,A6BlHD,AhDTyxD,GoCuFzxD,CAEC,AXICkC,ICJClC,EDIDkC,ARaGuB,AZZGzC,CL9FuxD,CAAC,CkByDvxD,AOoCE,GRaNyC,ASjBFzD,A1BzF4xD,CK8FvxDgB,AL9FmD,CkByD7CkB,CDiDGoE,ASjBHyF,CrBKI,IarCT,AQgCN/L,CRhCkB,AbqCEiB,GoBDrBiB,ARaG,GAAA,GCjDI,ADiDQoE,ECjDetB,AbqCd,CYYYjE,AZZK,KAAKH,CarC/B,CAAP,WDiDe0F,GAAZ,AZZa,GYYDA,EZZ4C,CYYTe,IZZcpG,WAAL,CAAiB,KAAKC,CYY/BmG,CAAuBpC,cAAvBoC,EAAuC,eAAvCA,CZZ0B,CYY8BrH,CZZ/C,CAA3C,IAA0G,EYYxEqH,AZZlD,CYYG5D;AqBTH,AEoEA,AK1CA,A3BjEA,AuByDF,AhBvBC,AReI,ASrBH,AfsDC,AN7CD,Ac6BD,AnB5HqyD,GyB4FryD,GeyEK4Q,Cd/EJ,EDQM,CoB6BF4F,C7C3HsyD,CAAC,CyB8FjyD/X,ACFV,ArBGOlB,GmCsEHqT,AxCrKsyD,CAAjvD,EyB8F/CnS,CeuEQmS,AnCtEXrT,CAAQG,GoBDM,ApBCdH,CAAY,CwC4BfiZ,GAAmBpQ,CL0CLwK,CAAWG,GfvEvB,CpBCa,CoBDc,ApBCd,EAAA,wBmCsEDH,GAA6C3S,MAA7C2S,EK1CoCzW,CL0CkB,CAAxE,EACA,AK3CuBiM,KAAwC,EAA/D,CAHD,CAKC;AP3BA,AEqEE,AKzCF,AJVF,AhBrBE3H,ACFClC,AfgDAyF,AN9CkB,Ac8BpB,A6BnHD,AhDVmzD,IyB+FjzDvD,Ed8CCuD,E6B0BK4O,Ad1ELrU,EDEDkC,CzB/FuzD,CAAC,CyB+F/yD,EpBAe,CqBFvBlC,A1B7FszD,CAA9vD,CwCuKnDqU,CAAWI,Ad1EL3I,ArBEgB1K,GM8C3BqE,Cc9CDvD,CCFClC,CfgDmBhC,AN9CI,CAAWqD,CAAX,EAAA,KAAA,CAAL,aM8CaoE,U6B0B1B4O,EAAJ,EACA,E7B3BkBrW,EAA8B0H,WAAAA,CAAYlD,eAAZkD,EAA9B1H,CAAnByH,CAND,CAOC;A2B3CD,AEsEI,ACpDN,AL9BA,AXSE,ARYE,ASdD,AfiDA,ANhDM,Ac+BR,AnB9H+zD,EoCuFh0D,K/BQSzE,CAAP,GL/Fo0D,CAAC,EoCuFv0D,CAAA,AnBqBWsG,CjB5G2zD,CAA3wD,UiB4GhDA,CAAa7D,ImBrBxB,EAAA,AnBqBW6D,CmBrBX,CnBqBgCvC,KAAAA,CAAMlC,GAA3ByE,EAAgCtH,QAAhCsH,EAA0CtC,OAAAA,CAAQiC,eAAlDK,CAAP;AqBRF,AEsEI,AK3CJ,AJTF,AL/BA,AnBsBI,AS3BE,Af8DH,ANhDD,A2CrFF,AhDX60D,IoCuF70D,CVLM,EUKN,EAAA,CSwCM,CAAC2S,AnB/BD,A1BhG60D,CAAC,GoCuFp1D,CpCvFm1D,C0BgGv0D,A1BhG+C,I0BgG3CrR,MmB+Bd,EACA,CnBhCU,CAAc,oFAAd,CAAN;AYKJ,AEsEI,AK1CH,AJVH,ALhCA,AXWC,AdgDE,AXlJu1D,IoCuF11D,KAAA,AXWQ,EWXR,ApCvFg2D,C6CiIz1DhL,A7CjI01D,CwC2Kp1D,GK1CNA,A7CjIy1D,CwC2K11D,AxC3KqD,G6CiI5CA,AT1Cf,IS0CeA,AT1Cf,CS0CoBU,ETnBnB,KSmBcV,CAAa,GAAbA,KAAqB,CAAjC,EACA;AP5BD,AEsEG,AKzCDqc,AJXJ,ALTE,AXZAlV,ARWC,ASZF,AfiDE,AQpBF,A6BnHD,AhDZu2D,IyBmGr2DA,EN4BGE,GM5BHF,ACDM,CmBiCJkV,ATpBIpW,CXZNkB,AzBnG22D,CAAC,CiB8G32D,GQZK,AzBlGq2D,CoC+Gr2DlB,ApC/GmD,CiB8G9CyC,EmBCK,AjBgBbrB,CAAevD,IiBhBGwL,CSoBnB+M,C5BrBD,AEiBEhV,E0BIkB,C5BrBElE,AEiBI/D,CiBhBX,CSoBdid,ATpB0B9P,IAAZ,CAAiB,KAAKvM,IAAtB,CAAhB,CnBDC,GAA2CqH,QEiB7C,EAAgD,IFjB9C;A4BsBC,ApBhCF/C,ACDA6C,AfiDC,AQpBD,AnBhIk3D,IyBoGl3D7C,ACDA6C,IP6BIC,CO7BJD,CDCA7C,CCDA6C,A1BnGw3D,CyBoGx3D7C,AzBpGy3D,GkBIt2DyG,AC4Hf3D,CO9BE,AP8BM5E,AnBhI42D,CAA/zD,CyBkGnD,AN8BN,EAAgB,iBd7BjB;AmC2EG,AKzCD,AJZH,ALRE,AXZA4E,ARWA,ASZAA,AfiDC,ANjDD,Ac6BC,A6BpHH,AhDbi4D,IyCyH33D8S,AhBpBJ9S,ACDAA,GmBoBD,CLsDO0P,AKvCN,ETtBI,CAAC7Q,AXZLmB,ACDAA,A1BpGq4D,CmBiI93D,AnBjI+3D,CyBqGt4DA,ACDAA,ArBAO,Gc6BIvG,AnBjI03D,CAA50D,CoCiHzD,A/BbYmC,E+BaE,AXfR,ACAA,Gc4EA8T,CAAgBC,KCrDlBmD,GAA4B,EpCrBzB,CAAsB,Ac6BtB,CsBR6Bha,AtBQd,Id7BYoC,EoCqBF,ApCrBH,CoCqBG,EpCrBO,CAAV,Ac6BtB,CAAN,Ed7B0C,CoCqBKiO,IpCrBA/N,CmC0E1CsU,CACAL,AnC3EqC,EoCqBX,CpCrBqB,CAAV,CoCqBW/F,EpCrBG,CAAlD,CAAP,CmC2EM+F,CAAWG,ECtDe,GAAA,MAAA,CAAlC,mBDsDQH,EADAK,CAAJ,EAEA;AACE,ACtDN,ALTG,AXZD1U,ARWC,ASZDA,AfiDC,ANjDD,Ac6BC,AnBlI24D,IyC2Hx4DyW,AhBrBJzW,ACDAA,CP0B+C,CAI/C,KnBnIk5D,CyBsGl5DA,ARWO,ASZPA,A1BrGm5D,EyBsGn5DA,ACDAA,ETYWjB,AjBjHu4D,CAAz1D,IiBiHlD,CwBUH0X,AxBVG,GwBUkB,OAA3B,kDxBV6EvU,MAApE,GAAA,GAAA,CAAN;AuBiEG,AtBrHN,AuBgEA,ALVG,AXjBK,ARvCP,ASuCO,AfqDL,AqCzIH,AhDd25D,GyBkG15D,ACAA,CRrCK2G,AuBgEAkP,OzC7H25D,CAAC,CwCkLr5D,GxClLo5D,CwCkL35D,AtBrHAlP,AlB7DqD,GkB6DrC,AuBgEhBkP,GAAmBtY,MvBhEnBoJ,AuBgEmBpJ,CAAOsY,YvBhEV,CAACnT,GuBgEEnF,EvBhEH,EAAA,AuBgE8BuY,IAAAA,CAAKC,GAALD,CAAS,CAATA,EAAY,EAAZA,IAAkB,CAAtE;ADsDK,AK3CH,A3B3EoB,AuBkEtB,AhBvBC,ARWA,ASZA,AfiDE,AXxJq6D,EyB0Gx6D,ARWA,ASZA,Gc6DE,CAeE,GtBxH6B,C2B2E3B,CAAC8B,A7CxIu6D,CAAC,IAAD,CAAn3D,KkB6Db/b,IAAb,CAAkB6G,KAAlB,CAAX,e2B2EfkV,CAAsC/b,IAAtC+b,CAA2CG,gBAA3CH,CAAL,EACA;AACC,A3B7EH,AkBwDE,AXVF,ARWA,ASZA,Af+CG,AQrBD,A6BnHF,AhDjBq7D,CkB6Dr7D,SkBwDMrW,CjBeG,AnBpIk7D,CAAC,CmBoI17D,E0BMQ,CTrBJA,ApCrHq7D,CAAh4D,EoCqH1CI,CSqBFqW,MTrBErW,CAAQ,CAARA,CAAf,ISqBC,oBxCnC+BjD,kBACjC;AwCmCE,ATrBD,AnBCF,ANmCG,ANjDD,Ac4BA,AnBrIg8D,UoCsH57DuQ,CpCtHk8D,CAAC,CKyGh8DvQ,EiCjGYiR,CtCRm7D,CAA74D,CoCsHrDV,GAAWtN,OAAAA,CAAQsJ,A/BbhBvM,CAAiB,I+BaxB,C/Bb6BV,EAAL,GAAU,CAAV,GAAc,KAAKE,EAAL,GAAU,CAAV,GAAc,CAA7CQ,CAAP;AmC6EE,AJ9DF6C,AXZF,ARYA,ASbA,AfgDE,ANjDA,A2CxFF,AhDlB+8D,GWyH98D,CAmCA,EyBpCCA,A/BZD,EmC0ESmR,GxCtL28D,CoCwHn9DnR,ApCxHo9D,GoCwH38DA,CpCxH08D,CAA15D,GwCsLjDmR,CJ9DCnR,CAAOlB,CI8DOmS,MJ9DdjR,CAAe6M,QI8DDoE,CAAgBG,mBAAhBH,CAAoCjR,MAAAA,AJ9DlDA,CI8DyDqR,CJ9DL,EAApDrR,CAATA,OI8D2DA,EAApCiR,CAArB,CAhBF,CAkBE;AACA,AK5CF,ATpBAvD,AzBAD,ANZA,Ac0BA,AnBvI29D,MoCyH19DA,AjBcGnM,CRsBC,IAAIrD,AX7Jw9D,CAAC,C6C6I19D,A1BNJqD,CiBdHmM,AjBcW/Q,CRsBHuB,CQtBT,AnBvIi+D,CAAv6D,C6C6I7CwY,ATpBAtW,AjBeb,CRqBiB,CAAC2B,KyBpCL3B,CAAQ,CAARA,CAAAA,CAAWnC,AzBoCnB,CkChBG,CAAkBgD,AlCiB1B,IyBrCab,GAAoBJ,MAAAA,CAAO/B,MAAvCyP,CAXD,CAYC,mBSmBoD8I,gBAA3BvV,CAAlB,CAAP;AACA,ATnBA,AzBoCA,ANjDD,Ac2BC,A6BrHF,AhDpBy+D,QmByIj+D+E,GnBzIu+D,CAAC,CW+Jv+D,GX/Js+D,CAAp7D,EmByInDA,GAAc,IAAId,GRsBxB,iBQtBoB,CACnB5H,kBADmB,EAEnBkE,cAFmB,EAGnBjF,QAAAA,CAASA,QAHU,CAApB;AqBiDE,AJ9DF,AXfF,ARYO,ASbP,AfoDE,AXhKo/D,IyB6Gh/DyC,ARYOkF,ASbPlF,Oc8EKkR,AxC1Li/D,CAAC,CyB6Gv/DlR,ACDAA,Ec8EKkR,CAAKoB,Af7EE,ACDA,A1B5G0+D,CAAj8D,MiByH9CpN,EQZPlF,ACDAA,CTa6B,QQZjB,ARYX,ASbW,CDCA,ACDA,CDCA,ACDA,EDCA,ACDA,gBc8EPkR,CAA4CiB,YAA5CjB,EAA0D3T,QAA1D2T,EAAoE,IAApEA,CAAP;AACD,Af9Ee,ACDA,APmChB,A6B1HF,AhDrBmgE,QmB+I7/DjT,CMlCiB,ACDA,CDCA,ACDA,C1B5Gk/D,CAAC,GmB+IxgE,CnB/IugE,CyB6G3+DW,ACDAA,APmCf,AnB/I4C,CyB6GpC,ACDA,KDCA,ACDA,WDCA,ACDA,GDCA,ACDA,WDCA,ACDA,GDCA,ACDA,ODCA,ACDA,CDCOA,ACDAA,CDCP,ACDA,CDCA,ACDA,MDCa,ACDA,QDClB,ACDA;AUiBhBoC,AXhBF,ACDA,AfsDC,AQlBEgG,AnBhJ6gE,CyB6GhhE,ACDA,KUiBEhG,AzBqCKkC,AQlBJ8D,KnBhJmhE,CoC6HphEhG,ApC7HqhE,GoC6H5gEA,CpC7H2gE,CmBgJnhEgG,AnBhJwD,CmBgJ5C/I,CRkBRiF,EyBrCIlC,CAAOlB,AzBqCK0C,GQlBpBwE,GAAsB/I,CiBnBd+C,CAAe8M,GSmBZxL,E1BAX0E,CRkBoBxE,CAAevD,GkCjBrC,GlCiBA,CAtDD,CAwDC,eyBvCU+B,EAA+C,EAA/CA,CAATA;AIgEA,AK3CA,ATnBAA,AnBJK,AN0CN,AQpBE,A6B3HH,AhDtB6hE,MoC+H3hEA,GI8DO,AvBlEOmE,EjB3HmhE,CoC+HjiEnE,ApC/HkiE,CwC6LliE,EJ9DS+J,CpC/HwhE,EAAM,IAAN,EAAW,IAAX,CAAx+D,eiB2HpD,CAA6C/J,EmBIvBA,InBJtB,AZXN,E+BeU+J,AnBJiDtL,CmBI1DuB,KnBJK,EAA6DoE,sBAA7D,EAAqFC,sCAArF,EAA6H9H,QAA7H,EACP;AuBkEC,AK3CC,ATlBA,AnBJD,ANyCA,ANrDC,ALjHkjE,MiB6H7iEkH,ImBIC1C,CpCjIkjE,CAAC,CKiHljE,G+BgBDA,ApCjIkjE,CAA//D,CKiH7ClD,C+BgBG,EnBJV4F,GmBIekK,AnBJG3N,MAAAA,CAAOlB,OmBIf,AnBJQkB,CmBIYA,AnBHnC,IAAI3F,EmBGW,EAA4BqT,EnBH3C,CAAWjP,AZbJ,CAAsC,I+BgB9B,CAAf,AnBHWA,AZbuCtB,CYahCyE,OAAPnD,EAAX,CADuBuB,EAEvBoE,GZdO,KAAgE,KAAKvG,SYc5EuG,GACC3F,MAAAA,CAAO6F,aZf+D,CAAsC,KYe5G7F,AZfiHhB,EYclH2G,GAEC3F,MAAAA,CAAOE,sBZhBqG,EAAtC,CAAvE,GYgBCF,OAA0C,CAACA,MAAAA,CAAOG,sCAAPH,EAAD,IAAoD4F,sCAA9F5F,IACCA,MAAAA,CAAOA,MAAPA,GAAgBK,OAAhBL,CAAwByF,mBAAxBzF,EAA6CA,MAAAA,CAAOE,4BAAPF,EAA7CA,CADDA,GAECA,MAAAA,CAAOA,MAAPA,EANqBuB,CAAxB;A4BuBC,AlCmBD,ANrDC,AcgCA,A6B1HF,AhDxBikE,IyCyI5iEyU,ItBSf3O,GnBlJikE,CAAC,IAAD,CAA5gE,EmBkJzD,EAAiB;AqB8CZ,AK3CL,AJEA,ALpBA,AnBGD,ANkCA,AQrBEE,AnBnJ2kE,MiBsIzkE5B,AEaF4B,GqB6CayJ,CK3CVnO,ATlBAP,CpCnI8kE,CAAC,G6CqJ/kEO,CAAM,ATlBV,ApCnIklE,C6CqJ9kEA,A1BFH0E,AnBnJwD,C6CqJrD1E,ATlBQ,AjBgBCwE,K0BEI,GAAjB,EACA,A5BhBD,CEaEE,CFb0B,EEaAF,WAA1BE,MqB6CI,CAAkDhG,MAAlD,EAA0DgK,SAA1D,EACP;AACE,AK3CC,ATnBA,AnBGD,ANkCD,AQrBE,A6B1HH,AhD1B2lE,MwCkMnlEuH,KvB3DChN,AjBvIwlE,C6CuJ1lE,A7CvJ2lE,C6CuJ1lE,ETnBExD,CpCpIulE,CAAtiE,C6CuJ9C4V,GTnBV,MI8DKpF,EK3CL,CL2C6BvH,CK1C7B,QL0C6BA,CAAUnP,CvB3DjC0J,CAA+Bd,KuB2DRuG,CAAkB,GAAlBA,CAA9B,KvB3DOzF,CAAP;A4BkBE,ATpBD,AnBGD,ANkCD,AX1KumE,OoC8GvmE,CAyBC,GpCvI4mE,CAAC,G6CyJtmEoS,C7CzJqmE,CAAnjE,S6CyJvD,IAAoB,GAApB,CADD,CAGC,YxCtCH;AmC8EC,AKvCE,ATpBF,A/BlBA,Ac+BA,A6B1HF,AhD3BqnE,MwCmM/mEpF,ErB9CAnS,GAAJ,AnBrJynE,CAAC,CmBqJjnE,GnBrJgnE,CAAhkE,UwCmMrDmS,GAAwB,CAA5B,EACA;AACE,AKxCA,A5BnBH,ANkCA,ANrDC,Ac+BCvL,AnBtJ+nE,MW4K3nE7D,AQtBJ6D,GFZKvC,EjB1IgoE,CAAC,IAAD,CmBsJroEuC,AnBtJwD,CmBsJ5C5G,ERsBR+C,CQtBJ6D,ERsBqBhE,CMlCvB,AEYoB5C,GAAlB4G,YRsBqBhE,CAAiB,CAAjBA,CAAvB;A6B0BG,AvB3DH,AZnBC,Ac+BC,A6B3HH,AhD5B+oE,WwCsMpoE,AxCtM0oE,CAAC,CKwH7oE,GmC8EL,AxCtMipE,CAA1lE,CKwH7C7E,gBAAL,CAAsB,KAAKV,EAAL,GAAU,CAAV,GAAc,KAAKE,EAAL,GAAU,CAAV,GAAc,CAAlD,KAAwD,KAAKmB,cAAL,EAA/D;AmC+EC,AKzCC,ATrBF,AzBqCD,ANrDC,ALzH0pE,GwCiM5pE,CAQE,E7B3BGqE,KX9K6pE,CAAC,CoCyI1pE,ESqBAyU,C7C9JypE,EoCyIppEhJ,ApCzI0pE,EW8KnqEzL,EyBrCI,ApCzIypE,CAAvmE,CoCyIzD,CzBqCsBD,MkChBpB,OlCgBH,EACA;AkChBG,ATrBF,AnBGF,ANmCE,AQvBA,A6B3HF,AhD9B8qE,SiB6IrqE0B,ENmCA,AQvBAoC,AnBzJ2qE,CAAC,IAAD,CAAznE,KmByJzD,ERuBA,OMnCF,CAAgChG,MAAhC,EAAwCwE,SAAxC,EAAmDjI,QAAnD,EACA;AmBvDA,AnBwDC,ANkCC,AQvBA,AnB1JyrE,GoCuF3rE,AjB1BA,CA+FC,CiBrED,CnBwDOkC,KjB/I0rE,CiB+I1rEA,AjB/I2rE,GiB+IlrEgG,CjB/IirE,CAAtoE,sBiB+I3CA,CAAyBlI,QAAAA,CAASgB,OAAThB,EAAzBkI,EAA6CzE,MAA7CyE,CAAf;AuB2DC,AKzCCnD,AT1EH,AjBsEC,A6B9HD,AhD/BwsE,IoCuFxsE,EImHQkQ,CJnHR,CS0EGlQ,CT1EH,EpCvF8sE,CAAC,C6CiK5sEA,GAAQA,A7CjKmsE,CAAnpE,I6CiKhDA,CAAM3G,GT1EjB,ES0EW2G,CLyCHkQ,AKzCe,CAAZlQ,CAARA,CLyC8B0I,SAAAA,CAAUnP,OAAVmP,CAAkB,CnC9ElD,EmC8EgCA,EAAuBuH,qBAAAA,GAAwB,CAA/CvH,CAA/B;AKxCC,AT3EH,AnByDC,ANmCA,ANtDC,AciCD,AnB9JotE,IoCuFrtE,EnByDK,ANmCA7H,CkClCJ,A5BDK1D,C4BoBJ,CT7EF,EAAA,ApCvF2tE,CAAC,CiBgJ3tE,AZnBQ,EYmBK,CjBhJ6sE,CAAhqE,CK6H7CtB,E+BtCd,AzB4FKgF,GAAiBD,WyB5FtB,A/BsCS,C+BeOlC,A/Bfe,CMsD9B,EACA,ENvDmCvD,C+BtCpC,C/BsC+B,C+BePiR,E/BfiB,CAAV,GAAc,E+BtC7C,EAsDC,C/BhBiD/Q,EAAL,GAAU,CAAV,GAAc,CAAlD,CAAP;AmC8EA,AJ7DA,AnBGA,ANoCA,ANvDA,A2C9FF,AhDhCkuE,MwC2M5tE6U,IJ7DA,CAACpH,AnBGEpK,ANoCA,AXrL+tE,CAAC,IAAD,CiBiJtuE,AjBjJyD,KWqLzD,M6BsBIwR,GAAyB,CAA7B,EACA,WJ9DyBxR,MAApBoK,EAA4BsD,QAA5BtD,EAAsC,KAAKjQ,IAA3CiQ,CAAL,EAAuD;AI+DrD,AJ9DD,AnBGD,ANoCA,AXtL6uE,WAAM,CAAC,IAAD,CAA1rE;AwC8MvD,AKzCF,ATrBC,AjBeF,A6B5HD,AhDnC4vE,MmB+JrvEnE,CiBlBN,CAKC,GI4DS,AKzCJ0Q,A1BNA1Q,AnB/J2vE,CAAC,EmB+JpvEhJ,EqB+CX,AxC9M8vE,CAAvsE,ImB+J5CA,C0BMb,G1BNwB/C,C0BMJoH,KAApB,CApBD,CAsBC,mB1BRwCE,cAAhBtH,EAAgCqC,QAAAA,CAASmF,qBAATnF,EAAhCrC,CAAX+C,GAA+E,IAA/EA,GAAsF,KAApG;AqBgDE,AKvCD,ATrBA,AnBAD,ANqCA,AXxLwwE,GwCiMzwE,CAgBE,E7BzBG+E,GMrCGmC,EjBnJuwE,CAAC,IAAD,CAAptE,KWwLtDnC,CAAiBA,gBAAAA,CAAiB/D,IMrC/BkG,CAAoCnE,CNqCtBgC,GAA0B,CAA3CA,CMrCGmC,ANqCHnC,EMrC+CvD,CNqCCyD,KMrC7CiC,EAAoDK,IZlB3D,EMuDA,EACA,CMtC2DA,KAAc,eAAlEL,EAAmF,IAAnFA,EAAyF5H,QAAzF4H,CAAP;A4BuBC,ATtBA,AnBAD,ANsCC,ANxDA,Ac+BD,A6B7HD,AhDpCsxE,MmBiKjxE,CAAC5C,IRyBG,AX1LmxE,CAAC,CKkIpxE,CAAC,Ac+BJA,Cd/BK,Ac+BG2E,CnBjK8wE,CAAjuE,GKkI3C/I,CMwDd,EQzBD,EACA,WdhCU,CAAsB,KAAKV,EAAL,GAAU,CAAV,GAAc,KAAKE,EAAL,GAAU,CAAV,GAAc,CAAlD,CAAT;AoCYA,ALOA,AzBsCA,ANxDA,AcgCA,AnBnKiyE,GW4GnyE,CAiFC,ENxDA,Kc8BQsJ,AnBnKgyE,CAAC,ImBmKjyEA,AnBnKgyE,CAA9uE,EmBmK1ClF,MAAAA,CAAO9D,OAAP8D,EAAgBS,cAAhBT,EAAgC3B,GAAhC2B,CAARkF,GAA+C,EAAtD;AqB+CA,AKvCA,AJLA,AxBhBK,AZhBN,Ac8BC,AnBpK8yE,MwCkNxyEwL,GvB5DQhN,E4BqBTjD,AJLL,AzCtKozE,CAAC,IAAD,CAA3vE,Q6C2KzD,ILuCMiQ,AKvCiBnQ,AJLvB,GD6CKtB,AC5CL,CxBjBK,C4BqBL,A5BrBuC0E,C4BLxC,CA4BC,ELsCK1E,CAAOsQ,YvB7DP,EAAqD/N,MuB6DrDvC,OAAkC0R,EvB7DlC,EACP,auB4DyCA,CAAkBC,0BAApD3R,IACGA,MAAAA,CAAOsQ,oBAAPtQ,OAAkC0R,iBAAAA,CAAkBE,6BAF5D;AKpCA,AJPA,AxBfD,AZjBA,ALvI4zE,OiBwJ5zE,CwBcazX,GxBdb,AjBxJk0E,CyCuKj0E,AzCvKk0E,GyCuKl0E,CzCvKi0E,CAAxwE,GiBwJ1D,GAAqBuK,CwBepB,CAAA,MAAA,GAAA,CAAA,IAAA,CxBfD,EAAA,MwBeC,CAAA,CAAA,AxBfD,CwBeC,ExBfD,GwBeC,ExBfD,CAAA,MwBeC,CxBfD,CAAA,CwBeC,QxBfD,CwBeC,AxBfD,CwBeC,CAAA,AxBfD,CwBeC,CxBfD,EwBcoB,CxBdpB,CwBeC,AxBfD,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IACA;AuB6DC,AKtCA,AJTA,ALjBA,AnBGD,ANqCA,ANtDA,Ac8BA,AnBtKy0E,MwCsNp0E+M,EChDmBlQ,AxBbxB,CNqCOS,AQxBA,CiBhBF,CAACwK,ApCtJy0E,CiByJ/0E,AjBzJg1E,GyCuK/0E,CzCvK80E,CAArxE,CyCuKzD,O9BuBMxK,CAAiBnH,C8BvBvB,CAAA,CD+CI4W,IACGR,A7BzBDjP,C8BvBN,A9BuB+BE,G8BvB/B,CAAA,IAAA,ALjBsBlC,KzBwChBgC,C6ByBCiP,AJjEFzE,CIiEkB4E,A7BzBuB,CyBxChB1D,AzBwCxB1L,C8BvBN,CAAA,CAAA,CAAA,C9BuBoD,CAA9CA,EyBxCDwK,CKiBL,A9BuBwD,CyBxChB,KAAKrS,GIiEtC8W,AChDP,CDgD2CjH,AJjEtCwC,EKiBL,ALjBmD,CzBwC7CxK,GAAkE,CyBxChBT,EIiEbyI,CAAUJ,CChDrD,CAAA,CAAA,CAAA,ALjBmD,CAAa1D,EKgB/B,EDiDU8D,AChD3C,CDgD+D,CAApBA,C7BzB5C,C6ByBmEuH,AJjEf,GAAwB,UAAxB,GAAqC,KIiE7CvH,CAApCiH,CJjEFzE,CAAL,EACA,EIiEYqF,MAAAA,CAAO7R,MAAAA,CAAOyQ,cAAPzQ,EAAP6R,CAFZ,EAGA;AACE,ACnDF,ALfC,AzBuCF,AQxBC5U,AnBvKq1E,ImBuKr1EA,IsBDqCV,GtBCrCU,AnBvK21E,CAAC,CmBuK51EA,GsBAA,AzCvK21E,CAAlyE,EyCuKzD,CtBDM,QsBCN,CAAA,CAAA,CAAA;ADoDE,AKzCF,ATzBC,AnBAF,AEeCK,AnBxKk2E,ImBwKl2EA,GiB3BD,CAcC,AnBFD,E4ByBK,CLyCK0M,AxC3N+1E,CAAC,G6CkLh2E6M,C5BzBV,AjBzJy2E,CAA/yE,CiByJ1D,EuBkEU7M,CAAUrP,CrBnDnB2C,EAAAA,EqBmDS0M,CAAgBwH,GKzCrB,EAAJ,EACA,Q1BbM,OqBqDmBA,GAAyB,CAAzCxH,EAA4CnP,OAA5CmP,CAAoD,GAApDA,KAA4D,CAAnE;AACD,AKxCA,AJbD,ALXA,AnBHD,AEgBClE,AnBzK+2E,IyCuK/2E,AtBEAA,MFhBD,CjBzJs3E,C6CoLh3E,A5B3BN,AjBzJu3E,C6CoLh3E,E1BXNA,CFhBD,AjBzJs3E,CmByKr3EA,AnBzKyD,C6CoL9CxI,CJbX,CAAA,IAAA,CxBdD,CwBcC,AxBdD,EEaO,IFbP,EAAA,E4B2BE,EACA,MJdD,CAAA;AIeE,ATzBF,AnBJD,AEiBC2I,A6B7KF,AhDG83E,ImB0K53EA,EFjBD,GEiBCA,CFjBD,CEiBCA,AnB1Kk4E,CAAC,CiByJp4E,GEaO,AnBtK43E,CAAz0E,KiByJ1D,CAAA,EAAA,EAAA,CAAA,iCZfA;AmCoFC,AKtCE,AJjBF,ALTA,AnBLD,AZdC,AcgCAE,A6B7KF,AhDE24E,ImB2Kz4EA,CFlBD,IuBqEQ,AClFPsH,ExBaD,AjBzJg5E,CmB2K/4EtH,AnB3Kg5E,CwC8Nh5E,AnCnFO,CoC4BP,AtBIWF,EnB3Ko4E,CyC4Iv4E,AzC5IiD,CK2I7ClI,CcgCDkI,GAAQ,IAARA,EsBJX,CtBI2B1E,OAAAA,CAAQ2E,QAAR3E,KAAqB,IAArBA,IAA8BhF,EdhClD,CAAgD,KAAKY,AcgCHZ,CAASwC,edhC3D,AcgCkDxC,EAA9BgF,Gd/B1B,Cc+BsFe,Id/BjFvE,uCc+BoGyD,Gd/BzG,CAAgD,KAAK/D,Kc+BiC6E,EAAmChF,kBAAAA,KAAuBV,Id/BhG,EAAhD,CADD,EcgCuF0F,EAAqE/F,QAArE+F,CALjF;AqByDP,AKtCG,AJlBF,ALRA,AnBND,AZZC,Ac+BAb,A6B5KF,AhDAw5E,ImB4Kt5EA,EFnBD,EAAA,CwBVCiT,AtB6BAjT,EFnBD,AEmBSD,AnB5Ko5E,CAAC,E6CyLv5E,CAAC,C7CzLq5E,CAAn2E,G6CyL7CA,AJlBZ,AxBdD,CAAA,EwBVe,CAwBd,CxBdD,AEaO,EFbP,O4BgCG,EACA;AACC,AJpBH,ALPA,AnBPD,AEoBCpC,A6B5KF,AhDDq6E,ImB6Kn6EA,GAAAA,EsBxBAmQ,AtBwBAnQ,CFpBD,CjBzJ06E,CiByJ16E,AjBzJ26E,CiByJ36E,GjBzJ06E,CiByJ16E,AjBzJ0D,EiByJ1D,CwBcC,GAlBc,IAAI2P,oBAAJ,CAAgB,EAAhB,CAkBd;AD0DF,AKrCK,AJpBDxN,ALPF,AnBRD,AEaO,A6BpKR,AhDFk7E,GmBsKj7E,CsBEGA,ExBfH,GuBwEQoO,CvBxER,CwBeGpO,AzCxKo7E,CAAC,CiByJx7E,CwBeGA,CxBfH,CAAA,AjBzJu7E,CAA73E,E6C4L/C,E5BnCX,CwBeGA,CAAAA,CIoBaoV,CJpBbpV,EACKA,OADLA,CDyDJ,AKrCK,CLsCHvB,AC1DE,MDyDJ,EAEEgK,SAFF,EAGEzN,QAHF,EAIEuV,WAJF,EAKEvC,WALF,EAME;AACA,AK3CG,AJnBC7J,ALRJ,AnBTD,AEsBA,A6B/JD,AhDhB+7E,MwCwOv7EqM,AC9DFrM,KIWH,A7CrLk8E,C6C+Lj8E,A7C/Lk8E,KAAD,CAA14E,EyC0KrDA,EAAiBnE,GD8DfwQ,GAAsBC,CC9DPzQ,CAAQmE,MpC1B9B,OmCwF6BsM,CAAgBhI,AC9DvBzI,IAA0BjC,KD8DnB0S,EAA2B,2BC9DWzQ,OAAAA,CAAQmE,cAA3BpG,EAA2C/C,QAA3C+C,CAA1BiC,GAAiFA,OAAAA,CAAQmE,cAAzFnE,GAA0G3E,SAF7H;ADgE0D,AKxC1D,AJrBE6P,ALRJ,A/BlBA,AcgCF,A6B3IO,AhDtCs8E,MyC2Kv8EA,GOrIU7E,EhDtCm8E,CAAC,CKiJ38E,CoC0BH6E,EAAWlL,CzC3Kk8E,CKiJr8EpE,ALjJ6C,KyC2K1CoE,CAAQkL,COrIlB,GACP,IPoIiBlL,EpC1BR,CAAsB,CoC0BMA,IpC1BD9E,EAAL,CoC0BM8E,CAAQ2E,CpC1BJ,CAAV,GAAc,GoC0B5B3E,EpC1BiC5E,CoC0BM,CpC1BX,GAAU,CAAV,GAAc,EoC0B1C4E,ApC1BR,CAAP,EoC0BmE,OAHjE;ADgE0ByQ,AKvC1B,AJrBE2C,ALRJ,AnBXD,AZPC,A2C1GD,AhDxC09E,GwCwOz9E,GC5DIA,AOpIDkG,E/BgHOpc,GjBxJq9E,CAAC,EyC4K59EkW,AxBnBL,EwBmBgBpT,AOpIF,AhDxCk9E,CiByJh+E,AjBzJ0D,EgDwCzC2G,E/BiHjB,CAAA,CwBmBgB3G,AxBlBf,CwBkBuBoT,AOpIF,CAACpZ,OPoIPgG,EOpIC,CAAgB5G,CPoIG2Z,IOpInB,CAAsBnM,IAAtB,CAA2BJ,SAA3B,CAAjB;ARiMC,AKvCE,AJ1BA,ALHF,AY5HD8S,AhDzCu+E,EgDyCv+EA,GP+HGtZ,CDiEE0Q,ACjEF1Q,KzCxK0+E,CgDyCn+E,AhDzCo+E,CgDyCn+EzG,GhDzCk+E,CgDyC7+E,AhDzC0D,CgDyC1CyB,SRgMX0V,GAAwBC,YQhM7B,WRgM6BA,CAAwB3V,QAAxB2V,EAAkClS,MAAlCkS,EAA0C,IAA1CA,CAA5B;AKtCE,A5BxCF,A+BjHD,AhD1Co/E,QiB2J/+EzT,C+BjHEqc,EhD1Cm/E,CAAC,EiB2Jt/Erc,CAAOkG,CjB3J8+E,CAAh8E,kBgD0C5BoW,C/BiHzBtc,GAA+BR,C+BjH7B,CAA6B,I/BiH/BQ,A+BjHE,EAAmCoc,C/BiHG,CAA5C,EACA,M+BlHM,CAAP;ARgMC,AKrCE,AJtBF,AxBlBC,A+BlHF,AhD3CigF,MwC0O5/E/I,EC3DA,CAACvQ,EzC/KigF,CAAC,IyC+KlgFA,AzC/KigF,CwC0OlgFuQ,AC3DSrF,AzC/K4C,CwC0OzClQ,OC3DhB,CD2DIuV,CC3DmB,CD2DG9R,AnCrF3B,MmCqFK8R,EAA8BC,mBAA9BD,EAAmDG,qBAAnDH,CAAJ,EAA+E;AAC7E,AKrCA,AJtBD,ALTD,AnBTC,AZRD,ALtJ6gF,UoCuKvgF/Q,AnBTC6D,CuB6EE,AxC3O0gF,CyCgL5gF,AzChL6gF,CKsJ7gF,EmCqFL,CC3DSO,ALTLpE,ApCvK6gF,CAA19E,CKsJ7C5D,C+BiBGsI,MKSR,CAAc,QpC1Bd,CAAsB,EYQtBb,GmBSc5E,AnBTgBvB,AZRHhC,EAAL,GAAU,C+BiBxBgJ,AnBTsBhH,AZRR,CYQekG,CmBSf,C/BjBc,EoC0BpC,CAAN,CLTiCpD,C/BjBc5E,EAAL,GAAU,C+BiBtC8I,C/BjB4B,C+BiBA,E/BjBe,EAAnD,C+BiByClJ,A/BjBhD,CYQqCkC,GAA+BA,ImBSrDgH,CAAf,CnBToEhH,CAAOkG,qBAAPlG,GAA+BR,MAA/BQ,GAAwC,CAAvEA,CAApC,CAFD,CAIC;AuB4EA,AKrCC,AJtBD,ApC1BD,A2C1GK,AhD7CqhF,GwCuO1hF,CAOA,KQjMcgK,EhD7CkhF,CAAC,KAAD,CAAv+E,iBgD6CpD,GACP;AH0JI,AT/BF,AnBRC,AEqBI,A6BvIN,AhD/CyiF,MgD+CriFoS,G7BuIWzU,CiBbV,AnBRC7D,CmBQAxB,ApCzKyiF,CAAC,IgD+CliF,CZ0HRA,ApCzKyiF,CoCyKliFU,ApCzK6C,CgD+CzCyG,IZ0HhB,CY1HqB,CZ0HF,AnBRd3F,A+BlHiBhH,C/BkHD2E,MAAhBqC,CAAuBqC,C+BlHZ,CAAgBjK,I7BuI3B,CAAwCR,A6BvI7B,CAAsBgO,G7BuIjC,C6BvIW,C7BuImCxL,A6BvIRoL,E7BuItC,EACP,K6BxIkB,CAAjB,I/BkHMxF,MAAwD,CAA5D,EACA;AwBiBD,ALTC,AnBPC,AEqBH,A6BxIAsY,AhDhDujF,EgDgDvjFA,I7BwII,CAAC1gB,CsBLAoH,GtBKL,AnBxL6jF,CgDgDnjF,AhDhDojF,CmByL9jF,A6BzIWzG,EPmINyG,CAAQoT,AzCnLgjF,CgDgD7jF,AhDhD0D,CgDgD1CpY,MPmIXgF,GAAmB,CAAvB,EAA0B,YOnI3B;AR+LC,AC3DC,ALTA,AnBPC,AEsBF,A6BzID,AhDjDokF,MwC+O7jF4Q,GQ9LA6I,EhDjDmkF,CyCoLlkF,AzCpLmkF,IyCoL/jF7V,CzCpL8jF,CAAhhF,IwC+OnDgN,GAAmBC,AC3DlB,CAAc,KpC1BtB,SmCqF0BA,CAAgBC,IQ9LF0I,KAAjC,CPmIC,AOnIsC,CPmI5C,GOnIK,EAA6CF,UAA7C,CAAP,ER8L0BzI,CAA8CpS,MAAAA,CAAOyQ,cAAPzQ,EAA9CoS,CAAzB;AACA,AKvCE,AJpBD,AxBhBA,AZVD,AcgCA,A6BzID,AhDlDklF,KiByJllF,CuBuFOE,AvBzEN,KjBvKulF,CAAC,E6CyMllF,CAAC,E7CzMglF,CAA9hF,E6CyM7ChL,WLuCNgL,GAA4BpC,IAAAA,CAAKS,MKvChC,EAAL,EACA,kBLsCgCT,CAAkClQ,MAAlCkQ,CAAlC;AKrCG,AT9BHnP,ApC7K+lF,MoC6K/lFA,KpC7KqmF,CoC6KrmFA,ApC7KsmF,CoC6K/lF2M,IpC7K8lF,CAA5iF,GoC6KzD3M,GAAkB2M,QAAlB3M;AIqEA,AKtCG,AJrBH,ALTAA,A/BlBA,AciCD,A6BzIM,AhDpDwmF,MwCkPzmFoR,AJpEJpR,AjBeG5G,GsBNEA,AOnIS0N,C7ByIX1N,CAAK8D,AnB7L2mF,CoC8KnnF8C,ApC9KonF,CyCuLpnF,ALTO8M,GKSK1T,AzCvLumF,CmB6LhnFA,AnB7LsD,E6C4M/C,AT9BV4G,CKSA,AtBMiBuE,A6BzIZ,ER8LL,AJpEkBoI,CYzHpB,CR6LwB,AKtCPiJ,MT9BGjJ,GAAW1N,ES8B1B,IT9B0BA,CAAO/B,GjBerC,EACA,CiBhBC8C;AIqEE,AKtCC,AJrBH,ALRA,AnBRA,AZXA,AckCA,A6BzID,AhDtD2nF,MgDsDvnF8Z,E/BkHC3gB,AEuBAyC,CqBoDF,AC3DG4E,CpC3BD,AckCJ,C0BVC,A7CrL+nF,C6C+M9nF,A1BhBM,AnB/LynF,CwCmP/nF,AJnEKR,E/BnBE/C,CoC2BT,AOlIa,ChDtDmnF,CAAvkF,CyCwL1CuD,ALRf,AY1HgB2G,C3CuGZ,EmCsFF,EQ7LmB,CR6LWiK,AQ7LV5W,CPkItB,ApC3BoB,KAAKyC,G2CvGT,C/BkHIuE,A+BlHY5H,C3CuGZ,GAAasD,C2CvGjB,CR6LgBkU,AQ7LMhK,CR6LW2I,GnCtF7B,A2CvGJ,CAA2B/I,I/BkHvC7N,AZXwC,CAA5C,CYWqCuE,CZXU,EmCsFf0T,AQ7LhB,CAAjB,CR6LG,CvB3EmC1T,CuB2EnC,AvB3E0CmD,OAAPnD,CuB2EnC,CvB3EEvE,CAAJ,CuB2EE,CvB1EF,IuB0EE,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAgE;AAAA,AC1DhE,ALRF,AnBPC,AZZA,AckCA,A6BzIF2gB,AhDvDyoF,EgDuDzoFA,OPkIQte,CD0D2D,CxCnP4kF,CmBgMvoF,A6BzIE,AhDvDsoF,CiB0KvoFkC,A+BnHE3D,CR4LwD,CnCrF1D,CckCGE,AnBhMmoF,CyCyL5oF,AOlIH,AhDvD0D,CgDuD1CuB,C/BmHd,CwBeiBA,ApC3BjB,QoC2BC,OtBOK,CAAe,M6BzIvB,I7ByIQ,CAAN;AsBLD,ALpGF,AnBoFG,AZZA,AckCA,A6BzIF,AhDxDspF,GoCuFvpF,EAAA,E/BmEC,CAMC,C2CxGM0e,EhDxDqpF,CAAC,IAAD,CAAlmF,OgDwDjCF,KAAlB,CAAwB,IAAxB,EAA8BF,UAA9B,CAAP;AR2LmE,AKnChE,ATzHJ,AnBqFE,AZXA,A2CxGD,AhDzDmqF,EgD2DpqF,EZ4BA,GAAA,EAAA,CI4JoE,CxCnPsmF,CAAC,G6CgNlqF/D,C7ChNiqF,CAA/mF,CwCmPS,AJ5JpE,EI4JoE,wDKnChE;ALmCgE,AKlChE,AJrBF,ALrGF,AnBsFC,AEqBC,A6BtIF,AhD5DirF,EiB+KjrF,EmBxFA,KKqGOrK,ALrGP,EAAA,ApCvFurF,CwCmPnnF,AxCnPonF,EwCmPpnF,CKlC3DsK,C7CjN8qF,CyC4LrrF,AzC5LyD,CwCmPS,ECvDlDnC,ALrGlB,MS0HI,CLkCgE,AJ5JpE,CI4JoE,EJ/DnE,II+DmE,EAAA,ECvDzCrT,OAAAA,CAAQkL,QAAjBmI,CAAhB;ADuDkE,AKjChE,AT7BF,AnBLF,AEmBE,AnBnM4rF,GmBuL9rF,CAcC,IqB8CmE,EJ9D9D,CpCrL8rF,CwCmPhoF,AxCnPioF,GwCmPjoF,AKjC3DoC,AT7BEvJ,CpCrLyrF,CAAzoF,GoCqLrD,II8D8D,CAAA,AJ9D/C,EI8D+C,EAAA,CAAA,IKjChE,ET7BF,EACA;AI6DkE,AKhChE,AJrBF,ALPC,AnBNH,AZfE,ALlKysF,OwCmPvoF,CCrD9D,CIVH,AJUI,CIsBJ,C7CpN8sF,CAAC,CwCmP9oF,AJ5D5DK,A/BrBC,CoC4BGrB,ApC5BF,CAAC,CLlKssF,CAAtpF,GKkK3CzO,EoC4Bd,CLPC,CKQD,CpC7BS,C+BqBU,C/BrBnB,I+BqBwB4P,IAAL,EAAlB;AI4DiE,AK9BjE,AJrBA,AxBdH,AZfE,A2CtGK,AhD7DitF,QwCmPppF,CQtLpDnI,CRsLoD,CxCnP0pF,CyCgMrtF,AzChMstF,CwCmP3pF,CQtL7D,EPmIMN,AzChMitF,CgD8D9tF,AhD9D2D,KwCmPS,CAAA,ECnD3D,CAAA,CDmD2D,EAAA,oBCnDxB5D,OAAAA,CAAQkL,QAA3C,GAAA,GAAA,CAAN;ADmDiE,AK7BjE,AJrBA,ALRA,AnBNH,AEoBC,A6BxIA,AhD/DouF,MmBuM9tFpG,A6BxIFwU,KhD/DsuF,CwCmPvqF,AJ1D7D,ApCzLquF,EwCmPxqF,CAAA,ArB5C7DxU,C6BxIQ,AhD/D4tF,CoCyL/tFyH,ApCzL+C,CmBuMxC3T,CqB4CiD,AQpLlD+N,ERoLkD,CrB5CjD/N,CAAK+F,C6BxID,CAAC3E,EZ0HrB,EACA,AjBagBpB,CAAYoL,I6BxIb,CAAgB5K,KAAhB,CAAsBwN,IAAtB,CAA2BJ,SAA3B,C7BwIC5N,A6BxIlB,C7BwIA;AqB4CmE,AK5BjE,AJpBD,ALRE,AnBPJ,A+BpHC0gB,AhDhEivF,EgDgEjvFA,MRmLmE,GxCnPorF,CwCmPprF,AQnLzD,AhDhE8uF,CgDgE7uF/f,ERmLwD,AJxD3D2S,CpC3L+uF,CwCmPprF,AQnLnE,AhDhE0D,CwCmPS,AQnLnDlR,EZ2Hb,GIwDgE,AJxDnD,OAAb,YY3HH;ARmLmE,AK3BjE,AT/BA,AnBJH,AEoBC,A6BxIA,AhDjE8vF,MmByM1vF8J,GiBhBF,AYxHK4U,EhDjE6vF,CAAC,GoC8LnwF,AjBWE5U,CnBzMgwF,CAA1sF,CmByM1C,CAAhB,EACA,G6BzIyB0U,C3CoGpB7c,I2CpGE,CAAwB,E3CqG/B,E2CrGO,EAA8B2c,UAA9B,CAAP;AHwJE,AT1BC,AnBTJ,AZfE,AcoCA,A6BzID,AhDlE2wF,UKuKtwF,CLvK4wF,CAAC,GoC+L1wFpN,A/BxBEtP,CLvKuwF,CAAvtF,GoC+LvD,GAAa,A/BxBX,M+BwBF,A/BxBqBC,OAAAA,CAAQ,KAAKJ,KAAL,EAARI,EAAsBF,KAAtBE,CAAvB,EACA;AmC2EkE,AKzBjE,AJtBD,ALJE,AnBTJ,AZdG,AcmCD,AnB5MuxF,SyCoMlxFuW,CD+CQpC,CxCnPgxF,CAAC,GKyKtxF,CLzKqxF,CyCoM7xF,AzCpMyD,EKyK7ClU,CoC2BIkD,GpC3BR,CAASnD,CmC0EiD,EC/ClDmD,CD+CkD,AC/C1CoT,GpC3BPvW,CmC0EiD,AnC1EzC,IoC2BzB,CpC3B8BJ,KAAL,EAARI,EAAsBF,KAAtBE,CAAT,EAAsC,IAAtC,CAAP;AwCkDA,AJrBD,ALLC,AnBTH,AZdG,A2CtGI,AhDpE+xF,SyCsM/xFgW,AOlISzQ,EhDpE4xF,CAAC,IyCsM3yF,AzCtM0yF,CAAjvF,EyCsM1C,EOlIV,EPkIctJ,COjIrB,KPiIiB,CAAW+Z,OAAX,EAAoB,IAApB,CAAf;AD8CI,AKxBH,AJrBA,AxBdH,AZdE,AcmCD,A6BxIA,AhDtEkzF,MgDsE9yFyG,G7BwIG1gB,CqBsCEoY,CxCpP+yF,CAAC,CmB8MlzFpY,CACN,E6BzIa,AhDtE0yF,CAA9vF,EgDsEzC+N,KAAK,CR8KbqK,AQ9KchX,CR8KEoJ,QQ9KR,CAAgBhK,KAAhB,CAAsBwN,IAAtB,CAA2BJ,CR8KnCwK,GAAwCtU,KQ9KhC,CR8KRsU,AQ9KT,GR8K0D,CAArD,EAAwD;AACtD,AKxBL,AJpBD,ALNA,AnBTF,AEoBQpY,A6BvIP0gB,AhDvE+zF,EgDuE/zFA,C7ByIElgB,KAFKR,CAECkM,EnBhN6zF,CgDuE3zF,AhDvE4zF,CoCmM9zF,AY5HGvL,GhDvE0zF,CgDuEr0F,AhDvE0D,CoCmM7C2S,AjBWNtT,A6BvISoC,E7B0If,GiBdO,KAAe,OAAtB,OY5HD;AR+KO,AKxBL,AT1BD,AnBTF,AEmBQpC,A6BtIP,AhDxE40F,GmBkN10F2E,M6B1IKoc,C7BsIA/gB,CAIGqL,AnBlNw0F,CwCsPr0FgN,AxCtPs0F,IAAD,CAAxxF,QgDwEhCuI,KAAnB,CR8KMvI,AQ9KmB,GR8KGjD,CQ9K5B,EAA+BsL,I7BsI/B1gB,EAImC,EqBoCPoV,ArBxC5BpV,CqBwCwCsY,ArBxC/C,C6BtIO,CAAP,iBR8KmClD,CAAgC,MAAMgD,eAAAA,CAAgB5N,qBAAhB4N,GAAwC,CAAxCA,CAAtChD,CAA5B;AKvBL,ATxIH,AnBqGA,AEuBC,A6B1IA,AhDzEy1F,EmBqN11F,A6B1IA,CZYA,EAAA,MpCvFg2F,CAAC,IAAD,CAAryF,SK8K1D;AmCyEO,AKnEL,AT7FH,AnBsGA,AZdE,AcuCF,A6B1IA,AhD5Eu2F,IoCuFv2F,GAAA,EAAA,C/BwFM,CL/Ku2F,CwCuPj2F,AxCvPk2F,CwCuPj2FiD,AKvBL,ETzIR,A/BwFW/V,EwCiDC,AxCjDN,AL/Ku2F,C6CgOh2F,A7ChO8C,GK+K1C,EwCiDCQ,GxCjDIN,EAApB,EwCiDM,AxCjDkB,EmCwEb6V,AKtBV,CLsB8BlY,IAApBkY,AnCxEoBnW,CmCwEKiW,iBnCxEZ,QmCwEbE,CAAL,EAA0D;AACxD,AKtBN,AT3IJ,AnBuGA,AZdE,AcuCF,AnBvNq3F,IoCuFr3F,KAAA,EAAA,ApCvF23F,CAAC,CKgLn3F,GLhLk3F,C6CkOl3FwE,A7ClOkD,CKgL7C7Z,E+BzFd,IAAA,GAgHC,O/BvBQ,CAAsB,CwCkD3B,CxClDK,KAA6Bd,kBAApC;AmCyEQ,AKtBN,AT3BF,AnBTF,AZdE,ALjLg4F,WAAM,CAAC,IAAD,CAA70F;AwC0PlD,AKxEP,ATuBA,AnBTF,A+BnHO,AhD7Ew4F,O6CkL74F,EGrGcoC,CZ4HV,CAAC,ApCzM84F,CAAC,C6CsOp5F,EGzJK,CZ4HK0O,ApCzMy4F,CAA11F,CgD8E3D,KZ2HO,EAAL,EACA;AIiDK,AKpBJ,AJtFD,AL0DC,AnBVH,AEuBO,A6BzIN,AhD/E25F,MgD+Ev5F0N,G7ByIWvU,EnBxNk5F,CAAC,EoC2M15F,EY5HM,AhD/Em5F,CAAv2F,CoC2M9ChL,CY5HK4M,IZ4HT,CAAU,AY5HI,CAAC3M,SAAN,CAAgBZ,KAAhB,CZ4HT,AY5H+BwN,CZ4HrC,GY5He,CAA2BJ,C7ByItC,CAAgD/H,MAAhD,C6BzIW,C7ByI6CzD,A6BzI9D,Q7ByIM,EACP;A0BeG,AJtFD,AL0DC,AnBVH,AEwBC,A6B1IAse,AhDhFw6F,EgDgFx6FA,I7B0II,CiBnBJ,AjBmBK7a,CiBZJ,GpC9M66F,CgDgFp6F,AhDhFq6F,CmB0N36F,A6B1IOlF,GhDhFm6F,CmB0N/5F,A6B1If,AhDhF0D,CmB0N1CyB,A6B1IAA,Q7B0IAA,CAASgK,edtCzB,A2CpGA,S7B0IgBhK,EAAhB,EACA;AqBiCK0V,AKnBH,AJtFD,AxBgDF,AZdE,AcuCA,A6B3ID,AhDjFq7F,MwC4Ph7FA,GQ3KEiJ,C3CoGF,CcuCG,AnB5Nm7F,CAAC,GKqLl7Fze,CLrLi7F,CKqL17F,EAAa,M2CpGYse,C3CoGL,CmCuEhB9I,GAAwBC,AQ3KtB,C3CoGmB3V,A2CpGM,IAAzB,EAA+Bse,E3CoGjB,CAAcvc,O2CpG5B,CAAP,KR2K6B4T,CAAwB3V,QAAxB2V,EAAkClS,MAAlCkS,CnCvEf,CmCuEyDK,eAA1CL,CAAxBD;AKjBH,AJvFD,AxBgDF,AZdE,AcsCSjS,A6B1IV,AhDlF0D,GAA5C,GmB4NJA,M0BeFiX,A1BfEjX,CdtCF,CcsCEA,IdtCGzD,QAAL,CAAcgC,SwCqDd0Y,GAA2B,KAAKnZ,IxCrDvC,UwCqDC;ALkBG,AKjBH,AT7BD,AnBVF,AZdE,AcqCO,AnB5N27F,KmB4Nl8F,CdnCD,ImCoESgU,AJ9CF/Q,GS6BAS,E7C5Ow8F,CoC+Mx8FT,GAAS,EI8CP+Q,CAAYvV,EJ9CAuR,GS6BnB,GLiBOgE,AKjBe,ELiBO9R,EJ9C9B,CS6B4BlC,GLiBpBgU,EAA8BC,SKjBf,GAAsB,KAAKvQ,ELiB1CsQ,EAAmDG,UKjB1D,CAND,CAQC,SLeOH,CAAJ,EAA+E;AAC7E,ACnHN,ALqEA,AnBVF,AZZC,AcmCC,A6BzIK,AhDpF08F,GmByNj9F,CAMC,K6B3IezQ,ChDpFs8F,CoCgN/8FyM,ApChNg9F,IwC8Px8F,CxC9Pu8F,EAAO,CwC8Pr9F,EJ9CN,CY5HK,AhDpF+8F,EoCgNl8F,ApChN88F,CgDqFl+F,GZ2HE,uBpChNo9F,EAAwC,CAAC,CAAD,EAAG,CAAH,CAAxC,CAAN;AwC+Pz8F,AKhBJ,AT9BD,AnBVF,AZZC,AcqCA,A6B1IA,AhDtFogG,MgDsFhgG+M,IhDtFqgG,CoCiNngGpN,ApCjNogG,E6C+OngGyJ,GT9BN,AY3Ha,AhDtF2/F,EAAO,CoCiNlgG,AY3HGhP,GhDtFw/F,EgDsFn/F,AhDtF+/F,CgDsF9/F3M,KZ2HtB,IS8BC,AGzJe,CAAgBZ,KAAhB,CAAsBwN,IAAtB,CAA2BJ,SAA3B,CAAjB,AhDtFygG,EAA6C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA7C,EAAqD,CAAC,CAAC,kBAAD,EAAoB,OAApB,EAA4B,CAAC,SAAD,CAA5B,CAAD,EAA0C,CAAC,kBAAD,EAAoB,OAApB,EAA4B,CAAC,GAAD,CAA5B,CAA1C,EAA6E,CAAC,0BAAD,EAA4B,UAA5B,EAAuC,CAAC,GAAD,CAAvC,CAA7E,CAArD,CAA1D;AwCgQ38F,AJ9CH,AnBVF,AZZC,AcqCA,A6B1IA8S,AhDvF2rG,EgDuF3rGA,QhDvFgsG,CAAC,CgDuFvrG,CZ2HF9Z,AY3HGjG,GhDvFqrG,CgDu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vgX,AzCvOsgX,EAAO,GyCuOxgXpC,CzCvOigX,EAAY,IyCuOlhX,CAAa5E,EAAjB,EAAqB,czCvOq/W,EAAoC,CAAC,CAAD,CAApC,EAAwC,CAAC,CAAC,kCAAD,EAAoC,aAApC,EAAkD,CAAC,QAAD,CAAlD,CAAD,CAAxC,CAA/jR;A6CyQ98F,AJjCI,AxBPJ,AEuBD,A6BxIM,AhDhHinX,QiBiOlnXoI,C+BjHUzB,ChDhH6mX,C6CyQtnX+T,A7CzQunX,KAAD,EyCwOjnXrR,AzCxOwnX,IAAP,EAAY,IiBiOnoXjB,CwBOMiB,EOxHL,CPwHmB,CxBPK,C+BhH/B,EPuH8Bd,AxBP5B,EACA,AZjBD,ALjN4nX,EAA2B,CAAC,C6CyQvpX,A7CzQspX,CAA3B,E6CiJ5nX,A7CjJ2pX,C6C2Q1pX,A7C3Q2pX,CAAC,SyCwOpoX,CAAgB7E,KAAAA,CAAMpD,OAAtB,EAA+BoD,KAAAA,CAAMoB,GzCxO8lX,EyCwOnoX,AzCxOuqX,EyCwO3nX,KAAKlF,MzCxOklX,EyCwOnoX,AzCxOqrX,CyCwOzsX,AzCxO0sX,QAAD,CAAlD,CAAD,CAA/B,CAA7qR;AwC4R98F,AvBzDC,AZjBD,AcuCD,A6BvIA,AhDlH4tX,MwC4RvtXsW,AQ1KDgI,IhDlH6tX,CAAC,EiBmOztX9V,AZjBD,CmC0EH8N,EQ1KS,AhDlHmtX,CwC4RjtXD,CnC1EH1V,ALlN2tX,CgDkHvtXgL,GhDlHgtX,EgDkH3sX,AhDlHutX,CgDkHttX3M,C3CgGtB,ImC0EeqX,CAAc/X,EvBzDrBkK,C+BjHQ,CAAgBpK,C/BiHD,EuByDhBiY,CAAsB,AvBzD7B7N,C+BjHQ,CAAsBoD,CR0KvByK,AvBzDsBhP,CuByDrC,EQ1KgB,AhDlHgtX,CgDkHrrXmE,ChDlHutX,CAAC,CAAD,CAAlC,EAAsC,CAAtC,EgDkHhtX,AhDlHwvX,CgDkHzwX,EhDlHiuX,EAA4C,CAA5C,EAA8C,CiBmOzuXnE,AjBnO2rX,CiBmOpqX5D,CjBnOotX,CAAhD,EAAkD,CAAlD,CiBmO3rX4D,CjBnO+uX,CiBmOhtX,AjBnO4pX,EAAsD,CAAC,CAAC,MiBmOnvXA,EAA2CoB,i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GmBsS9tyBnL,GAAwBH,KqByDfsL,CAAoBlX,AxC/VqryB,EAAyB,CAAC,CAAD,CAAzB,EwC+VzsyBkX,AxC/VsuyB,CwC+V1syBwB,AxC/V2syB,CAAC,QmBsSztyB9M,CAAwBxI,CqByDvC8T,IAA2CwB,CrBzD5B9M,GAAiC,AnBtSuryB,CmBsStvyB,CnBtS0wyB,KwC+VhtyB8M,CAAYtV,CxC/VgryB,EAA4B,CAAC,EwC+VztyBsV,EAAvDF,ExC/V+wyB,CAA5B,CAAD,CAA7B,CAAzwsB;AwCgW78F,ACtFO,ApChBR,A2CnFK,AhDvKwxyB,GwCyV/xyB,CASE,KQ3LciD,ChDvKoxyB,CAAC,KyC0QrxyBpB,AzC1QoxyB,EgDuK7xyB,AhDvKoyyB,CgDuKjxyBjY,GPmGViY,AzC1QoxyB,EAAY,CyC0QxxyB1L,COnGjB,EACP,mBhDxKoyyB,EAAoC,CAAC,CAAD,CAApC,EAAwC,CAAC,CyC4Qj0yB6K,AzC5Qk0yB,UAAD,EAAY,IAAZ,EAAiB,CAAC,MyC0Qv0yB7K,CzC1Qs0yB,CyC6Ql1yBQ,AzC7Qi0yB,CAAD,CAAxC,EAAsE,CAAtE,EAAwE,CAAxE,CyC6QxxyBA,CAAUrP,AzC7Qw1yB,KyC6Ql2yBqP,CAAgB,CAAhBA,EAAmB5J,OAAAA,CAAQsJ,IzC7Q6vyB,CyC6QxxyBM,AzC7Qo8F,CyC0Qx7FR,CAAd;ADyFR,AKnCA,AxCrEA,Ac4CD,A6B9HAsS,AhDzKo4yB,MmBuSh4yBvf,I0ByBCsb,A7ChUo4yB,CAAC,GmBuSt4yBtb,CAASsK,AnBvS43yB,EAAM,IgDyK/3yBsB,AhDzKy3yB,EAAW,EgDyKp5yB,CHuJC,AGvJoB,EHwJpB,EGxJD,EAA2BlL,IhDzK82yB,EAAyB,CgDyKl6yB,AhDzKm6yB,CAAD,CgDyK93yBV,AhDzKq2yB,CmBuSr4yBA,CnBvSk6yB,CAAC,CAAC,GmBuS13yBkK,iB6B9H9C,M7B8H8CA,CAAwBG,OnBvSi2yB,EAAoC,YmBuS75yBH,CAA9C,AnBvSu6yB,EmBwSv6yB,AnBxSy9yB,CAAC,GAAD,CAAlD,EAAwD,MAAxD,CAAD,EAAiE,CAAC,uCAAD,EAAyC,gBAA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","file":"phoner.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.27\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"800\":[\"001\"],\"808\":[\"001\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"870\":[\"001\"],\"878\":[\"001\"],\"880\":[\"BD\"],\"881\":[\"001\"],\"882\":[\"001\"],\"883\":[\"001\"],\"886\":[\"TW\"],\"888\":[\"001\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"979\":[\"001\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[136-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[136-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|(?:[147]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"(?:365\\\\d{3}|900200)\\\\d{3}|(?:[12457]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|365\",\"[12]|365\",\"[12]|365(?:[0-46-9]|5[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[3-8]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-356]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-9]\"]]]],\"CK\":[\"682\",\"00\",\"[2-8]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-8]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1[2-79]|[25-8]|(?:18|4)[2-9]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1(?:80|9)\",\"1(?:800|9)\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|[24-8]\\\\d{7}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|5\\\\d{7}\",[6,7,8],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"[2-59]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-59]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1800\\\\d{6,7}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d\\\\d|900)\\\\d{4}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-4])\",\"[45]|8(?:00[1-9]|[1-4])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}|[1-35689]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[12]0|7)0|[368]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[12457]\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[39]\"]]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:0\\\\d|[2-7])\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[024-9])\",\"[25]|7(?:0|6(?:[04-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|80[04589])))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d|7(?:(?:26(?:6[13-9]|7[0-7])|442\\\\d|50(?:2[0-3]|[3-68]2|76))\\\\d|6888[2-46-8]))\\\\d\\\\d\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|629)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"(?:30|6\\\\d\\\\d|722)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"(?:[268]\\\\d|[79]0)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:00800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|(?:55|61)2|7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:1(?:29|60|8[06])|261|552|788[01])[2-7]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|[4-8])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|3179)|807(?:1|9[1-3])|(?:1552|7(?:28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(10(?:01|20|66))\"],\"LK\":[\"94\",\"00\",\"(?:[1-7]\\\\d|[89]1)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"(?:[2569]\\\\d|71)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[25-79]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29|38)[89]0\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[2-9]|3[2-57]|4[2-46-8]|8[235-7]|90)|3(?:[0-4]\\\\d|[57][2-9]|6[2-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"692[12]\\\\d{5}|(?:6(?:[0-7]\\\\d|8[0-247-9]|9[013-9])|7(?:0[06-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"5924[0-2]\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"(?:[246-9]\\\\d|50)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:596|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[37][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[01]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|55\\\\d|888)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[458]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[28]\\\\d{7,9}|[346]\\\\d{7}|(?:508|[79]\\\\d)\\\\d{6,7}\",[8,9,10],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[025-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[25-8]\\\\d\\\\d|345|488|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|[3-7]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[268]\"],\"0$1\"]],\"0\",0,0,0,0,\"262|69|8\"],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[237-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|(?:[1-4]\\\\d|59)\\\\d{5}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"1|2[0-79]|3[0-46-8]|4[0-7]|59\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79[0-8]|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|799|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[3-59]\\\\d|77|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0457-9]\"],0,1]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|[5-8]\\\\d{3})\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-8]\"]]]],\"TR\":[\"90\",\"00\",\"(?:[2-58]\\\\d\\\\d|900)\\\\d{7}|4\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"(?:[24589]|7\\\\d)\\\\d{8}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25][2-8]|[346]|7[1-9]|8[237-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[258]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[89]00\\\\d{7}|(?:[24]\\\\d|50)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24589]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]]],\"WS\":[\"685\",\"0\",\"[2-6]\\\\d{4}|8\\\\d{5}(?:\\\\d{4})?|[78]\\\\d{6}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"8\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"],\"001\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]]]}}","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matchesEntirely(text = '', regular_expression) {\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\nexport default function cmp (a, b) {\r\n    var pa = a.split('.');\r\n    var pb = b.split('.');\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i]);\r\n        var nb = Number(pb[i]);\r\n        if (na > nb) return 1;\r\n        if (nb > na) return -1;\r\n        if (!isNaN(na) && isNaN(nb)) return 1;\r\n        if (isNaN(na) && !isNaN(nb)) return -1;\r\n    }\r\n    return 0;\r\n};","import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nexport default class Metadata\r\n{\r\n\tconstructor(metadata)\r\n\t{\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.v1 = !metadata.version\r\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\t\tthis.v3 = metadata.version !== undefined // && compare(metadata.version, V4) === -1\r\n\t}\r\n\r\n\tgetCountries()\r\n\t{\r\n\t\treturn Object.keys(this.metadata.countries)\r\n\t}\r\n\r\n\thasCountry(country)\r\n\t{\r\n\t\treturn this.metadata.countries[country] !== undefined\r\n\t}\r\n\r\n\tcountry(country)\r\n\t{\r\n\t\tif (!country)\r\n\t\t{\r\n\t\t\tthis._country = undefined\r\n\t\t\tthis.country_metadata = undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (!this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t\t}\r\n\r\n\t\tthis._country = country\r\n\t\tthis.country_metadata = this.metadata.countries[country]\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetDefaultCountryMetadataForRegion()\r\n\t{\r\n\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]]\r\n\t}\r\n\r\n\tcountryCallingCode()\r\n\t{\r\n\t\treturn this.country_metadata[0]\r\n\t}\r\n\r\n\tIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return this.country_metadata[1]\r\n\t\treturn this.country_metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.v1) return\r\n\t\treturn this.country_metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats()\r\n\t{\r\n\t\tconst formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tnationalPrefixForParsing()\r\n\t{\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when parsing\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes()\r\n\t{\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type)\r\n\t{\r\n\t\tif (this.hasTypes() && getType(this.types(), type))\r\n\t\t{\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n\r\n\tcountryCallingCodes()\r\n\t{\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\t//\r\n\t// `country_calling_code` is always valid.\r\n\t// But the actual country may not necessarily be part of the metadata.\r\n\t//\r\n\tchooseCountryByCountryCallingCode(country_calling_code)\r\n\t{\r\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\r\n\r\n\t\t// Do not want to test this case.\r\n\t\t// (custom metadata, not all countries).\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthis.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\tselectedCountry()\r\n\t{\r\n\t\treturn this._country\r\n\t}\r\n}\r\n\r\nclass Format\r\n{\r\n\tconstructor(format, metadata)\r\n\t{\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat()\r\n\t{\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns()\r\n\t{\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormatting()\r\n\t{\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix()\r\n\t{\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat()\r\n\t{\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\nclass Type\r\n{\r\n\tconstructor(type, metadata)\r\n\t{\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif\r\n\t(\r\n\t\t!is_object(metadata) ||\r\n\t\t!is_object(metadata.countries) ||\r\n\t\t(!is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries))\r\n\t)\r\n\t{\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` and \\`.country_calling_codes\\` child object properties. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata)\r\n{\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}","import { VALID_DIGITS } from './constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n// Pattern to capture digits used in an extension.\r\n// Places a maximum length of '7' for an extension.\r\nconst CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nfunction create_extension_pattern(purpose)\r\n{\r\n\t// One-character symbols that can be used to indicate an extension.\r\n\tlet single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E'\r\n\r\n\tswitch (purpose)\r\n\t{\r\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\r\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\r\n\t\tcase 'parsing':\r\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters\r\n\t}\r\n\r\n\treturn RFC3966_EXTN_PREFIX +\r\n\t\tCAPTURING_EXTN_DIGITS + '|' +\r\n\t\t'[ \\u00A0\\\\t,]*' +\r\n\t\t'(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\r\n\t\t// \"доб.\"\r\n\t\t'\\u0434\\u043E\\u0431|' +\r\n\t\t'[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' +\r\n\t\t'[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*' +\r\n\t\tCAPTURING_EXTN_DIGITS + '#?|' +\r\n\t\t'[- ]+([' + VALID_DIGITS + ']{1,5})#'\r\n}\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\nexport const EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching')\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport function extractExtension(number)\r\n{\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst number_without_extension = number.slice(0, start)\r\n\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length)\r\n\t{\r\n\t\tif (matches[i] != null && matches[i].length > 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tnumber : number_without_extension,\r\n\t\t\t\text    : matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp\r\n(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER +\r\n\t\t// Phone number extensions\r\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\r\n\t'$'\r\n,\r\n'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number)\r\n{\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS =\r\n{\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character)\r\n{\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}","import { parseDigit } from './parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value)\r\n{\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+')\r\n\t{\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn '+'\r\n\t}\r\n\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","// Deprecated. Import from 'metadata.js' directly instead.\r\nexport { getCountryCallingCode as default } from './metadata'","import Metadata from './metadata'\r\nimport { matchesEntirely, mergeArrays } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options = {}, metadata)\r\n{\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\tmetadata.country(input.country)\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import Metadata from './metadata'\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nexport default function isPossibleNumber(input, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport { VALID_DIGITS } from './constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely } from './util'\r\nimport getNumberType from './getNumberType_'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tmetadata.country(input.country)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","import isValidNumber from './validate_'\r\n\r\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\r\nexport default function isValidNumberForRegion(input, country, options = {}, metadata)\r\n{\r\n\treturn input.country === country && isValidNumber(input, options, metadata)\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata)\r\n{\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format)\r\n\t{\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata)\r\n{\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tformat.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\r\n\tif (useInternationalFormat) {\r\n\t\treturn changeInternationalFormatStyle(formattedNumber)\r\n\t}\r\n\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction format_national_number(number, format_as, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function changeInternationalFormatStyle(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './getNumberType_'\r\nimport formatNumber from './format_'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { is_possible_number } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry))\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formatted_phone_number, ext } = parse_input(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formatted_phone_number)\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst\r\n\t{\r\n\t\tcountry,\r\n\t\tnational_number : nationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t}\r\n\t= parse_phone_number\r\n\t(\r\n\t\tformatted_phone_number,\r\n\t\toptions.defaultCountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false\r\n\r\n\tif (!options.extended)\r\n\t{\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible : valid ? true : (options.extended === true) && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\r\n\t\tphone : nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\r\nexport function extract_formatted_phone_number(text, v2)\r\n{\r\n\tif (!text)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH)\r\n\t{\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t// Attempt to extract a possible number from the string passed in\r\n\r\n\tconst starts_at = text.search(PHONE_NUMBER_START_PATTERN)\r\n\r\n\tif (starts_at < 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(starts_at)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n// Strips any national prefix (such as 0, 1) present in the number provided.\r\n// \"Carrier codes\" are only used  in Colombia and Brazil,\r\n// and only when dialing within those countries from a mobile phone to a fixed line number.\r\nexport function strip_national_prefix_and_carrier_code(number, metadata)\r\n{\r\n\tif (!number || !metadata.nationalPrefixForParsing())\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// In many countries the national prefix\r\n\t// is not just a constant digit (like `0` in UK)\r\n\t// but can be different depending on the phone number\r\n\t// (and can be also absent for some phone numbers).\r\n\t//\r\n\t// So `national_prefix_for_parsing` is used when parsing\r\n\t// a national-prefixed (local) phone number\r\n\t// into a national significant phone number\r\n\t// extracting that possible national prefix out of it.\r\n\t//\r\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\r\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\r\n\r\n\t// Attempt to parse the first digits as a national prefix\r\n\tconst national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst national_prefix_matcher = national_prefix_pattern.exec(number)\r\n\r\n\t// If no national prefix is present in the phone number,\r\n\t// but the national prefix is optional for this country,\r\n\t// then consider this phone number valid.\r\n\t//\r\n\t// Google's reference `libphonenumber` implementation\r\n\t// wouldn't recognize such phone numbers as valid,\r\n\t// but I think it would perfectly make sense\r\n\t// to consider such phone numbers as valid\r\n\t// because if a national phone number was originally\r\n\t// formatted without the national prefix\r\n\t// then it must be parseable back into the original national number.\r\n\t// In other words, `parse(format(number))`\r\n\t// must always be equal to `number`.\r\n\t//\r\n\tif (!national_prefix_matcher)\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet national_significant_number\r\n\r\n\t// In more complex cases just `national_prefix_for_parsing` regexp\r\n\t// is not enough to extract the national number and then strip it\r\n\t// like `number.slice(national_prefix.length)` because when parsing\r\n\t// national numbers it's not always clear whether the first digits\r\n\t// are a national prefix or part of the national significant number.\r\n\t// For such cases `national_prefix_transform_rule` regexp is present\r\n\t// which contains \"capturing groups\" that are later used in such\r\n\t// `national_prefix_transform_rule` to transform the national number\r\n\t// being parsed into the national significant number.\r\n\t//\r\n\t// Example.\r\n\t// Country: U.S. Virgin Islands (VI).\r\n\t// Country calling code: +1.\r\n\t// Leading digits: 340.\r\n\t// Phone number format: +1 (340) xxx-xxxx.\r\n\t// National prefix: 1.\r\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\r\n\t// National prefix transform rule: 340$1.\r\n\t//\r\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\r\n\t// will return \"1\" and the national significant number will be\r\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\r\n\t//\r\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\r\n\t// the \"captured group\" will be \"3401234567\" and the national significant\r\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\r\n\t//\r\n\t// `national_prefix_matcher[captured_groups_count]` means that\r\n\t// the corresponding \"captured group\" is not empty.\r\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\r\n\t// or if the \"capturing groups\" are defined as optional.\r\n\t// Example: \"0?(?:...)?\" for Argentina.\r\n\t//\r\n\tconst captured_groups_count = national_prefix_matcher.length - 1\r\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count])\r\n\t{\r\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule())\r\n\t}\r\n\t// If it's a simple-enough case then just strip the national prefix from the number.\r\n\telse\r\n\t{\r\n\t\t// National prefix is the whole substring matched by\r\n\t\t// the `national_prefix_for_parsing` regexp.\r\n\t\tconst national_prefix = national_prefix_matcher[0]\r\n\t\tnational_significant_number = number.slice(national_prefix.length)\r\n\t}\r\n\r\n\tlet carrierCode\r\n\tif (captured_groups_count > 0)\r\n\t{\r\n\t\tcarrierCode = national_prefix_matcher[1]\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matchesEntirely(number, national_number_rule) &&\r\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\r\n\t// {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: national_significant_number,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function find_country_code(country_calling_code, national_phone_number, metadata)\r\n{\r\n\t// Is always non-empty, because `country_calling_code` is always valid\r\n\tconst possible_countries = metadata.countryCallingCodes()[country_calling_code]\r\n\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possible_countries.length === 1)\r\n\t{\r\n\t\treturn possible_countries[0]\r\n\t}\r\n\r\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _find_country_code(possible_countries, national_phone_number, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tfor (const country of possible_countries)\r\n\t{\r\n\t\tmetadata.country(country)\r\n\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits())\r\n\t\t{\r\n\t\t\tif (national_phone_number &&\r\n\t\t\t\tnational_phone_number.search(metadata.leadingDigits()) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: national_phone_number, country }, undefined, metadata.metadata))\r\n\t\t{\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parse_input(text, v2)\r\n{\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0)\r\n\t{\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\r\n\tlet number = extract_formatted_phone_number(text, v2)\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext)\r\n\t{\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext)\r\n{\r\n\tconst result =\r\n\t{\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\r\n\tif (ext)\r\n\t{\r\n\t\tresult.ext = ext\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\r\nfunction parse_phone_number(formatted_phone_number, default_country, metadata)\r\n{\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata)\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\telse if (default_country)\r\n\t{\r\n\t\tmetadata.country(default_country)\r\n\t\tcountry = default_country\r\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tconst { national_number, carrier_code } = parse_national_number(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = find_country_code(countryCallingCode, national_number, metadata)\r\n\tif (exactCountry)\r\n\t{\r\n\t\tcountry = exactCountry\r\n\t\tmetadata.country(country)\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnational_number,\r\n\t\tcarrierCode: carrier_code\r\n\t}\r\n}\r\n\r\nfunction parse_national_number(number, metadata)\r\n{\r\n\tlet national_number = parseIncompletePhoneNumber(number)\r\n\tlet carrier_code\r\n\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(national_number, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths())\r\n\t{\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata))\r\n\t\t{\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnational_number = potential_national_number\r\n\t\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, metadata.nationalNumberPattern()))\r\n\t\t{\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnational_number = potential_national_number\r\n\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnational_number,\r\n\t\tcarrier_code\r\n\t}\r\n}\r\n\r\n// Determines the country for a given (possibly incomplete) phone number.\r\n// export function get_country_from_phone_number(number, metadata)\r\n// {\r\n// \treturn parse_phone_number(number, null, metadata).country\r\n// }\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata)\r\n{\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0')\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length)\r\n\t{\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\r\n\t\tif (metadata.countryCallingCodes()[countryCallingCode])\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","import _parseNumber from './parse_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parseNumber()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _parseNumber(text, options, metadata)\r\n}","import _formatNumber from './format_'\r\nimport parse from './parse_'\r\n\r\nexport default function formatNumber()\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'","import isViablePhoneNumber from './isViablePhoneNumber'\r\nimport _getNumberType from './getNumberType_'\r\nimport parse from './parse_'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (typeof arg_2 !== 'object')\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'","import PhoneNumber from './PhoneNumber'\r\n\r\nexport default function getExampleNumber(country, examples, metadata) {\r\n\tif (examples[country]) {\r\n\t\treturn new PhoneNumber(country, examples[country], metadata)\r\n\t}\r\n}","import { normalizeArguments } from './getNumberType'\r\nimport _isPossibleNumber from './isPossibleNumber_'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _isPossibleNumber(input, options, metadata)\r\n}","import _isValidNumber from './validate_'\r\nimport { normalizeArguments } from './getNumberType'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function isValidNumber()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _isValidNumber(input, options, metadata)\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\nimport parseNumber from './parse_'\r\nimport _isValidNumberForRegion from './isValidNumberForRegion_'\r\n\r\nexport default function isValidNumberForRegion(number, country, metadata)\r\n{\r\n\tif (typeof number !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('number must be a string')\r\n\t}\r\n\r\n\tif (typeof country !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('country must be a string')\r\n\t}\r\n\r\n\t// `parse` extracts phone numbers from raw text,\r\n\t// therefore it will cut off all \"garbage\" characters,\r\n\t// while this `validate` function needs to verify\r\n\t// that the phone number contains no \"garbage\"\r\n\t// therefore the explicit `isViablePhoneNumber` check.\r\n\tlet input\r\n\tif (isViablePhoneNumber(number)) {\r\n\t\tinput = parseNumber(number, { defaultCountry: country }, metadata)\r\n\t} else {\r\n\t\tinput = {}\r\n\t}\r\n\r\n\treturn _isValidNumberForRegion(input, country, undefined, metadata)\r\n}","/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n","import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}","// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants'\r\nimport { limit } from './util'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport {\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\nimport parse from './parse_'\r\n\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate from './findNumbers/isValidCandidate'\r\n\r\n// Copy-pasted from `./parse.js`.\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch\r\n{\r\n\t// Iteration tristate.\r\n\tstate = 'NOT_READY'\r\n\r\n\tconstructor(text, options = {}, metadata)\r\n\t{\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.regexp = new RegExp\r\n\t\t(\r\n\t\t\tVALID_PHONE_NUMBER +\r\n\t\t\t// Phone number extensions\r\n\t\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?',\r\n\t\t\t'ig'\r\n\t\t)\r\n\r\n\t\t// this.searching_from = 0\r\n\t}\r\n\r\n\tfind()\r\n\t{\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number   = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt)\r\n\t{\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID'))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt   = startsAt + number.length\r\n\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext()\r\n\t{\r\n\t\tif (this.state === 'NOT_READY')\r\n\t\t{\r\n\t\t\tthis.last_match = this.find()\r\n\r\n\t\t\tif (this.last_match)\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext()\r\n\t{\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext())\r\n\t\t{\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}","// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport _findPhoneNumbers, { searchPhoneNumbers as _searchPhoneNumbers } from './findPhoneNumbers_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\nexport default function findPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findPhoneNumbers(text, options, metadata)\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _searchPhoneNumbers(text, options, metadata)\r\n}","// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}","import LRUCache from './LRUCache'\r\n\r\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n// that use-case won't have a lot of benefit.\r\nexport default class RegExpCache {\r\n\tconstructor(size) {\r\n\t\tthis.cache = new LRUCache(size)\r\n\t}\r\n\r\n\tgetPatternForRegExp(pattern) {\r\n\t\tlet regExp = this.cache.get(pattern)\r\n\t\tif (!regExp) {\r\n\t\t\tregExp = new RegExp('^' + pattern)\r\n\t\t\tthis.cache.put(pattern, regExp)\r\n\t\t}\r\n\t\treturn regExp\r\n\t}\r\n}","import isValidNumber from '../validate_'\r\nimport parseDigits from '../parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups,\r\n  regExpCache\r\n) {\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n  const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n  if (alternateFormats) {\r\n    for (const alternateFormat of alternateFormats.numberFormats()) {\r\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n        // There is only one leading digits pattern for alternate formats.\r\n        const leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n          // Leading digits don't match; try another one.\r\n          continue\r\n        }\r\n      }\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n  if (formattingPattern) {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}","/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nimport parseNumber from './parse_'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n  // that use-case won't have a lot of benefit.\r\n  regExpCache = new RegExpCache(32)\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCountry : options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency : options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries : options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata)\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata, this.regExpCache))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt : offset,\r\n        endsAt   : offset + candidate.length,\r\n        country  : number.country,\r\n        phone    : number.phone\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}","import PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\nexport default function findNumbers(text, options, metadata)\r\n{\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}","import _findNumbers from './findNumbers_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\nexport default function findNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findNumbers(text, options, metadata)\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n//\r\n// Simplified: does not differentiate between \"local-only\" numbers\r\n// and \"internationally dialable\" numbers.\r\n// For example, doesn't include changes like this:\r\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\n\r\nimport {\r\n\textractCountryCallingCode,\r\n\textract_formatted_phone_number,\r\n\tfind_country_code,\r\n\tstrip_national_prefix_and_carrier_code\r\n} from './parse_'\r\n\r\nimport {\r\n\tFIRST_GROUP_PATTERN,\r\n\tformat_national_number_using_format,\r\n\tchangeInternationalFormatStyle\r\n} from './format_'\r\n\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\r\n(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\r\n\r\nexport default class AsYouType\r\n{\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(defaultCountry, metadata)\r\n\t{\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\r\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tthis.defaultCountry = defaultCountry\r\n\t\t}\r\n\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tinput(text)\r\n\t{\r\n\t\t// Parse input\r\n\r\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\r\n\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// since it's not considered a possible phone number.\r\n\t\tif (!extracted_number)\r\n\t\t{\r\n\t\t\tif (text && text.indexOf('+') >= 0)\r\n\t\t\t{\r\n\t\t\t\textracted_number = '+'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate possible first part of a phone number\r\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\r\n\t\t{\r\n\t\t\treturn this.currentOutput\r\n\t\t}\r\n\r\n\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number))\r\n\t}\r\n\r\n\tprocessInput(input)\r\n\t{\r\n\t\t// If an out of position '+' sign detected\r\n\t\t// (or a second '+' sign),\r\n\t\t// then just drop it from the input.\r\n\t\tif (input[0] === '+')\r\n\t\t{\r\n\t\t\tif (!this.parsedInput)\r\n\t\t\t{\r\n\t\t\t\tthis.parsedInput += '+'\r\n\r\n\t\t\t\t// If a default country was set\r\n\t\t\t\t// then reset it because an explicitly international\r\n\t\t\t\t// phone number is being entered\r\n\t\t\t\tthis.resetCountriness()\r\n\t\t\t}\r\n\r\n\t\t\tinput = input.slice(1)\r\n\t\t}\r\n\r\n\t\t// Raw phone number\r\n\t\tthis.parsedInput += input\r\n\r\n\t\t// // Reset phone number validation state\r\n\t\t// this.valid = false\r\n\r\n\t\t// Add digits to the national number\r\n\t\tthis.nationalNumber += input\r\n\r\n\t\t// TODO: Deprecated: rename `this.nationalNumber`\r\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\r\n\r\n\t\t// Try to format the parsed input\r\n\r\n\t\tif (this.isInternational())\r\n\t\t{\r\n\t\t\tif (!this.countryCallingCode)\r\n\t\t\t{\r\n\t\t\t\t// Extract country calling code from the digits entered so far.\r\n\r\n\t\t\t\t// There must be some digits in order to extract anything from them.\r\n\t\t\t\tif (!this.nationalNumber)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then he can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then just return the raw phone number,\r\n\t\t\t\t// because it has no way of knowing\r\n\t\t\t\t// how to format the phone number so far.\r\n\t\t\t\tif (!this.extractCountryCallingCode())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Initialize country-specific data\r\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t\t// `this.country` could be `undefined`,\r\n\t\t\t// for instance, when there is ambiguity\r\n\t\t\t// in a form of several different countries\r\n\t\t\t// each corresponding to the same country phone code\r\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\r\n\t\t\t// and there's not enough digits entered\r\n\t\t\t// to reliably determine the country\r\n\t\t\t// the phone number belongs to.\r\n\t\t\t// Therefore, in cases of such ambiguity,\r\n\t\t\t// each time something is input,\r\n\t\t\t// try to determine the country\r\n\t\t\t// (if it's not determined yet).\r\n\t\t\telse if (!this.country)\r\n\t\t\t{\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\r\n\t\t\tconst previous_national_prefix = this.nationalPrefix\r\n\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber\r\n\r\n\t\t\t// Possibly extract a national prefix\r\n\t\t\tthis.extractNationalPrefix()\r\n\r\n\t\t\tif (this.nationalPrefix !== previous_national_prefix)\r\n\t\t\t{\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.matching_formats = undefined\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if (!this.shouldFormat())\r\n\t\t// {\r\n\t\t// \treturn this.format_as_non_formatted_number()\r\n\t\t// }\r\n\r\n\t\tif (!this.nationalNumber)\r\n\t\t{\r\n\t\t\treturn this.format_as_non_formatted_number()\r\n\t\t}\r\n\r\n\t\t// Check the available phone number formats\r\n\t\t// based on the currently available leading digits.\r\n\t\tthis.match_formats_by_leading_digits()\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\tconst formatted_national_phone_number = this.formatNationalNumber(input)\r\n\r\n\t\t// If the phone number could be formatted,\r\n\t\t// then return it, possibly prepending with country phone code\r\n\t\t// (for international phone numbers only)\r\n\t\tif (formatted_national_phone_number)\r\n\t\t{\r\n\t\t\treturn this.formatFullNumber(formatted_national_phone_number)\r\n\t\t}\r\n\r\n\t\t// If the phone number couldn't be formatted,\r\n\t\t// then just fall back to the raw phone number.\r\n\t\treturn this.format_as_non_formatted_number()\r\n\t}\r\n\r\n\tformat_as_non_formatted_number()\r\n\t{\r\n\t\t// Strip national prefix for incorrectly inputted international phones.\r\n\t\tif (this.isInternational() && this.countryCallingCode)\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode}${this.nationalNumber}`\r\n\t\t}\r\n\r\n\t\treturn this.parsedInput\r\n\t}\r\n\r\n\tformatNationalNumber(next_digits)\r\n\t{\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tlet national_number_formatted_with_previous_format\r\n\t\tif (this.chosenFormat)\r\n\t\t{\r\n\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits)\r\n\t\t}\r\n\r\n\t\t// See if the input digits can be formatted properly already. If not,\r\n\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\r\n\t\t// based on the formatting pattern chosen.\r\n\r\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone is invalid\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formatted_number)\r\n\t\t{\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\r\n\t\t// For some phone number formats national prefix\r\n\r\n\t\t// If the previously chosen phone number format\r\n\t\t// didn't match the next (current) digit being input\r\n\t\t// (leading digits pattern didn't match).\r\n\t\tif (this.chooseAnotherFormat())\r\n\t\t{\r\n\t\t\t// And a more appropriate phone number format\r\n\t\t\t// has been chosen for these `leading digits`,\r\n\t\t\t// then format the national phone number (so far)\r\n\t\t\t// using the newly selected phone number pattern.\r\n\r\n\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t// the supplied national number\r\n\t\t\t// using the selected phone number pattern.\r\n\r\n\t\t\treturn this.reformatNationalNumber()\r\n\t\t}\r\n\r\n\t\t// If could format the next (current) digit\r\n\t\t// using the previously chosen phone number format\r\n\t\t// then return the formatted number so far.\r\n\r\n\t\t// If no new phone number format could be chosen,\r\n\t\t// and couldn't format the supplied national number\r\n\t\t// using the selected phone number pattern,\r\n\t\t// then it will return `undefined`.\r\n\r\n\t\treturn national_number_formatted_with_previous_format\r\n\t}\r\n\r\n\treset()\r\n\t{\r\n\t\t// Input stripped of non-phone-number characters.\r\n\t\t// Can only contain a possible leading '+' sign and digits.\r\n\t\tthis.parsedInput = ''\r\n\r\n\t\tthis.currentOutput = ''\r\n\r\n\t\t// This contains the national prefix that has been extracted. It contains only\r\n\t\t// digits without formatting.\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tthis.nationalNumber = ''\r\n\t\tthis.carrierCode = ''\r\n\r\n\t\tthis.resetCountriness()\r\n\r\n\t\tthis.resetFormat()\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\tresetCountry()\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.country = undefined\r\n\t\t} else {\r\n\t\t\tthis.country = this.defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\tresetCountriness()\r\n\t{\r\n\t\tthis.resetCountry()\r\n\r\n\t\tif (this.defaultCountry && !this.isInternational())\r\n\t\t{\r\n\t\t\tthis.metadata.country(this.defaultCountry)\r\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\r\n\r\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.metadata.country(undefined)\r\n\t\t\tthis.countryCallingCode = undefined\r\n\r\n\t\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\t\t\tthis.available_formats = []\r\n\t\t\tthis.matching_formats = undefined\r\n\t\t}\r\n\t}\r\n\r\n\tresetFormat()\r\n\t{\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.partially_populated_template = undefined\r\n\t\tthis.last_match_position = -1\r\n\t}\r\n\r\n\t// Format each digit of national phone number (so far)\r\n\t// using the newly selected phone number pattern.\r\n\treformatNationalNumber()\r\n\t{\r\n\t\t// Format each digit of national phone number (so far)\r\n\t\t// using the selected phone number pattern.\r\n\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber)\r\n\t}\r\n\r\n\tinitialize_phone_number_formats_for_this_country_calling_code()\r\n\t{\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\r\n\t\t{\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\r\n\t\tthis.matching_formats = undefined\r\n\t}\r\n\r\n\tmatch_formats_by_leading_digits()\r\n\t{\r\n\t\tconst leading_digits = this.nationalNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digits patterns already match for a single first digit.\r\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (index_of_leading_digits_pattern < 0) {\r\n\t\t\tindex_of_leading_digits_pattern = 0\r\n\t\t}\r\n\r\n\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t// (only previously matched formats are considered for next digits).\r\n\t\tconst available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats\r\n\t\tthis.had_enough_leading_digits = this.shouldFormat()\r\n\r\n\t\tthis.matching_formats = available_formats.filter((format) =>\r\n\t\t{\r\n\t\t\tconst leading_digits_patterns_count = format.leadingDigitsPatterns().length\r\n\r\n\t\t\t// If this format is not restricted to a certain\r\n\t\t\t// leading digits pattern then it fits.\r\n\t\t\tif (leading_digits_patterns_count === 0)\r\n\t\t\t{\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1)\r\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\r\n\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1)\r\n\t\t{\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tshouldFormat()\r\n\t{\r\n\t\t// Start matching any formats at all when the national number\r\n\t\t// entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives\r\n\t\t// like when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Presumably the limitation of \"3 digits min\"\r\n\t\t// is imposed to exclude false matches,\r\n\t\t// e.g. when there are two different formats\r\n\t\t// each one fitting one or two leading digits being input.\r\n\t\t// But for this case I would propose a specific `if/else` condition.\r\n\t\t//\r\n\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH\r\n\t}\r\n\r\n\t// Check to see if there is an exact pattern match for these digits. If so, we\r\n\t// should use this instead of any other formatting template whose\r\n\t// `leadingDigitsPattern` also matches the input.\r\n\tattempt_to_format_complete_phone_number()\r\n\t{\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\r\n\t\t\tif (!matcher.test(this.nationalNumber))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.isFormatApplicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.resetFormat()\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\tlet formatted_number = format_national_number_using_format\r\n\t\t\t(\r\n\t\t\t\tthis.nationalNumber,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.isInternational(),\r\n\t\t\t\tthis.nationalPrefix !== '',\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\r\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t\t// Copied from Google's `libphonenumber`:\r\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\r\n\t\t\t\tformatted_number = '1 ' + formatted_number\r\n\t\t\t}\r\n\r\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\r\n\t\t\t//\r\n\t\t\t// `else` case doesn't ever happen\r\n\t\t\t// with the current metadata,\r\n\t\t\t// but just in case.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.createFormattingTemplate(format))\r\n\t\t\t{\r\n\t\t\t\t// Populate `this.partially_populated_template`\r\n\t\t\t\tthis.reformatNationalNumber()\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\r\n\t\t\t\tconst full_number = this.formatFullNumber(formatted_number)\r\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.partially_populated_template = full_number\r\n\t\t\t}\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode` in case of an international phone number\r\n\tformatFullNumber(formattedNationalNumber)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn `+${this.countryCallingCode} ${formattedNationalNumber}`\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textractCountryCallingCode()\r\n\t{\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata)\r\n\r\n\t\tif (!countryCallingCode)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\r\n\t\t// Sometimes people erroneously write national prefix\r\n\t\t// as part of an international number, e.g. +44 (0) ....\r\n\t\t// This violates the standards for international phone numbers,\r\n\t\t// so \"As You Type\" formatter assumes no national prefix\r\n\t\t// when parsing a phone number starting from `+`.\r\n\t\t// Even if it did attempt to filter-out that national prefix\r\n\t\t// it would look weird for a user trying to enter a digit\r\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\r\n\t\tthis.nationalNumber = number\r\n\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\treturn this.metadata.selectedCountry() !== undefined\r\n\t}\r\n\r\n\textractNationalPrefix()\r\n\t{\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tif (!this.metadata.selectedCountry()) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\r\n\t\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata)\r\n\r\n\t\tif (carrierCode) {\r\n\t\t\tthis.carrierCode = carrierCode\r\n\t\t}\r\n\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tif (!this.metadata.possibleLengths() ||\r\n\t\t\tthis.isPossibleNumber(this.nationalNumber) &&\r\n\t\t\t!this.isPossibleNumber(potential_national_number))\r\n\t\t{\r\n\t\t\t// Verify the parsed national (significant) number for this country\r\n\t\t\t//\r\n\t\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t\t// like `8` is the national prefix for Russia and both\r\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern()))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length)\r\n\t\tthis.nationalNumber = potential_national_number\r\n\r\n\t\treturn this.nationalPrefix\r\n\t}\r\n\r\n\tisPossibleNumber(number)\r\n\t{\r\n\t\tconst validation_result = checkNumberLengthForType(number, undefined, this.metadata)\r\n\t\tswitch (validation_result)\r\n\t\t{\r\n\t\t\tcase 'IS_POSSIBLE':\r\n\t\t\t\treturn true\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t// \treturn !this.isInternational()\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tchooseAnotherFormat()\r\n\t{\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// If this `format` is suitable for \"as you type\",\r\n\t\t\t// then extract the template from this format\r\n\t\t\t// and use it to format the phone number being input.\r\n\r\n\t\t\tif (!this.isFormatApplicable(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.createFormattingTemplate(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.last_match_position = -1\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// No format matches the phone number,\r\n\t\t// therefore set `country` to `undefined`\r\n\t\t// (or to the default country).\r\n\t\tthis.resetCountry()\r\n\r\n\t\t// No format matches the national phone number entered\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tisFormatApplicable(format)\r\n\t{\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and the user didn't input the national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If this format doesn't use national prefix\r\n\t\t// but the user did input national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tcreateFormattingTemplate(format)\r\n\t{\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForNumberFormatPattern(format)\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// This one is for national number only\r\n\t\tthis.partially_populated_template = template\r\n\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\r\n\t\t}\r\n\t\t// For local numbers, replace national prefix\r\n\t\t// with a digit placeholder.\r\n\t\telse {\r\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\r\n\t\t// This one is for the full phone number\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t// Generates formatting template for a phone number format\r\n\tgetTemplateForNumberFormatPattern(format)\r\n\t{\r\n\t\t// A very smart trick by the guys at Google\r\n\t\tlet number_pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS)\r\n\t\t{\r\n\t\t\tnumber_pattern = number_pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Prepare the phone number format\r\n\t\tconst number_format = this.getFormatFormat(format)\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strict_pattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strict_pattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// number_format : `$1 $2 $3`\r\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `number_pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\r\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\r\n\t\tconst national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then use it\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\t\tif (strict_pattern.test(national_number_dummy_digits)) {\r\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format\r\n\t\treturn dummy_phone_number_matching_format_pattern\r\n\t\t\t// Format the dummy phone number according to the format\r\n\t\t\t.replace(new RegExp(number_pattern), number_format)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits)\r\n\t{\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split(''))\r\n\t\t{\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\r\n\t\t\t// If more digits are entered than the current format could handle\r\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\r\n\t\t\t{\r\n\t\t\t\t// Reset the current format,\r\n\t\t\t\t// so that the new format will be chosen\r\n\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\r\n\t\t\t\t// later in code.\r\n\t\t\t\tthis.chosenFormat = undefined\r\n\t\t\t\tthis.template = undefined\r\n\t\t\t\tthis.partially_populated_template = undefined\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\r\n\t}\r\n\r\n\tisInternational() {\r\n\t\treturn this.parsedInput && this.parsedInput[0] === '+'\r\n\t}\r\n\r\n\tgetFormatFormat(format)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn changeInternationalFormatStyle(format.internationalFormat())\r\n\t\t}\r\n\r\n\t\t// If national prefix formatting rule is set\r\n\t\t// for this phone number format\r\n\t\tif (format.nationalPrefixFormattingRule())\r\n\t\t{\r\n\t\t\t// If the user did input the national prefix\r\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\r\n\t\t\t// then maybe make it part of the phone number template\r\n\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix())\r\n\t\t\t{\r\n\t\t\t\t// Make the national prefix part of the phone number template\r\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t// Copied from Google's `libphonenumber`:\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\r\n\t\t\treturn `1 ${format.format()}`\r\n\t\t}\r\n\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber()\r\n\t{\r\n\t\tif (!this.countryCallingCode || !this.nationalNumber) {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\tconst phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata)\r\n\t\tif (this.carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = this.carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// This method is still used in `react-phone-number-input/source/input-control.js`.\r\n\tgetNationalNumber() {\r\n\t\treturn this.nationalNumber\r\n\t}\r\n\r\n\tgetTemplate()\r\n\t{\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet index = -1\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.parsedInput.length)\r\n\t\t{\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function strip_dangling_braces(string)\r\n{\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces)\r\n\t{\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cut_stripping_dangling_braces(string, cut_before_index)\r\n{\r\n\tif (string[cut_before_index] === ')') {\r\n\t\tcut_before_index++\r\n\t}\r\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\r\n}\r\n\r\nexport function close_dangling_braces(template, cut_before)\r\n{\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times)\r\n{\r\n\tif (times < 1)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tlet result = ''\r\n\r\n\twhile (times > 1)\r\n\t{\r\n\t\tif (times & 1)\r\n\t\t{\r\n\t\t\tresult += string\r\n\t\t}\r\n\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\r\n\treturn result + string\r\n}","import Metadata from './metadata'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata)\r\n{\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\n// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from './metadata.min.json.js'\r\n\r\nimport parsePhoneNumberCustom from './es6/parsePhoneNumber'\r\nimport parsePhoneNumberFromStringCustom from './es6/parsePhoneNumberFromString'\r\n\r\nimport parseNumberCustom from './es6/parse'\r\nimport formatNumberCustom from './es6/format'\r\nimport getNumberTypeCustom from './es6/getNumberType'\r\nimport getExampleNumberCustom from './es6/getExampleNumber'\r\nimport isPossibleNumberCustom from './es6/isPossibleNumber'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport isValidNumberForRegionCustom from './es6/isValidNumberForRegion'\r\n\r\n// Deprecated\r\nimport findPhoneNumbersCustom, { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nimport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\n\r\nimport findNumbersCustom from './es6/findNumbers'\r\nimport searchNumbersCustom from './es6/searchNumbers'\r\nimport PhoneNumberMatcherCustom from './es6/PhoneNumberMatcher'\r\n\r\nimport AsYouTypeCustom from './es6/AsYouType'\r\n\r\nimport getCountryCallingCodeCustom from './es6/getCountryCallingCode'\r\nimport getCountriesCustom from './es6/getCountries'\r\nexport { default as Metadata } from './es6/metadata'\r\nimport { getExtPrefix as getExtPrefixCustom, isSupportedCountry as isSupportedCountryCustom } from './es6/metadata'\r\nimport { parseRFC3966 as parseRFC3966Custom, formatRFC3966 as formatRFC3966Custom } from './es6/RFC3966'\r\nimport formatIncompletePhoneNumberCustom from './es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from './es6/parseIncompletePhoneNumber'\r\n// Deprecated: remove DIGITS export in 2.0.0.\r\n// (it was used in `react-phone-number-input`)\r\nexport { DIGITS, default as parseDigits } from './es6/parseDigits'\r\nexport { default as ParseError } from './es6/ParseError'\r\n\r\nexport function parsePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parsePhoneNumberFromString()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberFromStringCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function formatNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getNumberType()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExampleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExampleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isPossibleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isPossibleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumberForRegion()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberForRegionCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function findPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function searchPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function PhoneNumberSearch(text, options)\r\n{\r\n\tPhoneNumberSearchCustom.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(PhoneNumberSearchCustom.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n\r\nexport function findNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options)\r\n{\r\n\tPhoneNumberMatcherCustom.call(this, text, options, metadata)\r\n}\r\n\r\nPhoneNumberMatcher.prototype = Object.create(PhoneNumberMatcherCustom.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country)\r\n{\r\n\tAsYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(AsYouTypeCustom.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isSupportedCountryCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExtPrefix()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExtPrefixCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatIncompletePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove this in 2.0.0 and make `custom.js` in ES6\r\n// (the old `custom.js` becomes `custom.commonjs.js`).\r\nexport { default as parseCustom } from './es6/parse'\r\nexport { default as formatCustom } from './es6/format'\r\nexport { default as isValidNumberCustom } from './es6/validate'\r\nexport { default as findPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\nexport { default as getNumberTypeCustom } from './es6/getNumberType'\r\nexport { default as getCountryCallingCodeCustom } from './es6/getCountryCallingCode'\r\n\r\nexport\r\n{\r\n\tdefault as AsYouTypeCustom,\r\n\t// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n\t// Seems to be not used anymore.\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/AsYouType'\r\n\r\nexport function getCountries()\r\n{\r\n\treturn getCountriesCustom(metadata)\r\n}\r\n\r\nexport function getCountryCallingCode(country)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\r\n\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getCountryCallingCode(country)\r\n}\r\n\r\n// `getPhoneCodeCustom` name is deprecated, use `getCountryCallingCodeCustom` instead.\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}","import { parsePhoneNumberFromString } from 'libphonenumber-js'\n\nconst $ = x => document.getElementById(x)\n\nlet finalNums = []\n\nasync function handleFile(file) {\n\tlet data \n    const reader = new FileReader();\n\treader.readAsText(file.target.files[0]);\n\n    reader.onload = async function(file) {\n\n\t\tdata = file.target.result\n\t\tlet rawNumsArray = await data.split('\\n')\n\t\tconsole.log(rawNumsArray)\n\n\t\tawait rawNumsArray.forEach(el => finalNums.push(parsePhoneNumberFromString(el)))\n\t\tconsole.log(finalNums)\n\n    };\n\n}\n\n\n$('fileUpload').addEventListener('change', handleFile)\n"]}