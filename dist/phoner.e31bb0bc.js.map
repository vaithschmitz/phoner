{"version":3,"sources":["node_modules/libphonenumber-js/metadata.min.json.js","../source/constants.js","../source/util.js","../source/ParseError.js","../../source/tools/semver-compare.js","../source/metadata.js","../source/extension.js","../source/isViablePhoneNumber.js","../source/parseDigits.js","../source/parseIncompletePhoneNumber.js","../source/getCountryCallingCode.js","../source/getNumberType_.js","../source/isPossibleNumber_.js","../source/IDD.js","../source/RFC3966.js","../source/validate_.js","../source/isValidNumberForRegion_.js","../source/format_.js","../source/PhoneNumber.js","../source/parse_.js","../source/parsePhoneNumber_.js","../source/parsePhoneNumber.js","../source/parsePhoneNumberFromString_.js","../source/parsePhoneNumberFromString.js","../source/parse.js","../source/format.js","../source/getNumberType.js","../source/getExampleNumber.js","../source/isPossibleNumber.js","../source/validate.js","../source/isValidNumberForRegion.js","../../source/findNumbers/util.js","../../source/findNumbers/parsePreCandidate.js","../../source/findNumbers/isValidPreCandidate.js","../../source/findNumbers/utf-8.js","../../source/findNumbers/isValidCandidate.js","../source/findPhoneNumbers_.js","../source/findPhoneNumbers.js","../../source/findNumbers/LRUCache.js","../../source/findNumbers/RegExpCache.js","../../source/findNumbers/Leniency.js","../source/PhoneNumberMatcher.js","../source/findNumbers_.js","../source/findNumbers.js","../source/searchNumbers.js","../source/AsYouType.js","../source/getCountries.js","../source/formatIncompletePhoneNumber.js","node_modules/libphonenumber-js/index.es6.js","node_modules/country-list/data.json","node_modules/country-list/country-list.js","index.js","../../../../usr/local/lib/node_modules/parcel/src/builtins/hmr-runtime.js"],"names":["MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","matchesEntirely","text","regular_expression","RegExp","test","mergeArrays","a","b","merged","slice","element","indexOf","push","sort","ParseError","code","name","constructor","message","stack","Error","prototype","Object","create","cmp","pa","split","pb","i","na","Number","nb","isNaN","V2","V3","DEFAULT_EXT_PREFIX","Metadata","metadata","validateMetadata","v1","version","v2","undefined","compare","v3","keys","countries","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","length","type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","replace","possibleLengths","is_object","join","type_of","getExtPrefix","ext","getCountryCallingCode","isSupportedCountry","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","extractExtension","number","start","search","number_without_extension","matches","match","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","DIGITS","parseDigit","character","parseDigits","string","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","value","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","_type","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossibleNumber","chooseCountryByCountryCallingCode","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","getIDDPrefix","countryMetadata","IDDPrefix","defaultIDDPrefix","stripIDDPrefix","IDDPrefixPattern","matchedGroups","parseRFC3966","part","formatRFC3966","isValidNumber","isValidNumberForRegion","defaultOptions","formatExtension","formattedNumber","extension","formatNumber","format_national_number","addExtension","fromCountry","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","changeInternationalFormatStyle","format_as","choose_format_for_number","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","PhoneNumber","TypeError","isCountryCode","_metadata","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","defaultCountry","parse_input","formatted_phone_number","parse_phone_number","carrierCode","selectedCountry","phoneNumber","valid","extended","possible","extract_formatted_phone_number","starts_at","strip_national_prefix_and_carrier_code","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","find_country_code","national_phone_number","possible_countries","_find_country_code","leadingDigits","with_extension_stripped","default_country","extractCountryCallingCode","parse_national_number","carrier_code","exactCountry","potential_national_number","numberWithoutIDD","parsePhoneNumber","parseNumber","normalizeArguments","arguments","parsePhoneNumber_","args","Array","call","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","error","parsePhoneNumberFromString_","_parseNumber","_formatNumber","arg_5","_getNumberType","getExampleNumber","examples","_isPossibleNumber","_isValidNumber","_isValidNumberForRegion","limit","lower","upper","trimAfterFirstMatch","regexp","index","startsWith","substring","endsWith","SECOND_NUMBER_START_PATTERN","parsePreCandidate","candidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","_pZ","pZ","PZ","_pN","_pNd","pNd","_pL","pL","pL_regexp","_pSc","pSc","pSc_regexp","_pMn","pMn","pMn_regexp","_InBasic_Latin","_InLatin_1_Supplement","_InLatin_Extended_A","_InLatin_Extended_Additional","_InLatin_Extended_B","_InCombining_Diacritical_Marks","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","isValidCandidate","leniency","previousChar","lastCharIndex","nextChar","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","VALID_PRECEDING_CHARACTER_PATTERN","findPhoneNumbers","PhoneNumberSearch","phones","hasNext","next","searchPhoneNumbers","Symbol","iterator","done","state","startsAt","parseCandidate","find","endsAt","last_match","_findPhoneNumbers","_searchPhoneNumbers","Node","key","prev","LRUCache","size","head","tail","cache","ensureLimit","node","remove","put","console","log","RegExpCache","regExp","get","POSSIBLE","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","leadingDigitsRegExp","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","pow","PhoneNumberMatcher","searchIndex","maxTries","Leniency","parseAndVerify","extractInnerMatch","innerMatchPattern","isFirstMatch","possibleInnerMatch","group","lastMatch","findNumbers","matcher","results","_findNumbers","searchNumbers","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","SUPPORT_LEGACY_FORMATTING_PATTERNS","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","reset","extracted_number","currentOutput","processInput","parsedInput","resetCountriness","isInternational","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","determineTheCountry","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","template","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","validation_result","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","cut_stripping_dangling_braces","strip_dangling_braces","dangling_braces","pop","cleared_string","cut_before_index","close_dangling_braces","cut_before","retained_template","opening_braces","count_occurences","closing_braces","symbol","count","times","getCountries","formatIncompletePhoneNumber","parameters","parsePhoneNumberCustom","apply","parsePhoneNumberFromStringCustom","parseNumberCustom","formatNumberCustom","getNumberTypeCustom","getExampleNumberCustom","isPossibleNumberCustom","isValidNumberCustom","isValidNumberForRegionCustom","findPhoneNumbersCustom","searchPhoneNumbersCustom","PhoneNumberSearchCustom","findNumbersCustom","searchNumbersCustom","PhoneNumberMatcherCustom","AsYouTypeCustom","isSupportedCountryCustom","getExtPrefixCustom","parseRFC3966Custom","formatRFC3966Custom","formatIncompletePhoneNumberCustom","getPhoneCode","getPhoneCodeCustom","$","x","document","getElementById","finalNums","isoList","handleFile","file","data","reader","FileReader","readAsText","target","files","onload","parsedRowRaw","buffer","el","forEach","addEventListener","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","overlay","createErrorOverlay","body","appendChild","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","isArray","concat","Function","deps","cached","some","cb"],"mappings":"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","file":"phoner.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.27\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"800\":[\"001\"],\"808\":[\"001\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"870\":[\"001\"],\"878\":[\"001\"],\"880\":[\"BD\"],\"881\":[\"001\"],\"882\":[\"001\"],\"883\":[\"001\"],\"886\":[\"TW\"],\"888\":[\"001\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"979\":[\"001\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[136-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[136-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|(?:[147]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"(?:365\\\\d{3}|900200)\\\\d{3}|(?:[12457]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|365\",\"[12]|365\",\"[12]|365(?:[0-46-9]|5[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[3-8]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-356]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-9]\"]]]],\"CK\":[\"682\",\"00\",\"[2-8]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-8]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1[2-79]|[25-8]|(?:18|4)[2-9]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1(?:80|9)\",\"1(?:800|9)\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|[24-8]\\\\d{7}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|5\\\\d{7}\",[6,7,8],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"[2-59]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-59]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1800\\\\d{6,7}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d\\\\d|900)\\\\d{4}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-4])\",\"[45]|8(?:00[1-9]|[1-4])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}|[1-35689]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[12]0|7)0|[368]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[12457]\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[39]\"]]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:0\\\\d|[2-7])\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[024-9])\",\"[25]|7(?:0|6(?:[04-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|80[04589])))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d|7(?:(?:26(?:6[13-9]|7[0-7])|442\\\\d|50(?:2[0-3]|[3-68]2|76))\\\\d|6888[2-46-8]))\\\\d\\\\d\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|629)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"(?:30|6\\\\d\\\\d|722)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"(?:[268]\\\\d|[79]0)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:00800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|(?:55|61)2|7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:1(?:29|60|8[06])|261|552|788[01])[2-7]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|[4-8])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|3179)|807(?:1|9[1-3])|(?:1552|7(?:28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(10(?:01|20|66))\"],\"LK\":[\"94\",\"00\",\"(?:[1-7]\\\\d|[89]1)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"(?:[2569]\\\\d|71)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[25-79]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29|38)[89]0\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[2-9]|3[2-57]|4[2-46-8]|8[235-7]|90)|3(?:[0-4]\\\\d|[57][2-9]|6[2-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"692[12]\\\\d{5}|(?:6(?:[0-7]\\\\d|8[0-247-9]|9[013-9])|7(?:0[06-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"5924[0-2]\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"(?:[246-9]\\\\d|50)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:596|69\\\\d)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[37][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[01]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|55\\\\d|888)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[458]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[28]\\\\d{7,9}|[346]\\\\d{7}|(?:508|[79]\\\\d)\\\\d{6,7}\",[8,9,10],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[025-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[25-8]\\\\d\\\\d|345|488|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|[3-7]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[268]\"],\"0$1\"]],\"0\",0,0,0,0,\"262|69|8\"],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[237-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|(?:[1-4]\\\\d|59)\\\\d{5}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"1|2[0-79]|3[0-46-8]|4[0-7]|59\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79[0-8]|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|799|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[3-59]\\\\d|77|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0457-9]\"],0,1]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|[5-8]\\\\d{3})\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-8]\"]]]],\"TR\":[\"90\",\"00\",\"(?:[2-58]\\\\d\\\\d|900)\\\\d{7}|4\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"(?:[24589]|7\\\\d)\\\\d{8}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25][2-8]|[346]|7[1-9]|8[237-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[258]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[89]00\\\\d{7}|(?:[24]\\\\d|50)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24589]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]]],\"WS\":[\"685\",\"0\",\"[2-6]\\\\d{4}|8\\\\d{5}(?:\\\\d{4})?|[78]\\\\d{6}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"8\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"],\"001\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]]]}}","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matchesEntirely(text = '', regular_expression) {\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\nexport default function cmp (a, b) {\r\n    var pa = a.split('.');\r\n    var pb = b.split('.');\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i]);\r\n        var nb = Number(pb[i]);\r\n        if (na > nb) return 1;\r\n        if (nb > na) return -1;\r\n        if (!isNaN(na) && isNaN(nb)) return 1;\r\n        if (isNaN(na) && !isNaN(nb)) return -1;\r\n    }\r\n    return 0;\r\n};","import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nexport default class Metadata\r\n{\r\n\tconstructor(metadata)\r\n\t{\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.v1 = !metadata.version\r\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\t\tthis.v3 = metadata.version !== undefined // && compare(metadata.version, V4) === -1\r\n\t}\r\n\r\n\tgetCountries()\r\n\t{\r\n\t\treturn Object.keys(this.metadata.countries)\r\n\t}\r\n\r\n\thasCountry(country)\r\n\t{\r\n\t\treturn this.metadata.countries[country] !== undefined\r\n\t}\r\n\r\n\tcountry(country)\r\n\t{\r\n\t\tif (!country)\r\n\t\t{\r\n\t\t\tthis._country = undefined\r\n\t\t\tthis.country_metadata = undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (!this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t\t}\r\n\r\n\t\tthis._country = country\r\n\t\tthis.country_metadata = this.metadata.countries[country]\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetDefaultCountryMetadataForRegion()\r\n\t{\r\n\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]]\r\n\t}\r\n\r\n\tcountryCallingCode()\r\n\t{\r\n\t\treturn this.country_metadata[0]\r\n\t}\r\n\r\n\tIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return this.country_metadata[1]\r\n\t\treturn this.country_metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.v1) return\r\n\t\treturn this.country_metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats()\r\n\t{\r\n\t\tconst formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tnationalPrefixForParsing()\r\n\t{\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when parsing\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes()\r\n\t{\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type)\r\n\t{\r\n\t\tif (this.hasTypes() && getType(this.types(), type))\r\n\t\t{\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n\r\n\tcountryCallingCodes()\r\n\t{\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\t//\r\n\t// `country_calling_code` is always valid.\r\n\t// But the actual country may not necessarily be part of the metadata.\r\n\t//\r\n\tchooseCountryByCountryCallingCode(country_calling_code)\r\n\t{\r\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\r\n\r\n\t\t// Do not want to test this case.\r\n\t\t// (custom metadata, not all countries).\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthis.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\tselectedCountry()\r\n\t{\r\n\t\treturn this._country\r\n\t}\r\n}\r\n\r\nclass Format\r\n{\r\n\tconstructor(format, metadata)\r\n\t{\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat()\r\n\t{\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns()\r\n\t{\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormatting()\r\n\t{\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix()\r\n\t{\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat()\r\n\t{\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\nclass Type\r\n{\r\n\tconstructor(type, metadata)\r\n\t{\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif\r\n\t(\r\n\t\t!is_object(metadata) ||\r\n\t\t!is_object(metadata.countries) ||\r\n\t\t(!is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries))\r\n\t)\r\n\t{\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` and \\`.country_calling_codes\\` child object properties. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata)\r\n{\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}","import { VALID_DIGITS } from './constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n// Pattern to capture digits used in an extension.\r\n// Places a maximum length of '7' for an extension.\r\nconst CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nfunction create_extension_pattern(purpose)\r\n{\r\n\t// One-character symbols that can be used to indicate an extension.\r\n\tlet single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E'\r\n\r\n\tswitch (purpose)\r\n\t{\r\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\r\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\r\n\t\tcase 'parsing':\r\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters\r\n\t}\r\n\r\n\treturn RFC3966_EXTN_PREFIX +\r\n\t\tCAPTURING_EXTN_DIGITS + '|' +\r\n\t\t'[ \\u00A0\\\\t,]*' +\r\n\t\t'(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\r\n\t\t// \"доб.\"\r\n\t\t'\\u0434\\u043E\\u0431|' +\r\n\t\t'[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' +\r\n\t\t'[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*' +\r\n\t\tCAPTURING_EXTN_DIGITS + '#?|' +\r\n\t\t'[- ]+([' + VALID_DIGITS + ']{1,5})#'\r\n}\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\nexport const EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching')\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport function extractExtension(number)\r\n{\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst number_without_extension = number.slice(0, start)\r\n\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length)\r\n\t{\r\n\t\tif (matches[i] != null && matches[i].length > 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tnumber : number_without_extension,\r\n\t\t\t\text    : matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp\r\n(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER +\r\n\t\t// Phone number extensions\r\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\r\n\t'$'\r\n,\r\n'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number)\r\n{\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS =\r\n{\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character)\r\n{\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\r\n\treturn result\r\n}","import { parseDigit } from './parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value)\r\n{\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+')\r\n\t{\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn '+'\r\n\t}\r\n\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","// Deprecated. Import from 'metadata.js' directly instead.\r\nexport { getCountryCallingCode as default } from './metadata'","import Metadata from './metadata'\r\nimport { matchesEntirely, mergeArrays } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options = {}, metadata)\r\n{\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\tmetadata.country(input.country)\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import Metadata from './metadata'\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nexport default function isPossibleNumber(input, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport { VALID_DIGITS } from './constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely } from './util'\r\nimport getNumberType from './getNumberType_'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tmetadata.country(input.country)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","import isValidNumber from './validate_'\r\n\r\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\r\nexport default function isValidNumberForRegion(input, country, options = {}, metadata)\r\n{\r\n\treturn input.country === country && isValidNumber(input, options, metadata)\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata)\r\n{\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format)\r\n\t{\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata)\r\n{\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tformat.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\r\n\tif (useInternationalFormat) {\r\n\t\treturn changeInternationalFormatStyle(formattedNumber)\r\n\t}\r\n\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction format_national_number(number, format_as, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function changeInternationalFormatStyle(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './getNumberType_'\r\nimport formatNumber from './format_'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { is_possible_number } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry))\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formatted_phone_number, ext } = parse_input(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formatted_phone_number)\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst\r\n\t{\r\n\t\tcountry,\r\n\t\tnational_number : nationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t}\r\n\t= parse_phone_number\r\n\t(\r\n\t\tformatted_phone_number,\r\n\t\toptions.defaultCountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false\r\n\r\n\tif (!options.extended)\r\n\t{\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible : valid ? true : (options.extended === true) && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\r\n\t\tphone : nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\r\nexport function extract_formatted_phone_number(text, v2)\r\n{\r\n\tif (!text)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH)\r\n\t{\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t// Attempt to extract a possible number from the string passed in\r\n\r\n\tconst starts_at = text.search(PHONE_NUMBER_START_PATTERN)\r\n\r\n\tif (starts_at < 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(starts_at)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n// Strips any national prefix (such as 0, 1) present in the number provided.\r\n// \"Carrier codes\" are only used  in Colombia and Brazil,\r\n// and only when dialing within those countries from a mobile phone to a fixed line number.\r\nexport function strip_national_prefix_and_carrier_code(number, metadata)\r\n{\r\n\tif (!number || !metadata.nationalPrefixForParsing())\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// In many countries the national prefix\r\n\t// is not just a constant digit (like `0` in UK)\r\n\t// but can be different depending on the phone number\r\n\t// (and can be also absent for some phone numbers).\r\n\t//\r\n\t// So `national_prefix_for_parsing` is used when parsing\r\n\t// a national-prefixed (local) phone number\r\n\t// into a national significant phone number\r\n\t// extracting that possible national prefix out of it.\r\n\t//\r\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\r\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\r\n\r\n\t// Attempt to parse the first digits as a national prefix\r\n\tconst national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst national_prefix_matcher = national_prefix_pattern.exec(number)\r\n\r\n\t// If no national prefix is present in the phone number,\r\n\t// but the national prefix is optional for this country,\r\n\t// then consider this phone number valid.\r\n\t//\r\n\t// Google's reference `libphonenumber` implementation\r\n\t// wouldn't recognize such phone numbers as valid,\r\n\t// but I think it would perfectly make sense\r\n\t// to consider such phone numbers as valid\r\n\t// because if a national phone number was originally\r\n\t// formatted without the national prefix\r\n\t// then it must be parseable back into the original national number.\r\n\t// In other words, `parse(format(number))`\r\n\t// must always be equal to `number`.\r\n\t//\r\n\tif (!national_prefix_matcher)\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet national_significant_number\r\n\r\n\t// In more complex cases just `national_prefix_for_parsing` regexp\r\n\t// is not enough to extract the national number and then strip it\r\n\t// like `number.slice(national_prefix.length)` because when parsing\r\n\t// national numbers it's not always clear whether the first digits\r\n\t// are a national prefix or part of the national significant number.\r\n\t// For such cases `national_prefix_transform_rule` regexp is present\r\n\t// which contains \"capturing groups\" that are later used in such\r\n\t// `national_prefix_transform_rule` to transform the national number\r\n\t// being parsed into the national significant number.\r\n\t//\r\n\t// Example.\r\n\t// Country: U.S. Virgin Islands (VI).\r\n\t// Country calling code: +1.\r\n\t// Leading digits: 340.\r\n\t// Phone number format: +1 (340) xxx-xxxx.\r\n\t// National prefix: 1.\r\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\r\n\t// National prefix transform rule: 340$1.\r\n\t//\r\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\r\n\t// will return \"1\" and the national significant number will be\r\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\r\n\t//\r\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\r\n\t// the \"captured group\" will be \"3401234567\" and the national significant\r\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\r\n\t//\r\n\t// `national_prefix_matcher[captured_groups_count]` means that\r\n\t// the corresponding \"captured group\" is not empty.\r\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\r\n\t// or if the \"capturing groups\" are defined as optional.\r\n\t// Example: \"0?(?:...)?\" for Argentina.\r\n\t//\r\n\tconst captured_groups_count = national_prefix_matcher.length - 1\r\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count])\r\n\t{\r\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule())\r\n\t}\r\n\t// If it's a simple-enough case then just strip the national prefix from the number.\r\n\telse\r\n\t{\r\n\t\t// National prefix is the whole substring matched by\r\n\t\t// the `national_prefix_for_parsing` regexp.\r\n\t\tconst national_prefix = national_prefix_matcher[0]\r\n\t\tnational_significant_number = number.slice(national_prefix.length)\r\n\t}\r\n\r\n\tlet carrierCode\r\n\tif (captured_groups_count > 0)\r\n\t{\r\n\t\tcarrierCode = national_prefix_matcher[1]\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matchesEntirely(number, national_number_rule) &&\r\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\r\n\t// {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: national_significant_number,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function find_country_code(country_calling_code, national_phone_number, metadata)\r\n{\r\n\t// Is always non-empty, because `country_calling_code` is always valid\r\n\tconst possible_countries = metadata.countryCallingCodes()[country_calling_code]\r\n\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possible_countries.length === 1)\r\n\t{\r\n\t\treturn possible_countries[0]\r\n\t}\r\n\r\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _find_country_code(possible_countries, national_phone_number, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tfor (const country of possible_countries)\r\n\t{\r\n\t\tmetadata.country(country)\r\n\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits())\r\n\t\t{\r\n\t\t\tif (national_phone_number &&\r\n\t\t\t\tnational_phone_number.search(metadata.leadingDigits()) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: national_phone_number, country }, undefined, metadata.metadata))\r\n\t\t{\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parse_input(text, v2)\r\n{\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0)\r\n\t{\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\r\n\tlet number = extract_formatted_phone_number(text, v2)\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext)\r\n\t{\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext)\r\n{\r\n\tconst result =\r\n\t{\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\r\n\tif (ext)\r\n\t{\r\n\t\tresult.ext = ext\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\r\nfunction parse_phone_number(formatted_phone_number, default_country, metadata)\r\n{\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata)\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\telse if (default_country)\r\n\t{\r\n\t\tmetadata.country(default_country)\r\n\t\tcountry = default_country\r\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tconst { national_number, carrier_code } = parse_national_number(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = find_country_code(countryCallingCode, national_number, metadata)\r\n\tif (exactCountry)\r\n\t{\r\n\t\tcountry = exactCountry\r\n\t\tmetadata.country(country)\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnational_number,\r\n\t\tcarrierCode: carrier_code\r\n\t}\r\n}\r\n\r\nfunction parse_national_number(number, metadata)\r\n{\r\n\tlet national_number = parseIncompletePhoneNumber(number)\r\n\tlet carrier_code\r\n\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(national_number, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths())\r\n\t{\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata))\r\n\t\t{\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnational_number = potential_national_number\r\n\t\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, metadata.nationalNumberPattern()))\r\n\t\t{\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnational_number = potential_national_number\r\n\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnational_number,\r\n\t\tcarrier_code\r\n\t}\r\n}\r\n\r\n// Determines the country for a given (possibly incomplete) phone number.\r\n// export function get_country_from_phone_number(number, metadata)\r\n// {\r\n// \treturn parse_phone_number(number, null, metadata).country\r\n// }\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata)\r\n{\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0')\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length)\r\n\t{\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\r\n\t\tif (metadata.countryCallingCodes()[countryCallingCode])\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","import _parseNumber from './parse_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parseNumber()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _parseNumber(text, options, metadata)\r\n}","import _formatNumber from './format_'\r\nimport parse from './parse_'\r\n\r\nexport default function formatNumber()\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'","import isViablePhoneNumber from './isViablePhoneNumber'\r\nimport _getNumberType from './getNumberType_'\r\nimport parse from './parse_'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (typeof arg_2 !== 'object')\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'","import PhoneNumber from './PhoneNumber'\r\n\r\nexport default function getExampleNumber(country, examples, metadata) {\r\n\tif (examples[country]) {\r\n\t\treturn new PhoneNumber(country, examples[country], metadata)\r\n\t}\r\n}","import { normalizeArguments } from './getNumberType'\r\nimport _isPossibleNumber from './isPossibleNumber_'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _isPossibleNumber(input, options, metadata)\r\n}","import _isValidNumber from './validate_'\r\nimport { normalizeArguments } from './getNumberType'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function isValidNumber()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _isValidNumber(input, options, metadata)\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\nimport parseNumber from './parse_'\r\nimport _isValidNumberForRegion from './isValidNumberForRegion_'\r\n\r\nexport default function isValidNumberForRegion(number, country, metadata)\r\n{\r\n\tif (typeof number !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('number must be a string')\r\n\t}\r\n\r\n\tif (typeof country !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('country must be a string')\r\n\t}\r\n\r\n\t// `parse` extracts phone numbers from raw text,\r\n\t// therefore it will cut off all \"garbage\" characters,\r\n\t// while this `validate` function needs to verify\r\n\t// that the phone number contains no \"garbage\"\r\n\t// therefore the explicit `isViablePhoneNumber` check.\r\n\tlet input\r\n\tif (isViablePhoneNumber(number)) {\r\n\t\tinput = parseNumber(number, { defaultCountry: country }, metadata)\r\n\t} else {\r\n\t\tinput = {}\r\n\t}\r\n\r\n\treturn _isValidNumberForRegion(input, country, undefined, metadata)\r\n}","/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n","import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}","// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants'\r\nimport { limit } from './util'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport {\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\nimport parse from './parse_'\r\n\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate from './findNumbers/isValidCandidate'\r\n\r\n// Copy-pasted from `./parse.js`.\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch\r\n{\r\n\t// Iteration tristate.\r\n\tstate = 'NOT_READY'\r\n\r\n\tconstructor(text, options = {}, metadata)\r\n\t{\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.regexp = new RegExp\r\n\t\t(\r\n\t\t\tVALID_PHONE_NUMBER +\r\n\t\t\t// Phone number extensions\r\n\t\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?',\r\n\t\t\t'ig'\r\n\t\t)\r\n\r\n\t\t// this.searching_from = 0\r\n\t}\r\n\r\n\tfind()\r\n\t{\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number   = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt)\r\n\t{\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID'))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt   = startsAt + number.length\r\n\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext()\r\n\t{\r\n\t\tif (this.state === 'NOT_READY')\r\n\t\t{\r\n\t\t\tthis.last_match = this.find()\r\n\r\n\t\t\tif (this.last_match)\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext()\r\n\t{\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext())\r\n\t\t{\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}","// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport _findPhoneNumbers, { searchPhoneNumbers as _searchPhoneNumbers } from './findPhoneNumbers_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\nexport default function findPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findPhoneNumbers(text, options, metadata)\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _searchPhoneNumbers(text, options, metadata)\r\n}","// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}","import LRUCache from './LRUCache'\r\n\r\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n// that use-case won't have a lot of benefit.\r\nexport default class RegExpCache {\r\n\tconstructor(size) {\r\n\t\tthis.cache = new LRUCache(size)\r\n\t}\r\n\r\n\tgetPatternForRegExp(pattern) {\r\n\t\tlet regExp = this.cache.get(pattern)\r\n\t\tif (!regExp) {\r\n\t\t\tregExp = new RegExp('^' + pattern)\r\n\t\t\tthis.cache.put(pattern, regExp)\r\n\t\t}\r\n\t\treturn regExp\r\n\t}\r\n}","import isValidNumber from '../validate_'\r\nimport parseDigits from '../parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups,\r\n  regExpCache\r\n) {\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n  const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n  if (alternateFormats) {\r\n    for (const alternateFormat of alternateFormats.numberFormats()) {\r\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n        // There is only one leading digits pattern for alternate formats.\r\n        const leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n          // Leading digits don't match; try another one.\r\n          continue\r\n        }\r\n      }\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n  if (formattingPattern) {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}","/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nimport parseNumber from './parse_'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n  // that use-case won't have a lot of benefit.\r\n  regExpCache = new RegExpCache(32)\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCountry : options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency : options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries : options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata)\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata, this.regExpCache))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt : offset,\r\n        endsAt   : offset + candidate.length,\r\n        country  : number.country,\r\n        phone    : number.phone\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}","import PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\nexport default function findNumbers(text, options, metadata)\r\n{\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}","import _findNumbers from './findNumbers_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\nexport default function findNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findNumbers(text, options, metadata)\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n//\r\n// Simplified: does not differentiate between \"local-only\" numbers\r\n// and \"internationally dialable\" numbers.\r\n// For example, doesn't include changes like this:\r\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\n\r\nimport {\r\n\textractCountryCallingCode,\r\n\textract_formatted_phone_number,\r\n\tfind_country_code,\r\n\tstrip_national_prefix_and_carrier_code\r\n} from './parse_'\r\n\r\nimport {\r\n\tFIRST_GROUP_PATTERN,\r\n\tformat_national_number_using_format,\r\n\tchangeInternationalFormatStyle\r\n} from './format_'\r\n\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\r\n(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\r\n\r\nexport default class AsYouType\r\n{\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(defaultCountry, metadata)\r\n\t{\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\r\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tthis.defaultCountry = defaultCountry\r\n\t\t}\r\n\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tinput(text)\r\n\t{\r\n\t\t// Parse input\r\n\r\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\r\n\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// since it's not considered a possible phone number.\r\n\t\tif (!extracted_number)\r\n\t\t{\r\n\t\t\tif (text && text.indexOf('+') >= 0)\r\n\t\t\t{\r\n\t\t\t\textracted_number = '+'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate possible first part of a phone number\r\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\r\n\t\t{\r\n\t\t\treturn this.currentOutput\r\n\t\t}\r\n\r\n\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number))\r\n\t}\r\n\r\n\tprocessInput(input)\r\n\t{\r\n\t\t// If an out of position '+' sign detected\r\n\t\t// (or a second '+' sign),\r\n\t\t// then just drop it from the input.\r\n\t\tif (input[0] === '+')\r\n\t\t{\r\n\t\t\tif (!this.parsedInput)\r\n\t\t\t{\r\n\t\t\t\tthis.parsedInput += '+'\r\n\r\n\t\t\t\t// If a default country was set\r\n\t\t\t\t// then reset it because an explicitly international\r\n\t\t\t\t// phone number is being entered\r\n\t\t\t\tthis.resetCountriness()\r\n\t\t\t}\r\n\r\n\t\t\tinput = input.slice(1)\r\n\t\t}\r\n\r\n\t\t// Raw phone number\r\n\t\tthis.parsedInput += input\r\n\r\n\t\t// // Reset phone number validation state\r\n\t\t// this.valid = false\r\n\r\n\t\t// Add digits to the national number\r\n\t\tthis.nationalNumber += input\r\n\r\n\t\t// TODO: Deprecated: rename `this.nationalNumber`\r\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\r\n\r\n\t\t// Try to format the parsed input\r\n\r\n\t\tif (this.isInternational())\r\n\t\t{\r\n\t\t\tif (!this.countryCallingCode)\r\n\t\t\t{\r\n\t\t\t\t// Extract country calling code from the digits entered so far.\r\n\r\n\t\t\t\t// There must be some digits in order to extract anything from them.\r\n\t\t\t\tif (!this.nationalNumber)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then he can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then just return the raw phone number,\r\n\t\t\t\t// because it has no way of knowing\r\n\t\t\t\t// how to format the phone number so far.\r\n\t\t\t\tif (!this.extractCountryCallingCode())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsedInput\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Initialize country-specific data\r\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t\t// `this.country` could be `undefined`,\r\n\t\t\t// for instance, when there is ambiguity\r\n\t\t\t// in a form of several different countries\r\n\t\t\t// each corresponding to the same country phone code\r\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\r\n\t\t\t// and there's not enough digits entered\r\n\t\t\t// to reliably determine the country\r\n\t\t\t// the phone number belongs to.\r\n\t\t\t// Therefore, in cases of such ambiguity,\r\n\t\t\t// each time something is input,\r\n\t\t\t// try to determine the country\r\n\t\t\t// (if it's not determined yet).\r\n\t\t\telse if (!this.country)\r\n\t\t\t{\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\r\n\t\t\tconst previous_national_prefix = this.nationalPrefix\r\n\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber\r\n\r\n\t\t\t// Possibly extract a national prefix\r\n\t\t\tthis.extractNationalPrefix()\r\n\r\n\t\t\tif (this.nationalPrefix !== previous_national_prefix)\r\n\t\t\t{\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.matching_formats = undefined\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if (!this.shouldFormat())\r\n\t\t// {\r\n\t\t// \treturn this.format_as_non_formatted_number()\r\n\t\t// }\r\n\r\n\t\tif (!this.nationalNumber)\r\n\t\t{\r\n\t\t\treturn this.format_as_non_formatted_number()\r\n\t\t}\r\n\r\n\t\t// Check the available phone number formats\r\n\t\t// based on the currently available leading digits.\r\n\t\tthis.match_formats_by_leading_digits()\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\tconst formatted_national_phone_number = this.formatNationalNumber(input)\r\n\r\n\t\t// If the phone number could be formatted,\r\n\t\t// then return it, possibly prepending with country phone code\r\n\t\t// (for international phone numbers only)\r\n\t\tif (formatted_national_phone_number)\r\n\t\t{\r\n\t\t\treturn this.formatFullNumber(formatted_national_phone_number)\r\n\t\t}\r\n\r\n\t\t// If the phone number couldn't be formatted,\r\n\t\t// then just fall back to the raw phone number.\r\n\t\treturn this.format_as_non_formatted_number()\r\n\t}\r\n\r\n\tformat_as_non_formatted_number()\r\n\t{\r\n\t\t// Strip national prefix for incorrectly inputted international phones.\r\n\t\tif (this.isInternational() && this.countryCallingCode)\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode}${this.nationalNumber}`\r\n\t\t}\r\n\r\n\t\treturn this.parsedInput\r\n\t}\r\n\r\n\tformatNationalNumber(next_digits)\r\n\t{\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tlet national_number_formatted_with_previous_format\r\n\t\tif (this.chosenFormat)\r\n\t\t{\r\n\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits)\r\n\t\t}\r\n\r\n\t\t// See if the input digits can be formatted properly already. If not,\r\n\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\r\n\t\t// based on the formatting pattern chosen.\r\n\r\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone is invalid\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formatted_number)\r\n\t\t{\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\r\n\t\t// For some phone number formats national prefix\r\n\r\n\t\t// If the previously chosen phone number format\r\n\t\t// didn't match the next (current) digit being input\r\n\t\t// (leading digits pattern didn't match).\r\n\t\tif (this.chooseAnotherFormat())\r\n\t\t{\r\n\t\t\t// And a more appropriate phone number format\r\n\t\t\t// has been chosen for these `leading digits`,\r\n\t\t\t// then format the national phone number (so far)\r\n\t\t\t// using the newly selected phone number pattern.\r\n\r\n\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t// the supplied national number\r\n\t\t\t// using the selected phone number pattern.\r\n\r\n\t\t\treturn this.reformatNationalNumber()\r\n\t\t}\r\n\r\n\t\t// If could format the next (current) digit\r\n\t\t// using the previously chosen phone number format\r\n\t\t// then return the formatted number so far.\r\n\r\n\t\t// If no new phone number format could be chosen,\r\n\t\t// and couldn't format the supplied national number\r\n\t\t// using the selected phone number pattern,\r\n\t\t// then it will return `undefined`.\r\n\r\n\t\treturn national_number_formatted_with_previous_format\r\n\t}\r\n\r\n\treset()\r\n\t{\r\n\t\t// Input stripped of non-phone-number characters.\r\n\t\t// Can only contain a possible leading '+' sign and digits.\r\n\t\tthis.parsedInput = ''\r\n\r\n\t\tthis.currentOutput = ''\r\n\r\n\t\t// This contains the national prefix that has been extracted. It contains only\r\n\t\t// digits without formatting.\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tthis.nationalNumber = ''\r\n\t\tthis.carrierCode = ''\r\n\r\n\t\tthis.resetCountriness()\r\n\r\n\t\tthis.resetFormat()\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\tresetCountry()\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.country = undefined\r\n\t\t} else {\r\n\t\t\tthis.country = this.defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\tresetCountriness()\r\n\t{\r\n\t\tthis.resetCountry()\r\n\r\n\t\tif (this.defaultCountry && !this.isInternational())\r\n\t\t{\r\n\t\t\tthis.metadata.country(this.defaultCountry)\r\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\r\n\r\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.metadata.country(undefined)\r\n\t\t\tthis.countryCallingCode = undefined\r\n\r\n\t\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\t\t\tthis.available_formats = []\r\n\t\t\tthis.matching_formats = undefined\r\n\t\t}\r\n\t}\r\n\r\n\tresetFormat()\r\n\t{\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.partially_populated_template = undefined\r\n\t\tthis.last_match_position = -1\r\n\t}\r\n\r\n\t// Format each digit of national phone number (so far)\r\n\t// using the newly selected phone number pattern.\r\n\treformatNationalNumber()\r\n\t{\r\n\t\t// Format each digit of national phone number (so far)\r\n\t\t// using the selected phone number pattern.\r\n\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber)\r\n\t}\r\n\r\n\tinitialize_phone_number_formats_for_this_country_calling_code()\r\n\t{\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\r\n\t\t{\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\r\n\t\tthis.matching_formats = undefined\r\n\t}\r\n\r\n\tmatch_formats_by_leading_digits()\r\n\t{\r\n\t\tconst leading_digits = this.nationalNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digits patterns already match for a single first digit.\r\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (index_of_leading_digits_pattern < 0) {\r\n\t\t\tindex_of_leading_digits_pattern = 0\r\n\t\t}\r\n\r\n\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t// (only previously matched formats are considered for next digits).\r\n\t\tconst available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats\r\n\t\tthis.had_enough_leading_digits = this.shouldFormat()\r\n\r\n\t\tthis.matching_formats = available_formats.filter((format) =>\r\n\t\t{\r\n\t\t\tconst leading_digits_patterns_count = format.leadingDigitsPatterns().length\r\n\r\n\t\t\t// If this format is not restricted to a certain\r\n\t\t\t// leading digits pattern then it fits.\r\n\t\t\tif (leading_digits_patterns_count === 0)\r\n\t\t\t{\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1)\r\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\r\n\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1)\r\n\t\t{\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tshouldFormat()\r\n\t{\r\n\t\t// Start matching any formats at all when the national number\r\n\t\t// entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives\r\n\t\t// like when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Presumably the limitation of \"3 digits min\"\r\n\t\t// is imposed to exclude false matches,\r\n\t\t// e.g. when there are two different formats\r\n\t\t// each one fitting one or two leading digits being input.\r\n\t\t// But for this case I would propose a specific `if/else` condition.\r\n\t\t//\r\n\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH\r\n\t}\r\n\r\n\t// Check to see if there is an exact pattern match for these digits. If so, we\r\n\t// should use this instead of any other formatting template whose\r\n\t// `leadingDigitsPattern` also matches the input.\r\n\tattempt_to_format_complete_phone_number()\r\n\t{\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\r\n\t\t\tif (!matcher.test(this.nationalNumber))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.isFormatApplicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.resetFormat()\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\tlet formatted_number = format_national_number_using_format\r\n\t\t\t(\r\n\t\t\t\tthis.nationalNumber,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.isInternational(),\r\n\t\t\t\tthis.nationalPrefix !== '',\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\r\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t\t// Copied from Google's `libphonenumber`:\r\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\r\n\t\t\t\tformatted_number = '1 ' + formatted_number\r\n\t\t\t}\r\n\r\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\r\n\t\t\t//\r\n\t\t\t// `else` case doesn't ever happen\r\n\t\t\t// with the current metadata,\r\n\t\t\t// but just in case.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.createFormattingTemplate(format))\r\n\t\t\t{\r\n\t\t\t\t// Populate `this.partially_populated_template`\r\n\t\t\t\tthis.reformatNationalNumber()\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\r\n\t\t\t\tconst full_number = this.formatFullNumber(formatted_number)\r\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.partially_populated_template = full_number\r\n\t\t\t}\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode` in case of an international phone number\r\n\tformatFullNumber(formattedNationalNumber)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn `+${this.countryCallingCode} ${formattedNationalNumber}`\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textractCountryCallingCode()\r\n\t{\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata)\r\n\r\n\t\tif (!countryCallingCode)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\r\n\t\t// Sometimes people erroneously write national prefix\r\n\t\t// as part of an international number, e.g. +44 (0) ....\r\n\t\t// This violates the standards for international phone numbers,\r\n\t\t// so \"As You Type\" formatter assumes no national prefix\r\n\t\t// when parsing a phone number starting from `+`.\r\n\t\t// Even if it did attempt to filter-out that national prefix\r\n\t\t// it would look weird for a user trying to enter a digit\r\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\r\n\t\tthis.nationalNumber = number\r\n\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\treturn this.metadata.selectedCountry() !== undefined\r\n\t}\r\n\r\n\textractNationalPrefix()\r\n\t{\r\n\t\tthis.nationalPrefix = ''\r\n\r\n\t\tif (!this.metadata.selectedCountry()) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\r\n\t\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata)\r\n\r\n\t\tif (carrierCode) {\r\n\t\t\tthis.carrierCode = carrierCode\r\n\t\t}\r\n\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tif (!this.metadata.possibleLengths() ||\r\n\t\t\tthis.isPossibleNumber(this.nationalNumber) &&\r\n\t\t\t!this.isPossibleNumber(potential_national_number))\r\n\t\t{\r\n\t\t\t// Verify the parsed national (significant) number for this country\r\n\t\t\t//\r\n\t\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t\t// like `8` is the national prefix for Russia and both\r\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern()))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length)\r\n\t\tthis.nationalNumber = potential_national_number\r\n\r\n\t\treturn this.nationalPrefix\r\n\t}\r\n\r\n\tisPossibleNumber(number)\r\n\t{\r\n\t\tconst validation_result = checkNumberLengthForType(number, undefined, this.metadata)\r\n\t\tswitch (validation_result)\r\n\t\t{\r\n\t\t\tcase 'IS_POSSIBLE':\r\n\t\t\t\treturn true\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t// \treturn !this.isInternational()\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tchooseAnotherFormat()\r\n\t{\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// If this `format` is suitable for \"as you type\",\r\n\t\t\t// then extract the template from this format\r\n\t\t\t// and use it to format the phone number being input.\r\n\r\n\t\t\tif (!this.isFormatApplicable(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.createFormattingTemplate(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tthis.chosenFormat = format\r\n\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.last_match_position = -1\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// No format matches the phone number,\r\n\t\t// therefore set `country` to `undefined`\r\n\t\t// (or to the default country).\r\n\t\tthis.resetCountry()\r\n\r\n\t\t// No format matches the national phone number entered\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tisFormatApplicable(format)\r\n\t{\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and the user didn't input the national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If this format doesn't use national prefix\r\n\t\t// but the user did input national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tcreateFormattingTemplate(format)\r\n\t{\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForNumberFormatPattern(format)\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// This one is for national number only\r\n\t\tthis.partially_populated_template = template\r\n\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\r\n\t\t}\r\n\t\t// For local numbers, replace national prefix\r\n\t\t// with a digit placeholder.\r\n\t\telse {\r\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\r\n\t\t// This one is for the full phone number\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t// Generates formatting template for a phone number format\r\n\tgetTemplateForNumberFormatPattern(format)\r\n\t{\r\n\t\t// A very smart trick by the guys at Google\r\n\t\tlet number_pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS)\r\n\t\t{\r\n\t\t\tnumber_pattern = number_pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Prepare the phone number format\r\n\t\tconst number_format = this.getFormatFormat(format)\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strict_pattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strict_pattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// number_format : `$1 $2 $3`\r\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `number_pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\r\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\r\n\t\tconst national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalNumber` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then use it\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\t\tif (strict_pattern.test(national_number_dummy_digits)) {\r\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format\r\n\t\treturn dummy_phone_number_matching_format_pattern\r\n\t\t\t// Format the dummy phone number according to the format\r\n\t\t\t.replace(new RegExp(number_pattern), number_format)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits)\r\n\t{\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split(''))\r\n\t\t{\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\r\n\t\t\t// If more digits are entered than the current format could handle\r\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\r\n\t\t\t{\r\n\t\t\t\t// Reset the current format,\r\n\t\t\t\t// so that the new format will be chosen\r\n\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\r\n\t\t\t\t// later in code.\r\n\t\t\t\tthis.chosenFormat = undefined\r\n\t\t\t\tthis.template = undefined\r\n\t\t\t\tthis.partially_populated_template = undefined\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\r\n\t}\r\n\r\n\tisInternational() {\r\n\t\treturn this.parsedInput && this.parsedInput[0] === '+'\r\n\t}\r\n\r\n\tgetFormatFormat(format)\r\n\t{\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn changeInternationalFormatStyle(format.internationalFormat())\r\n\t\t}\r\n\r\n\t\t// If national prefix formatting rule is set\r\n\t\t// for this phone number format\r\n\t\tif (format.nationalPrefixFormattingRule())\r\n\t\t{\r\n\t\t\t// If the user did input the national prefix\r\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\r\n\t\t\t// then maybe make it part of the phone number template\r\n\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix())\r\n\t\t\t{\r\n\t\t\t\t// Make the national prefix part of the phone number template\r\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t// Copied from Google's `libphonenumber`:\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\r\n\t\t\treturn `1 ${format.format()}`\r\n\t\t}\r\n\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber()\r\n\t{\r\n\t\tif (!this.countryCallingCode || !this.nationalNumber) {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\tconst phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata)\r\n\t\tif (this.carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = this.carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// This method is still used in `react-phone-number-input/source/input-control.js`.\r\n\tgetNationalNumber() {\r\n\t\treturn this.nationalNumber\r\n\t}\r\n\r\n\tgetTemplate()\r\n\t{\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet index = -1\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.parsedInput.length)\r\n\t\t{\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function strip_dangling_braces(string)\r\n{\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces)\r\n\t{\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cut_stripping_dangling_braces(string, cut_before_index)\r\n{\r\n\tif (string[cut_before_index] === ')') {\r\n\t\tcut_before_index++\r\n\t}\r\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\r\n}\r\n\r\nexport function close_dangling_braces(template, cut_before)\r\n{\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times)\r\n{\r\n\tif (times < 1)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tlet result = ''\r\n\r\n\twhile (times > 1)\r\n\t{\r\n\t\tif (times & 1)\r\n\t\t{\r\n\t\t\tresult += string\r\n\t\t}\r\n\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\r\n\treturn result + string\r\n}","import Metadata from './metadata'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata)\r\n{\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\n// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from './metadata.min.json.js'\r\n\r\nimport parsePhoneNumberCustom from './es6/parsePhoneNumber'\r\nimport parsePhoneNumberFromStringCustom from './es6/parsePhoneNumberFromString'\r\n\r\nimport parseNumberCustom from './es6/parse'\r\nimport formatNumberCustom from './es6/format'\r\nimport getNumberTypeCustom from './es6/getNumberType'\r\nimport getExampleNumberCustom from './es6/getExampleNumber'\r\nimport isPossibleNumberCustom from './es6/isPossibleNumber'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport isValidNumberForRegionCustom from './es6/isValidNumberForRegion'\r\n\r\n// Deprecated\r\nimport findPhoneNumbersCustom, { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nimport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\n\r\nimport findNumbersCustom from './es6/findNumbers'\r\nimport searchNumbersCustom from './es6/searchNumbers'\r\nimport PhoneNumberMatcherCustom from './es6/PhoneNumberMatcher'\r\n\r\nimport AsYouTypeCustom from './es6/AsYouType'\r\n\r\nimport getCountryCallingCodeCustom from './es6/getCountryCallingCode'\r\nimport getCountriesCustom from './es6/getCountries'\r\nexport { default as Metadata } from './es6/metadata'\r\nimport { getExtPrefix as getExtPrefixCustom, isSupportedCountry as isSupportedCountryCustom } from './es6/metadata'\r\nimport { parseRFC3966 as parseRFC3966Custom, formatRFC3966 as formatRFC3966Custom } from './es6/RFC3966'\r\nimport formatIncompletePhoneNumberCustom from './es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from './es6/parseIncompletePhoneNumber'\r\n// Deprecated: remove DIGITS export in 2.0.0.\r\n// (it was used in `react-phone-number-input`)\r\nexport { DIGITS, default as parseDigits } from './es6/parseDigits'\r\nexport { default as ParseError } from './es6/ParseError'\r\n\r\nexport function parsePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parsePhoneNumberFromString()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parsePhoneNumberFromStringCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function formatNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getNumberType()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExampleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExampleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isPossibleNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isPossibleNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\nexport function isValidNumberForRegion()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberForRegionCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function findPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function searchPhoneNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchPhoneNumbersCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated.\r\nexport function PhoneNumberSearch(text, options)\r\n{\r\n\tPhoneNumberSearchCustom.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(PhoneNumberSearchCustom.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n\r\nexport function findNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn findNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function searchNumbers()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn searchNumbersCustom.apply(this, parameters)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options)\r\n{\r\n\tPhoneNumberMatcherCustom.call(this, text, options, metadata)\r\n}\r\n\r\nPhoneNumberMatcher.prototype = Object.create(PhoneNumberMatcherCustom.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country)\r\n{\r\n\tAsYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(AsYouTypeCustom.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isSupportedCountryCustom.apply(this, parameters)\r\n}\r\n\r\nexport function getExtPrefix()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getExtPrefixCustom.apply(this, parameters)\r\n}\r\n\r\nexport function parseRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatRFC3966()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatRFC3966Custom.apply(this, parameters)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatIncompletePhoneNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// Deprecated: remove this in 2.0.0 and make `custom.js` in ES6\r\n// (the old `custom.js` becomes `custom.commonjs.js`).\r\nexport { default as parseCustom } from './es6/parse'\r\nexport { default as formatCustom } from './es6/format'\r\nexport { default as isValidNumberCustom } from './es6/validate'\r\nexport { default as findPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { searchPhoneNumbers as searchPhoneNumbersCustom } from './es6/findPhoneNumbers'\r\nexport { PhoneNumberSearch as PhoneNumberSearchCustom } from './es6/findPhoneNumbers_'\r\nexport { default as getNumberTypeCustom } from './es6/getNumberType'\r\nexport { default as getCountryCallingCodeCustom } from './es6/getCountryCallingCode'\r\n\r\nexport\r\n{\r\n\tdefault as AsYouTypeCustom,\r\n\t// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n\t// Seems to be not used anymore.\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/AsYouType'\r\n\r\nexport function getCountries()\r\n{\r\n\treturn getCountriesCustom(metadata)\r\n}\r\n\r\nexport function getCountryCallingCode(country)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}\r\n\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getCountryCallingCode(country)\r\n}\r\n\r\n// `getPhoneCodeCustom` name is deprecated, use `getCountryCallingCodeCustom` instead.\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\treturn getCountryCallingCodeCustom(country, metadata)\r\n}","module.exports = [\n  { \"code\": \"AD\", \"name\": \"Andorra\" },\n  { \"code\": \"AE\", \"name\": \"United Arab Emirates\" },\n  { \"code\": \"AF\", \"name\": \"Afghanistan\" },\n  { \"code\": \"AG\", \"name\": \"Antigua and Barbuda\" },\n  { \"code\": \"AI\", \"name\": \"Anguilla\" },\n  { \"code\": \"AL\", \"name\": \"Albania\" },\n  { \"code\": \"AM\", \"name\": \"Armenia\" },\n  { \"code\": \"AO\", \"name\": \"Angola\" },\n  { \"code\": \"AQ\", \"name\": \"Antarctica\" },\n  { \"code\": \"AR\", \"name\": \"Argentina\" },\n  { \"code\": \"AS\", \"name\": \"American Samoa\" },\n  { \"code\": \"AT\", \"name\": \"Austria\" },\n  { \"code\": \"AU\", \"name\": \"Australia\" },\n  { \"code\": \"AW\", \"name\": \"Aruba\" },\n  { \"code\": \"AX\", \"name\": \"Åland Islands\" },\n  { \"code\": \"AZ\", \"name\": \"Azerbaijan\" },\n  { \"code\": \"BA\", \"name\": \"Bosnia and Herzegovina\" },\n  { \"code\": \"BB\", \"name\": \"Barbados\" },\n  { \"code\": \"BD\", \"name\": \"Bangladesh\" },\n  { \"code\": \"BE\", \"name\": \"Belgium\" },\n  { \"code\": \"BF\", \"name\": \"Burkina Faso\" },\n  { \"code\": \"BG\", \"name\": \"Bulgaria\" },\n  { \"code\": \"BH\", \"name\": \"Bahrain\" },\n  { \"code\": \"BI\", \"name\": \"Burundi\" },\n  { \"code\": \"BJ\", \"name\": \"Benin\" },\n  { \"code\": \"BL\", \"name\": \"Saint Barthélemy\" },\n  { \"code\": \"BM\", \"name\": \"Bermuda\" },\n  { \"code\": \"BN\", \"name\": \"Brunei Darussalam\" },\n  { \"code\": \"BO\", \"name\": \"Bolivia, Plurinational State of\" },\n  { \"code\": \"BQ\", \"name\": \"Bonaire, Sint Eustatius and Saba\" },\n  { \"code\": \"BR\", \"name\": \"Brazil\" },\n  { \"code\": \"BS\", \"name\": \"Bahamas\" },\n  { \"code\": \"BT\", \"name\": \"Bhutan\" },\n  { \"code\": \"BV\", \"name\": \"Bouvet Island\" },\n  { \"code\": \"BW\", \"name\": \"Botswana\" },\n  { \"code\": \"BY\", \"name\": \"Belarus\" },\n  { \"code\": \"BZ\", \"name\": \"Belize\" },\n  { \"code\": \"CA\", \"name\": \"Canada\" },\n  { \"code\": \"CC\", \"name\": \"Cocos (Keeling) Islands\" },\n  { \"code\": \"CD\", \"name\": \"Congo, Democratic Republic of the\" },\n  { \"code\": \"CF\", \"name\": \"Central African Republic\" },\n  { \"code\": \"CG\", \"name\": \"Congo\" },\n  { \"code\": \"CH\", \"name\": \"Switzerland\" },\n  { \"code\": \"CI\", \"name\": \"Côte d'Ivoire\" },\n  { \"code\": \"CK\", \"name\": \"Cook Islands\" },\n  { \"code\": \"CL\", \"name\": \"Chile\" },\n  { \"code\": \"CM\", \"name\": \"Cameroon\" },\n  { \"code\": \"CN\", \"name\": \"China\" },\n  { \"code\": \"CO\", \"name\": \"Colombia\" },\n  { \"code\": \"CR\", \"name\": \"Costa Rica\" },\n  { \"code\": \"CU\", \"name\": \"Cuba\" },\n  { \"code\": \"CV\", \"name\": \"Cabo Verde\" },\n  { \"code\": \"CW\", \"name\": \"Curaçao\" },\n  { \"code\": \"CX\", \"name\": \"Christmas Island\" },\n  { \"code\": \"CY\", \"name\": \"Cyprus\" },\n  { \"code\": \"CZ\", \"name\": \"Czechia\" },\n  { \"code\": \"DE\", \"name\": \"Germany\" },\n  { \"code\": \"DJ\", \"name\": \"Djibouti\" },\n  { \"code\": \"DK\", \"name\": \"Denmark\" },\n  { \"code\": \"DM\", \"name\": \"Dominica\" },\n  { \"code\": \"DO\", \"name\": \"Dominican Republic\" },\n  { \"code\": \"DZ\", \"name\": \"Algeria\" },\n  { \"code\": \"EC\", \"name\": \"Ecuador\" },\n  { \"code\": \"EE\", \"name\": \"Estonia\" },\n  { \"code\": \"EG\", \"name\": \"Egypt\" },\n  { \"code\": \"EH\", \"name\": \"Western Sahara\" },\n  { \"code\": \"ER\", \"name\": \"Eritrea\" },\n  { \"code\": \"ES\", \"name\": \"Spain\" },\n  { \"code\": \"ET\", \"name\": \"Ethiopia\" },\n  { \"code\": \"FI\", \"name\": \"Finland\" },\n  { \"code\": \"FJ\", \"name\": \"Fiji\" },\n  { \"code\": \"FK\", \"name\": \"Falkland Islands (Malvinas)\" },\n  { \"code\": \"FM\", \"name\": \"Micronesia, Federated States of\" },\n  { \"code\": \"FO\", \"name\": \"Faroe Islands\" },\n  { \"code\": \"FR\", \"name\": \"France\" },\n  { \"code\": \"GA\", \"name\": \"Gabon\" },\n  { \"code\": \"GB\", \"name\": \"United Kingdom of Great Britain and Northern Ireland\" },\n  { \"code\": \"GD\", \"name\": \"Grenada\" },\n  { \"code\": \"GE\", \"name\": \"Georgia\" },\n  { \"code\": \"GF\", \"name\": \"French Guiana\" },\n  { \"code\": \"GG\", \"name\": \"Guernsey\" },\n  { \"code\": \"GH\", \"name\": \"Ghana\" },\n  { \"code\": \"GI\", \"name\": \"Gibraltar\" },\n  { \"code\": \"GL\", \"name\": \"Greenland\" },\n  { \"code\": \"GM\", \"name\": \"Gambia\" },\n  { \"code\": \"GN\", \"name\": \"Guinea\" },\n  { \"code\": \"GP\", \"name\": \"Guadeloupe\" },\n  { \"code\": \"GQ\", \"name\": \"Equatorial Guinea\" },\n  { \"code\": \"GR\", \"name\": \"Greece\" },\n  { \"code\": \"GS\", \"name\": \"South Georgia and the South Sandwich Islands\" },\n  { \"code\": \"GT\", \"name\": \"Guatemala\" },\n  { \"code\": \"GU\", \"name\": \"Guam\" },\n  { \"code\": \"GW\", \"name\": \"Guinea-Bissau\" },\n  { \"code\": \"GY\", \"name\": \"Guyana\" },\n  { \"code\": \"HK\", \"name\": \"Hong Kong\" },\n  { \"code\": \"HM\", \"name\": \"Heard Island and McDonald Islands\" },\n  { \"code\": \"HN\", \"name\": \"Honduras\" },\n  { \"code\": \"HR\", \"name\": \"Croatia\" },\n  { \"code\": \"HT\", \"name\": \"Haiti\" },\n  { \"code\": \"HU\", \"name\": \"Hungary\" },\n  { \"code\": \"ID\", \"name\": \"Indonesia\" },\n  { \"code\": \"IE\", \"name\": \"Ireland\" },\n  { \"code\": \"IL\", \"name\": \"Israel\" },\n  { \"code\": \"IM\", \"name\": \"Isle of Man\" },\n  { \"code\": \"IN\", \"name\": \"India\" },\n  { \"code\": \"IO\", \"name\": \"British Indian Ocean Territory\" },\n  { \"code\": \"IQ\", \"name\": \"Iraq\" },\n  { \"code\": \"IR\", \"name\": \"Iran, Islamic Republic of\" },\n  { \"code\": \"IS\", \"name\": \"Iceland\" },\n  { \"code\": \"IT\", \"name\": \"Italy\" },\n  { \"code\": \"JE\", \"name\": \"Jersey\" },\n  { \"code\": \"JM\", \"name\": \"Jamaica\" },\n  { \"code\": \"JO\", \"name\": \"Jordan\" },\n  { \"code\": \"JP\", \"name\": \"Japan\" },\n  { \"code\": \"KE\", \"name\": \"Kenya\" },\n  { \"code\": \"KG\", \"name\": \"Kyrgyzstan\" },\n  { \"code\": \"KH\", \"name\": \"Cambodia\" },\n  { \"code\": \"KI\", \"name\": \"Kiribati\" },\n  { \"code\": \"KM\", \"name\": \"Comoros\" },\n  { \"code\": \"KN\", \"name\": \"Saint Kitts and Nevis\" },\n  { \"code\": \"KP\", \"name\": \"Korea, Democratic People's Republic of\" },\n  { \"code\": \"KR\", \"name\": \"Korea, Republic of\" },\n  { \"code\": \"KW\", \"name\": \"Kuwait\" },\n  { \"code\": \"KY\", \"name\": \"Cayman Islands\" },\n  { \"code\": \"KZ\", \"name\": \"Kazakhstan\" },\n  { \"code\": \"LA\", \"name\": \"Lao People's Democratic Republic\" },\n  { \"code\": \"LB\", \"name\": \"Lebanon\" },\n  { \"code\": \"LC\", \"name\": \"Saint Lucia\" },\n  { \"code\": \"LI\", \"name\": \"Liechtenstein\" },\n  { \"code\": \"LK\", \"name\": \"Sri Lanka\" },\n  { \"code\": \"LR\", \"name\": \"Liberia\" },\n  { \"code\": \"LS\", \"name\": \"Lesotho\" },\n  { \"code\": \"LT\", \"name\": \"Lithuania\" },\n  { \"code\": \"LU\", \"name\": \"Luxembourg\" },\n  { \"code\": \"LV\", \"name\": \"Latvia\" },\n  { \"code\": \"LY\", \"name\": \"Libya\" },\n  { \"code\": \"MA\", \"name\": \"Morocco\" },\n  { \"code\": \"MC\", \"name\": \"Monaco\" },\n  { \"code\": \"MD\", \"name\": \"Moldova, Republic of\" },\n  { \"code\": \"ME\", \"name\": \"Montenegro\" },\n  { \"code\": \"MF\", \"name\": \"Saint Martin, (French part)\" },\n  { \"code\": \"MG\", \"name\": \"Madagascar\" },\n  { \"code\": \"MH\", \"name\": \"Marshall Islands\" },\n  { \"code\": \"MK\", \"name\": \"North Macedonia\" },\n  { \"code\": \"ML\", \"name\": \"Mali\" },\n  { \"code\": \"MM\", \"name\": \"Myanmar\" },\n  { \"code\": \"MN\", \"name\": \"Mongolia\" },\n  { \"code\": \"MO\", \"name\": \"Macao\" },\n  { \"code\": \"MP\", \"name\": \"Northern Mariana Islands\" },\n  { \"code\": \"MQ\", \"name\": \"Martinique\" },\n  { \"code\": \"MR\", \"name\": \"Mauritania\" },\n  { \"code\": \"MS\", \"name\": \"Montserrat\" },\n  { \"code\": \"MT\", \"name\": \"Malta\" },\n  { \"code\": \"MU\", \"name\": \"Mauritius\" },\n  { \"code\": \"MV\", \"name\": \"Maldives\" },\n  { \"code\": \"MW\", \"name\": \"Malawi\" },\n  { \"code\": \"MX\", \"name\": \"Mexico\" },\n  { \"code\": \"MY\", \"name\": \"Malaysia\" },\n  { \"code\": \"MZ\", \"name\": \"Mozambique\" },\n  { \"code\": \"NA\", \"name\": \"Namibia\" },\n  { \"code\": \"NC\", \"name\": \"New Caledonia\" },\n  { \"code\": \"NE\", \"name\": \"Niger\" },\n  { \"code\": \"NF\", \"name\": \"Norfolk Island\" },\n  { \"code\": \"NG\", \"name\": \"Nigeria\" },\n  { \"code\": \"NI\", \"name\": \"Nicaragua\" },\n  { \"code\": \"NL\", \"name\": \"Netherlands\" },\n  { \"code\": \"NO\", \"name\": \"Norway\" },\n  { \"code\": \"NP\", \"name\": \"Nepal\" },\n  { \"code\": \"NR\", \"name\": \"Nauru\" },\n  { \"code\": \"NU\", \"name\": \"Niue\" },\n  { \"code\": \"NZ\", \"name\": \"New Zealand\" },\n  { \"code\": \"OM\", \"name\": \"Oman\" },\n  { \"code\": \"PA\", \"name\": \"Panama\" },\n  { \"code\": \"PE\", \"name\": \"Peru\" },\n  { \"code\": \"PF\", \"name\": \"French Polynesia\" },\n  { \"code\": \"PG\", \"name\": \"Papua New Guinea\" },\n  { \"code\": \"PH\", \"name\": \"Philippines\" },\n  { \"code\": \"PK\", \"name\": \"Pakistan\" },\n  { \"code\": \"PL\", \"name\": \"Poland\" },\n  { \"code\": \"PM\", \"name\": \"Saint Pierre and Miquelon\" },\n  { \"code\": \"PN\", \"name\": \"Pitcairn\" },\n  { \"code\": \"PR\", \"name\": \"Puerto Rico\" },\n  { \"code\": \"PS\", \"name\": \"Palestine, State of\" },\n  { \"code\": \"PT\", \"name\": \"Portugal\" },\n  { \"code\": \"PW\", \"name\": \"Palau\" },\n  { \"code\": \"PY\", \"name\": \"Paraguay\" },\n  { \"code\": \"QA\", \"name\": \"Qatar\" },\n  { \"code\": \"RE\", \"name\": \"Réunion\" },\n  { \"code\": \"RO\", \"name\": \"Romania\" },\n  { \"code\": \"RS\", \"name\": \"Serbia\" },\n  { \"code\": \"RU\", \"name\": \"Russian Federation\" },\n  { \"code\": \"RW\", \"name\": \"Rwanda\" },\n  { \"code\": \"SA\", \"name\": \"Saudi Arabia\" },\n  { \"code\": \"SB\", \"name\": \"Solomon Islands\" },\n  { \"code\": \"SC\", \"name\": \"Seychelles\" },\n  { \"code\": \"SD\", \"name\": \"Sudan\" },\n  { \"code\": \"SE\", \"name\": \"Sweden\" },\n  { \"code\": \"SG\", \"name\": \"Singapore\" },\n  { \"code\": \"SH\", \"name\": \"Saint Helena, Ascension and Tristan da Cunha\" },\n  { \"code\": \"SI\", \"name\": \"Slovenia\" },\n  { \"code\": \"SJ\", \"name\": \"Svalbard and Jan Mayen\" },\n  { \"code\": \"SK\", \"name\": \"Slovakia\" },\n  { \"code\": \"SL\", \"name\": \"Sierra Leone\" },\n  { \"code\": \"SM\", \"name\": \"San Marino\" },\n  { \"code\": \"SN\", \"name\": \"Senegal\" },\n  { \"code\": \"SO\", \"name\": \"Somalia\" },\n  { \"code\": \"SR\", \"name\": \"Suriname\" },\n  { \"code\": \"SS\", \"name\": \"South Sudan\" },\n  { \"code\": \"ST\", \"name\": \"Sao Tome and Principe\" },\n  { \"code\": \"SV\", \"name\": \"El Salvador\" },\n  { \"code\": \"SX\", \"name\": \"Sint Maarten, (Dutch part)\" },\n  { \"code\": \"SY\", \"name\": \"Syrian Arab Republic\" },\n  { \"code\": \"SZ\", \"name\": \"Eswatini\" },\n  { \"code\": \"TC\", \"name\": \"Turks and Caicos Islands\" },\n  { \"code\": \"TD\", \"name\": \"Chad\" },\n  { \"code\": \"TF\", \"name\": \"French Southern Territories\" },\n  { \"code\": \"TG\", \"name\": \"Togo\" },\n  { \"code\": \"TH\", \"name\": \"Thailand\" },\n  { \"code\": \"TJ\", \"name\": \"Tajikistan\" },\n  { \"code\": \"TK\", \"name\": \"Tokelau\" },\n  { \"code\": \"TL\", \"name\": \"Timor-Leste\" },\n  { \"code\": \"TM\", \"name\": \"Turkmenistan\" },\n  { \"code\": \"TN\", \"name\": \"Tunisia\" },\n  { \"code\": \"TO\", \"name\": \"Tonga\" },\n  { \"code\": \"TR\", \"name\": \"Turkey\" },\n  { \"code\": \"TT\", \"name\": \"Trinidad and Tobago\" },\n  { \"code\": \"TV\", \"name\": \"Tuvalu\" },\n  { \"code\": \"TW\", \"name\": \"Taiwan, Province of China\" },\n  { \"code\": \"TZ\", \"name\": \"Tanzania, United Republic of\" },\n  { \"code\": \"UA\", \"name\": \"Ukraine\" },\n  { \"code\": \"UG\", \"name\": \"Uganda\" },\n  { \"code\": \"UM\", \"name\": \"United States Minor Outlying Islands\" },\n  { \"code\": \"US\", \"name\": \"United States of America\" },\n  { \"code\": \"UY\", \"name\": \"Uruguay\" },\n  { \"code\": \"UZ\", \"name\": \"Uzbekistan\" },\n  { \"code\": \"VA\", \"name\": \"Holy See\" },\n  { \"code\": \"VC\", \"name\": \"Saint Vincent and the Grenadines\" },\n  { \"code\": \"VE\", \"name\": \"Venezuela, Bolivarian Republic of\" },\n  { \"code\": \"VG\", \"name\": \"Virgin Islands, British\" },\n  { \"code\": \"VI\", \"name\": \"Virgin Islands, U.S.\" },\n  { \"code\": \"VN\", \"name\": \"Viet Nam\" },\n  { \"code\": \"VU\", \"name\": \"Vanuatu\" },\n  { \"code\": \"WF\", \"name\": \"Wallis and Futuna\" },\n  { \"code\": \"WS\", \"name\": \"Samoa\" },\n  { \"code\": \"YE\", \"name\": \"Yemen\" },\n  { \"code\": \"YT\", \"name\": \"Mayotte\" },\n  { \"code\": \"ZA\", \"name\": \"South Africa\" },\n  { \"code\": \"ZM\", \"name\": \"Zambia\" },\n  { \"code\": \"ZW\", \"name\": \"Zimbabwe\" }\n]\n;","'use strict'\n\nvar data = require('./data.json')\n\n/** Precompute name and code lookups. */\nvar nameMap = {}\nvar codeMap = {}\ndata.forEach(mapCodeAndName)\n\nfunction mapCodeAndName (country) {\n  nameMap[country.name.toLowerCase()] = country.code\n  codeMap[country.code.toLowerCase()] = country.name\n}\n\nexports.overwrite = function overwrite (countries) {\n  if (!countries || !countries.length) return\n  countries.forEach(function (country) {\n    var foundIndex = data.findIndex(function (item) {\n      return item.code === country.code\n    })\n    data[foundIndex] = country\n    mapCodeAndName(country)\n  })\n}\n\nexports.getCode = function getCode (name) {\n  return nameMap[name.toLowerCase()]\n}\n\nexports.getName = function getName (code) {\n  return codeMap[code.toLowerCase()]\n}\n\nexports.getNames = function getNames () {\n  return data.map(function (country) {\n    return country.name\n  })\n}\n\nexports.getCodes = function getCodes () {\n  return data.map(function (country) {\n    return country.code\n  })\n}\n\nexports.getCodeList = function getCodeList () {\n  return codeMap\n}\n\nexports.getNameList = function getNameList () {\n  return nameMap\n}\n\nexports.getData = function getData () {\n  return data\n}\n","import { parsePhoneNumberFromString, parse } from \"libphonenumber-js\";\nimport { getCode } from \"country-list\";\n\nconst $ = x => document.getElementById(x);\n\nlet finalNums = [];\n\nconst isoList = {\n  \"Afghanistan\": \"AF\",\n  \"Aland Islands\": \"AX\",\n  \"Albania\": \"AL\",\n  \"Algeria\": \"DZ\",\n  \"American Samoa\": \"AS\",\n  \"Andorra\": \"AD\",\n  \"Angola\": \"AO\",\n  \"Anguilla\": \"AI\",\n  \"Antarctica\": \"AQ\",\n  \"Antigua And Barbuda\": \"AG\",\n  \"Argentina\": \"AR\",\n  \"Armenia\": \"AM\",\n  \"Aruba\": \"AW\",\n  \"Australia\": \"AU\",\n  \"Austria\": \"AT\",\n  \"Azerbaijan\": \"AZ\",\n  \"Bahamas\": \"BS\",\n  \"Bahrain\": \"BH\",\n  \"Bangladesh\": \"BD\",\n  \"Barbados\": \"BB\",\n  \"Belarus\": \"BY\",\n  \"Belgium\": \"BE\",\n  \"Belize\": \"BZ\",\n  \"Benin\": \"BJ\",\n  \"Bermuda\": \"BM\",\n  \"Bhutan\": \"BT\",\n  \"Bolivia\": \"BO\",\n  \"Bosnia And Herzegovina\": \"BA\",\n  \"Botswana\": \"BW\",\n  \"Bouvet Island\": \"BV\",\n  \"Brazil\": \"BR\",\n  \"British Indian Ocean Territory\": \"IO\",\n  \"Brunei Darussalam\": \"BN\",\n  \"Bulgaria\": \"BG\",\n  \"Burkina Faso\": \"BF\",\n  \"Burundi\": \"BI\",\n  \"Cambodia\": \"KH\",\n  \"Cameroon\": \"CM\",\n  \"Canada\": \"CA\",\n  \"Cape Verde\": \"CV\",\n  \"Cayman Islands\": \"KY\",\n  \"Central African Republic\": \"CF\",\n  \"Chad\": \"TD\",\n  \"Chile\": \"CL\",\n  \"China\": \"CN\",\n  \"Christmas Island\": \"CX\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  \"Colombia\": \"CO\",\n  \"Comoros\": \"KM\",\n  \"Congo\": \"CG\",\n  \"Congo, Democratic Republic\": \"CD\",\n  \"Cook Islands\": \"CK\",\n  \"Costa Rica\": \"CR\",\n  \"Cote D'Ivoire\": \"CI\",\n  \"Croatia\": \"HR\",\n  \"Cuba\": \"CU\",\n  \"Cyprus\": \"CY\",\n  \"Czech Republic\": \"CZ\",\n  \"Denmark\": \"DK\",\n  \"Djibouti\": \"DJ\",\n  \"Dominica\": \"DM\",\n  \"Dominican Republic\": \"DO\",\n  \"Ecuador\": \"EC\",\n  \"Egypt\": \"EG\",\n  \"El Salvador\": \"SV\",\n  \"Equatorial Guinea\": \"GQ\",\n  \"Eritrea\": \"ER\",\n  \"Estonia\": \"EE\",\n  \"Ethiopia\": \"ET\",\n  \"Falkland Islands (Malvinas)\": \"FK\",\n  \"Faroe Islands\": \"FO\",\n  \"Fiji\": \"FJ\",\n  \"Finland\": \"FI\",\n  \"France\": \"FR\",\n  \"French Guiana\": \"GF\",\n  \"French Polynesia\": \"PF\",\n  \"French Southern Territories\": \"TF\",\n  \"Gabon\": \"GA\",\n  \"Gambia\": \"GM\",\n  \"Georgia\": \"GE\",\n  \"Germany\": \"DE\",\n  \"Ghana\": \"GH\",\n  \"Gibraltar\": \"GI\",\n  \"Greece\": \"GR\",\n  \"Greenland\": \"GL\",\n  \"Grenada\": \"GD\",\n  \"Guadeloupe\": \"GP\",\n  \"Guam\": \"GU\",\n  \"Guatemala\": \"GT\",\n  \"Guernsey\": \"GG\",\n  \"Guinea\": \"GN\",\n  \"Guinea-Bissau\": \"GW\",\n  \"Guyana\": \"GY\",\n  \"Haiti\": \"HT\",\n  \"Heard Island & Mcdonald Islands\": \"HM\",\n  \"Holy See (Vatican City State)\": \"VA\",\n  \"Honduras\": \"HN\",\n  \"Hong Kong\": \"HK\",\n  \"Hungary\": \"HU\",\n  \"Iceland\": \"IS\",\n  \"India\": \"IN\",\n  \"Indonesia\": \"ID\",\n  \"Iran, Islamic Republic Of\": \"IR\",\n  \"Iraq\": \"IQ\",\n  \"Ireland\": \"IE\",\n  \"Isle Of Man\": \"IM\",\n  \"Israel\": \"IL\",\n  \"Italy\": \"IT\",\n  \"Jamaica\": \"JM\",\n  \"Japan\": \"JP\",\n  \"Jersey\": \"JE\",\n  \"Jordan\": \"JO\",\n  \"Kazakhstan\": \"KZ\",\n  \"Kenya\": \"KE\",\n  \"Kiribati\": \"KI\",\n  \"Korea\": \"KR\",\n  \"Kuwait\": \"KW\",\n  \"Kyrgyzstan\": \"KG\",\n  \"Lao People's Democratic Republic\": \"LA\",\n  \"Latvia\": \"LV\",\n  \"Lebanon\": \"LB\",\n  \"Lesotho\": \"LS\",\n  \"Liberia\": \"LR\",\n  \"Libyan Arab Jamahiriya\": \"LY\",\n  \"Liechtenstein\": \"LI\",\n  \"Lithuania\": \"LT\",\n  \"Luxembourg\": \"LU\",\n  \"Macao\": \"MO\",\n  \"Macedonia\": \"MK\",\n  \"Madagascar\": \"MG\",\n  \"Malawi\": \"MW\",\n  \"Malaysia\": \"MY\",\n  \"Maldives\": \"MV\",\n  \"Mali\": \"ML\",\n  \"Malta\": \"MT\",\n  \"Marshall Islands\": \"MH\",\n  \"Martinique\": \"MQ\",\n  \"Mauritania\": \"MR\",\n  \"Mauritius\": \"MU\",\n  \"Mayotte\": \"YT\",\n  \"Mexico\": \"MX\",\n  \"Micronesia, Federated States Of\": \"FM\",\n  \"Moldova\": \"MD\",\n  \"Monaco\": \"MC\",\n  \"Mongolia\": \"MN\",\n  \"Montenegro\": \"ME\",\n  \"Montserrat\": \"MS\",\n  \"Morocco\": \"MA\",\n  \"Mozambique\": \"MZ\",\n  \"Myanmar\": \"MM\",\n  \"Namibia\": \"NA\",\n  \"Nauru\": \"NR\",\n  \"Nepal\": \"NP\",\n  \"Netherlands\": \"NL\",\n  \"Netherlands Antilles\": \"AN\",\n  \"New Caledonia\": \"NC\",\n  \"New Zealand\": \"NZ\",\n  \"Nicaragua\": \"NI\",\n  \"Niger\": \"NE\",\n  \"Nigeria\": \"NG\",\n  \"Niue\": \"NU\",\n  \"Norfolk Island\": \"NF\",\n  \"Northern Mariana Islands\": \"MP\",\n  \"Norway\": \"NO\",\n  \"Oman\": \"OM\",\n  \"Pakistan\": \"PK\",\n  \"Palau\": \"PW\",\n  \"Palestinian Territory, Occupied\": \"PS\",\n  \"Panama\": \"PA\",\n  \"Papua New Guinea\": \"PG\",\n  \"Paraguay\": \"PY\",\n  \"Peru\": \"PE\",\n  \"Philippines\": \"PH\",\n  \"Pitcairn\": \"PN\",\n  \"Poland\": \"PL\",\n  \"Portugal\": \"PT\",\n  \"Puerto Rico\": \"PR\",\n  \"Qatar\": \"QA\",\n  \"Reunion\": \"RE\",\n  \"Romania\": \"RO\",\n  \"Russian Federation\": \"RU\",\n  \"Rwanda\": \"RW\",\n  \"Saint Barthelemy\": \"BL\",\n  \"Saint Helena\": \"SH\",\n  \"Saint Kitts And Nevis\": \"KN\",\n  \"Saint Lucia\": \"LC\",\n  \"Saint Martin\": \"MF\",\n  \"Saint Pierre And Miquelon\": \"PM\",\n  \"Saint Vincent And Grenadines\": \"VC\",\n  \"Samoa\": \"WS\",\n  \"San Marino\": \"SM\",\n  \"Sao Tome And Principe\": \"ST\",\n  \"Saudi Arabia\": \"SA\",\n  \"Senegal\": \"SN\",\n  \"Serbia\": \"RS\",\n  \"Seychelles\": \"SC\",\n  \"Sierra Leone\": \"SL\",\n  \"Singapore\": \"SG\",\n  \"Slovakia\": \"SK\",\n  \"Slovenia\": \"SI\",\n  \"Solomon Islands\": \"SB\",\n  \"Somalia\": \"SO\",\n  \"South Africa\": \"ZA\",\n  \"South Georgia And Sandwich Isl.\": \"GS\",\n  \"Spain\": \"ES\",\n  \"Sri Lanka\": \"LK\",\n  \"Sudan\": \"SD\",\n  \"Suriname\": \"SR\",\n  \"Svalbard And Jan Mayen\": \"SJ\",\n  \"Swaziland\": \"SZ\",\n  \"Sweden\": \"SE\",\n  \"Switzerland\": \"CH\",\n  \"Syrian Arab Republic\": \"SY\",\n  \"Taiwan\": \"TW\",\n  \"Tajikistan\": \"TJ\",\n  \"Tanzania\": \"TZ\",\n  \"Thailand\": \"TH\",\n  \"Timor-Leste\": \"TL\",\n  \"Togo\": \"TG\",\n  \"Tokelau\": \"TK\",\n  \"Tonga\": \"TO\",\n  \"Trinidad And Tobago\": \"TT\",\n  \"Tunisia\": \"TN\",\n  \"Turkey\": \"TR\",\n  \"Turkmenistan\": \"TM\",\n  \"Turks And Caicos Islands\": \"TC\",\n  \"Tuvalu\": \"TV\",\n  \"Uganda\": \"UG\",\n  \"Ukraine\": \"UA\",\n  \"United Arab Emirates\": \"AE\",\n  \"United Kingdom\": \"GB\",\n  \"United States\": \"US\",\n  \"United States Outlying Islands\": \"UM\",\n  \"Uruguay\": \"UY\",\n  \"Uzbekistan\": \"UZ\",\n  \"Vanuatu\": \"VU\",\n  \"Venezuela\": \"VE\",\n  \"Viet Nam\": \"VN\",\n  \"Virgin Islands, British\": \"VG\",\n  \"Virgin Islands, U.S.\": \"VI\",\n  \"Wallis And Futuna\": \"WF\",\n  \"Western Sahara\": \"EH\",\n  \"Yemen\": \"YE\",\n  \"Zambia\": \"ZM\",\n  \"Zimbabwe\": \"ZW\"\n}\n\n\n// parse csv to js\nconst handleFile = async file => {\n  let data;\n  const reader = new FileReader();\n\n  // read from file input\n  reader.readAsText(file.target.files[0]);\n\n\n  // post read, parse to array\n  reader.onload = async function(file) {\n    data = file.target.result;\n    let parsedRowRaw = await data.split(\"\\n\");\n    let buffer = [];\n    parsedRowRaw = await parsedRowRaw.map(el => el.split(','))\n\n    // replace countries with ISO codews\n    for(let i = 0; i < parsedRowRaw.length; i++){\n      if(parsedRowRaw[i][1].length > 0){\n        parsedRowRaw[i][1] = isoList[parsedRowRaw[i][1].replace(/^\\s+|\\s+$/g, '')]\n      }\n    } \n\n    // parse into phone number where el[0] === rawNum, el[1] === iso\n    await parsedRowRaw.forEach(el => {\n      if(el[0] !== '' && el[1] !== ''){\n        buffer.push(parsePhoneNumberFromString(el[0], el[1]))\n      }\n      else if(el[0] !== '' & el[1] === ''){\n        buffer.push(parsePhoneNumberFromString(el[0]))\n      }\n      else{\n        buffer.push('NOPE')\n      }\n    }\n      \n    );\n    \n    console.log(buffer)\n\n  //   buffer.forEach(el => {\n  //     el !== undefined ? finalNums.push(el.number) : finalNums.push(\"\");\n  //   });\n\n  //   console.log(finalNums);\n  };\n};\n\n\n\n// output\n\n\n\n$(\"fileUpload\").addEventListener(\"change\", handleFile);\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}