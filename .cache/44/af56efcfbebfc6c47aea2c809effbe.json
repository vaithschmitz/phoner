{"id":"node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","dependencies":[{"name":"/Users/vaith/Desktop/phoner/node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/vaith/Desktop/phoner/package.json","includedInParent":true,"mtime":1576059360169},{"name":"/Users/vaith/Desktop/phoner/node_modules/libphonenumber-js/package.json","includedInParent":true,"mtime":1574443680780},{"name":"./util","loc":{"line":1,"column":36},"parent":"/Users/vaith/Desktop/phoner/node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","resolved":"/Users/vaith/Desktop/phoner/node_modules/libphonenumber-js/es6/findNumbers/util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parsePreCandidate;\n\nvar _util = require(\"./util\");\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nfunction parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return (0, _util.trimAfterFirstMatch)(SECOND_NUMBER_START_PATTERN, candidate);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":5,"column":0},"generated":{"line":12,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":6,"column":0},"generated":{"line":13,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":7,"column":0},"generated":{"line":14,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":8,"column":0},"generated":{"line":15,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":9,"column":0},"generated":{"line":16,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":10,"column":0},"generated":{"line":17,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":11,"column":0},"generated":{"line":18,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"SECOND_NUMBER_START_PATTERN","original":{"line":11,"column":6},"generated":{"line":18,"column":4}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"SECOND_NUMBER_START_PATTERN","original":{"line":11,"column":6},"generated":{"line":18,"column":31}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":11,"column":36},"generated":{"line":18,"column":34}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":11,"column":0},"generated":{"line":18,"column":44}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":13,"column":15},"generated":{"line":20,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"parsePreCandidate","original":{"line":13,"column":24},"generated":{"line":20,"column":9}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":13,"column":15},"generated":{"line":20,"column":26}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"candidate","original":{"line":13,"column":42},"generated":{"line":20,"column":27}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":13,"column":15},"generated":{"line":20,"column":36}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":38}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":15,"column":1},"generated":{"line":21,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":16,"column":1},"generated":{"line":22,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":17,"column":1},"generated":{"line":23,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":18,"column":1},"generated":{"line":24,"column":0}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"trimAfterFirstMatch","original":{"line":18,"column":8},"generated":{"line":24,"column":9}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"SECOND_NUMBER_START_PATTERN","original":{"line":18,"column":28},"generated":{"line":24,"column":40}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"trimAfterFirstMatch","original":{"line":18,"column":8},"generated":{"line":24,"column":67}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"candidate","original":{"line":18,"column":57},"generated":{"line":24,"column":69}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":"trimAfterFirstMatch","original":{"line":18,"column":8},"generated":{"line":24,"column":78}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":18,"column":1},"generated":{"line":24,"column":79}},{"source":"../../source/findNumbers/parsePreCandidate.js","name":null,"original":{"line":19,"column":1},"generated":{"line":25,"column":0}}],"sources":{"../../source/findNumbers/parsePreCandidate.js":"import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}"},"lineCount":null}},"error":null,"hash":"260ba8cec919fd45b0a16ccc9ba31e69","cacheData":{"env":{}}}